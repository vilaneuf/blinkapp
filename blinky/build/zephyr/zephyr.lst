
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000f20 	.word	0x20000f20
}
   4:	000017b5 	.word	0x000017b5
   8:	00004a7d 	.word	0x00004a7d
   c:	00001789 	.word	0x00001789
  10:	00001789 	.word	0x00001789
  14:	00001789 	.word	0x00001789
  18:	00001789 	.word	0x00001789
  1c:	00001789 	.word	0x00001789
	...
  2c:	000014d5 	.word	0x000014d5
  30:	00001789 	.word	0x00001789
  34:	00000000 	.word	0x00000000
  38:	0000147d 	.word	0x0000147d
  3c:	00001789 	.word	0x00001789

00000040 <_irq_vector_table>:
  40:	00001555 00001555 00001555 00001555     U...U...U...U...
  50:	00001555 00001555 00001555 00001555     U...U...U...U...
  60:	00001555 00001555 00001555 00001555     U...U...U...U...
  70:	00001555 00001555 00001555 00001555     U...U...U...U...
  80:	00001555 00001555 00001555 00001555     U...U...U...U...
  90:	00001555 00001555 00001555 00001555     U...U...U...U...
  a0:	00001555 00001555 00001555 00001555     U...U...U...U...
  b0:	00001555 00001555 00001555 00001555     U...U...U...U...
  c0:	00001555 00001555 00001555 00001555     U...U...U...U...
  d0:	00001555 00001555 00001555 00001555     U...U...U...U...
  e0:	00001555 00001555 00001555 00001555     U...U...U...U...
  f0:	00001555 00001555 00001555 00001555     U...U...U...U...
 100:	00001555 00001555 00001555 00001555     U...U...U...U...
 110:	00001555 00001555 00001555 00001555     U...U...U...U...
 120:	00001555 00001555 00001555 00001555     U...U...U...U...
 130:	00001555 00001555 00001555 00001555     U...U...U...U...
 140:	00001555 00001555 00001555 00001555     U...U...U...U...
 150:	00001555                                U...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <CONFIG_SRAM_SIZE+0x5e>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_SRAM_SIZE+0x46>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_SRAM_SIZE+0x44>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_FLASH_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <CONFIG_SRAM_SIZE+0x5a>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <CONFIG_SRAM_SIZE+0x62>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <CONFIG_SRAM_SIZE+0xa4>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <CONFIG_SRAM_SIZE+0xa0>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_FLASH_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_FLASH_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_SRAM_SIZE+0x50>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_FLASH_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc0>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_FLASH_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_FLASH_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_FLASH_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_FLASH_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <CONFIG_SRAM_SIZE+0x76>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_FLASH_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13a>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_FLASH_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x156>
     3d0:	d106      	bne.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_FLASH_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <CONFIG_SRAM_SIZE+0xa4>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_SRAM_SIZE+0x46>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
     450:	b538      	push	{r3, r4, r5, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     452:	4c10      	ldr	r4, [pc, #64]	; (494 <main+0x44>)
     454:	4620      	mov	r0, r4
     456:	f004 fdff 	bl	5058 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     45a:	b1c8      	cbz	r0, 490 <main+0x40>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     45c:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
     45e:	68a5      	ldr	r5, [r4, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     460:	6813      	ldr	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     462:	211c      	movs	r1, #28
		data->invert |= (gpio_port_pins_t)BIT(pin);
     464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     468:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     46a:	4620      	mov	r0, r4
     46c:	682b      	ldr	r3, [r5, #0]
     46e:	4a0a      	ldr	r2, [pc, #40]	; (498 <main+0x48>)
     470:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
     472:	2800      	cmp	r0, #0
     474:	db0c      	blt.n	490 <main+0x40>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
     476:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     47a:	4620      	mov	r0, r4
     47c:	696b      	ldr	r3, [r5, #20]
     47e:	4798      	blx	r3
		return;
	}

	while (1) {
		ret = gpio_pin_toggle_dt(&led);
		if (ret < 0) {
     480:	2800      	cmp	r0, #0
     482:	db05      	blt.n	490 <main+0x40>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     484:	2100      	movs	r1, #0
     486:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     48a:	f003 fe35 	bl	40f8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     48e:	e7f2      	b.n	476 <main+0x26>
			return;
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
     490:	bd38      	pop	{r3, r4, r5, pc}
     492:	bf00      	nop
     494:	000053b4 	.word	0x000053b4
     498:	00060001 	.word	0x00060001

0000049c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     49c:	680b      	ldr	r3, [r1, #0]
     49e:	3301      	adds	r3, #1
     4a0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     4a2:	4b01      	ldr	r3, [pc, #4]	; (4a8 <char_out+0xc>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	4718      	bx	r3
     4a8:	20000000 	.word	0x20000000

000004ac <__printk_hook_install>:
	_char_out = fn;
     4ac:	4b01      	ldr	r3, [pc, #4]	; (4b4 <__printk_hook_install+0x8>)
     4ae:	6018      	str	r0, [r3, #0]
}
     4b0:	4770      	bx	lr
     4b2:	bf00      	nop
     4b4:	20000000 	.word	0x20000000

000004b8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     4b8:	b507      	push	{r0, r1, r2, lr}
     4ba:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     4bc:	2100      	movs	r1, #0
{
     4be:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     4c0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     4c2:	4803      	ldr	r0, [pc, #12]	; (4d0 <vprintk+0x18>)
     4c4:	a901      	add	r1, sp, #4
     4c6:	f000 f8eb 	bl	6a0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4ca:	b003      	add	sp, #12
     4cc:	f85d fb04 	ldr.w	pc, [sp], #4
     4d0:	0000049d 	.word	0x0000049d

000004d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4d8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     4dc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4de:	f019 0808 	ands.w	r8, r9, #8
{
     4e2:	4693      	mov	fp, r2
	if (processing) {
     4e4:	d00d      	beq.n	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
		if (evt == EVT_COMPLETE) {
     4e6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4e8:	bf0c      	ite	eq
     4ea:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4ee:	f049 0920 	orrne.w	r9, r9, #32
     4f2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4f6:	f38b 8811 	msr	BASEPRI, fp
     4fa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     502:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     506:	2902      	cmp	r1, #2
     508:	d107      	bne.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
			evt = process_recheck(mgr);
     50a:	4620      	mov	r0, r4
     50c:	f004 f98b 	bl	4826 <process_recheck>
		if (evt == EVT_NOP) {
     510:	2800      	cmp	r0, #0
     512:	d0f0      	beq.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
		if (evt == EVT_COMPLETE) {
     514:	2801      	cmp	r0, #1
     516:	8b23      	ldrh	r3, [r4, #24]
     518:	d150      	bne.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
			res = mgr->last_res;
     51a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     51c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     51e:	2f00      	cmp	r7, #0
     520:	da15      	bge.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
		*clients = mgr->clients;
     522:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     524:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     528:	e9c4 8800 	strd	r8, r8, [r4]
     52c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     530:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     532:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     534:	8b21      	ldrh	r1, [r4, #24]
     536:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     53a:	45ca      	cmp	sl, r9
     53c:	d002      	beq.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
		if (do_monitors
     53e:	68a3      	ldr	r3, [r4, #8]
     540:	2b00      	cmp	r3, #0
     542:	d15c      	bne.n	5fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x116>
		    || !sys_slist_is_empty(&clients)
     544:	b90d      	cbnz	r5, 54a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x62>
		    || (transit != NULL)) {
     546:	2e00      	cmp	r6, #0
     548:	d074      	beq.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     54a:	2300      	movs	r3, #0
     54c:	e058      	b.n	600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     54e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     552:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     554:	2a01      	cmp	r2, #1
     556:	d820      	bhi.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
		*clients = mgr->clients;
     558:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     55c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     55e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     560:	b289      	uxth	r1, r1
	list->tail = NULL;
     562:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     566:	d10c      	bne.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     568:	2d00      	cmp	r5, #0
     56a:	462b      	mov	r3, r5
     56c:	bf38      	it	cc
     56e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     570:	b12b      	cbz	r3, 57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
				mgr->refs += 1U;
     572:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     574:	681b      	ldr	r3, [r3, #0]
     576:	3201      	adds	r2, #1
     578:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     57a:	2b00      	cmp	r3, #0
     57c:	d1f8      	bne.n	570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     57e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     582:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     584:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     586:	f004 f94e 	bl	4826 <process_recheck>
     58a:	4606      	mov	r6, r0
     58c:	2800      	cmp	r0, #0
     58e:	d0d1      	beq.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     590:	8b23      	ldrh	r3, [r4, #24]
     592:	f043 0320 	orr.w	r3, r3, #32
     596:	8323      	strh	r3, [r4, #24]
     598:	e7cb      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
	} else if (state == ONOFF_STATE_TO_OFF) {
     59a:	2b04      	cmp	r3, #4
     59c:	d10c      	bne.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     59e:	f021 0107 	bic.w	r1, r1, #7
     5a2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     5a4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     5a6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     5a8:	f004 f93d 	bl	4826 <process_recheck>
     5ac:	4605      	mov	r5, r0
     5ae:	2800      	cmp	r0, #0
     5b0:	d0bf      	beq.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5b2:	f041 0120 	orr.w	r1, r1, #32
     5b6:	8321      	strh	r1, [r4, #24]
     5b8:	2500      	movs	r5, #0
     5ba:	e7ba      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
		} else if (evt == EVT_START) {
     5bc:	2803      	cmp	r0, #3
     5be:	d109      	bne.n	5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>
			transit = mgr->transitions->start;
     5c0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5c2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     5c6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5c8:	f043 0306 	orr.w	r3, r3, #6
}
     5cc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     5ce:	8323      	strh	r3, [r4, #24]
		res = 0;
     5d0:	462f      	mov	r7, r5
     5d2:	e7af      	b.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
		} else if (evt == EVT_STOP) {
     5d4:	2804      	cmp	r0, #4
     5d6:	d106      	bne.n	5e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfe>
			transit = mgr->transitions->stop;
     5d8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5da:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     5de:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e0:	f043 0304 	orr.w	r3, r3, #4
     5e4:	e7f2      	b.n	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
		} else if (evt == EVT_RESET) {
     5e6:	2805      	cmp	r0, #5
     5e8:	d106      	bne.n	5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>
			transit = mgr->transitions->reset;
     5ea:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ec:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     5f0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5f2:	f043 0305 	orr.w	r3, r3, #5
     5f6:	e7e9      	b.n	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
     5f8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     5fa:	462e      	mov	r6, r5
     5fc:	e7e8      	b.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
				   && !sys_slist_is_empty(&mgr->monitors);
     5fe:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     600:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     604:	8321      	strh	r1, [r4, #24]
     606:	f38b 8811 	msr	BASEPRI, fp
     60a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     60e:	bb03      	cbnz	r3, 652 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16a>
	while (!sys_slist_is_empty(list)) {
     610:	2d00      	cmp	r5, #0
     612:	d133      	bne.n	67c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x194>
			if (transit != NULL) {
     614:	b116      	cbz	r6, 61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>
				transit(mgr, transition_complete);
     616:	4620      	mov	r0, r4
     618:	4920      	ldr	r1, [pc, #128]	; (69c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b4>)
     61a:	47b0      	blx	r6
	__asm__ volatile(
     61c:	f04f 0320 	mov.w	r3, #32
     620:	f3ef 8b11 	mrs	fp, BASEPRI
     624:	f383 8812 	msr	BASEPRI_MAX, r3
     628:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     62c:	8b23      	ldrh	r3, [r4, #24]
     62e:	f023 0308 	bic.w	r3, r3, #8
     632:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     634:	8b23      	ldrh	r3, [r4, #24]
     636:	06da      	lsls	r2, r3, #27
     638:	d528      	bpl.n	68c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a4>
			evt = EVT_COMPLETE;
     63a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     63c:	f023 0310 	bic.w	r3, r3, #16
     640:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     642:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     646:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     64a:	2900      	cmp	r1, #0
     64c:	f47f af5b 	bne.w	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
out:
     650:	e751      	b.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     652:	68a1      	ldr	r1, [r4, #8]
     654:	2900      	cmp	r1, #0
     656:	d0db      	beq.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
	return node->next;
     658:	680b      	ldr	r3, [r1, #0]
     65a:	2b00      	cmp	r3, #0
     65c:	bf38      	it	cc
     65e:	2300      	movcc	r3, #0
     660:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
     662:	4652      	mov	r2, sl
     664:	463b      	mov	r3, r7
     666:	4620      	mov	r0, r4
     668:	f8d1 b004 	ldr.w	fp, [r1, #4]
     66c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     66e:	f1b9 0f00 	cmp.w	r9, #0
     672:	d0cd      	beq.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     674:	4649      	mov	r1, r9
     676:	f8d9 3000 	ldr.w	r3, [r9]
     67a:	e7ee      	b.n	65a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x172>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     67c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     67e:	463b      	mov	r3, r7
     680:	4652      	mov	r2, sl
     682:	4620      	mov	r0, r4
     684:	682d      	ldr	r5, [r5, #0]
     686:	f004 f8ea 	bl	485e <notify_one>
     68a:	e7c1      	b.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     68c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     690:	bf1e      	ittt	ne
     692:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     696:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     698:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     69a:	e7d2      	b.n	642 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15a>
     69c:	0000488b 	.word	0x0000488b

000006a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6a4:	468b      	mov	fp, r1
     6a6:	4692      	mov	sl, r2
     6a8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6aa:	2500      	movs	r5, #0
{
     6ac:	b091      	sub	sp, #68	; 0x44
     6ae:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6b0:	f89a 0000 	ldrb.w	r0, [sl]
     6b4:	b908      	cbnz	r0, 6ba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6b6:	4628      	mov	r0, r5
     6b8:	e35e      	b.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
		if (*fp != '%') {
     6ba:	2825      	cmp	r0, #37	; 0x25
     6bc:	f10a 0701 	add.w	r7, sl, #1
     6c0:	d007      	beq.n	6d2 <cbvprintf+0x32>
			OUTC('%');
     6c2:	4659      	mov	r1, fp
     6c4:	9b02      	ldr	r3, [sp, #8]
     6c6:	4798      	blx	r3
     6c8:	2800      	cmp	r0, #0
     6ca:	f2c0 8355 	blt.w	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     6ce:	3501      	adds	r5, #1
			break;
     6d0:	e210      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		} state = {
     6d2:	2218      	movs	r2, #24
     6d4:	2100      	movs	r1, #0
     6d6:	a80a      	add	r0, sp, #40	; 0x28
     6d8:	f004 fa1c 	bl	4b14 <memset>
	if (*sp == '%') {
     6dc:	f89a 3001 	ldrb.w	r3, [sl, #1]
     6e0:	2b25      	cmp	r3, #37	; 0x25
     6e2:	d078      	beq.n	7d6 <cbvprintf+0x136>
     6e4:	2200      	movs	r2, #0
     6e6:	4694      	mov	ip, r2
     6e8:	4616      	mov	r6, r2
     6ea:	4696      	mov	lr, r2
     6ec:	4610      	mov	r0, r2
     6ee:	4639      	mov	r1, r7
		switch (*sp) {
     6f0:	f817 3b01 	ldrb.w	r3, [r7], #1
     6f4:	2b2b      	cmp	r3, #43	; 0x2b
     6f6:	f000 809d 	beq.w	834 <CONFIG_ISR_STACK_SIZE+0x34>
     6fa:	f200 8094 	bhi.w	826 <CONFIG_ISR_STACK_SIZE+0x26>
     6fe:	2b20      	cmp	r3, #32
     700:	f000 809b 	beq.w	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     704:	2b23      	cmp	r3, #35	; 0x23
     706:	f000 809a 	beq.w	83e <CONFIG_ISR_STACK_SIZE+0x3e>
     70a:	b128      	cbz	r0, 718 <cbvprintf+0x78>
     70c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     710:	f040 0004 	orr.w	r0, r0, #4
     714:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     718:	f1be 0f00 	cmp.w	lr, #0
     71c:	d005      	beq.n	72a <cbvprintf+0x8a>
     71e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     722:	f040 0008 	orr.w	r0, r0, #8
     726:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     72a:	b12e      	cbz	r6, 738 <cbvprintf+0x98>
     72c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     730:	f040 0010 	orr.w	r0, r0, #16
     734:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     738:	f1bc 0f00 	cmp.w	ip, #0
     73c:	d005      	beq.n	74a <cbvprintf+0xaa>
     73e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     742:	f040 0020 	orr.w	r0, r0, #32
     746:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     74a:	b12a      	cbz	r2, 758 <cbvprintf+0xb8>
     74c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     754:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     758:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     75c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     760:	2844      	cmp	r0, #68	; 0x44
     762:	d103      	bne.n	76c <cbvprintf+0xcc>
		conv->flag_zero = false;
     764:	f36f 1286 	bfc	r2, #6, #1
     768:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     76c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     770:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     776:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     77a:	d17b      	bne.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
		conv->width_star = true;
     77c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     780:	1c4b      	adds	r3, r1, #1
     782:	f042 0201 	orr.w	r2, r2, #1
     786:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     78a:	781a      	ldrb	r2, [r3, #0]
     78c:	2a2e      	cmp	r2, #46	; 0x2e
     78e:	bf0c      	ite	eq
     790:	2101      	moveq	r1, #1
     792:	2100      	movne	r1, #0
     794:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     798:	f361 0241 	bfi	r2, r1, #1, #1
     79c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     7a0:	d174      	bne.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
	if (*sp == '*') {
     7a2:	785a      	ldrb	r2, [r3, #1]
     7a4:	2a2a      	cmp	r2, #42	; 0x2a
     7a6:	d06a      	beq.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
	size_t val = 0;
     7a8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     7aa:	260a      	movs	r6, #10
     7ac:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7ae:	4618      	mov	r0, r3
     7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
     7b4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7b8:	2f09      	cmp	r7, #9
     7ba:	f240 808e 	bls.w	8da <CONFIG_ISR_STACK_SIZE+0xda>
	conv->unsupported |= ((conv->prec_value < 0)
     7be:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     7c2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     7c4:	f3c2 0040 	ubfx	r0, r2, #1, #1
     7c8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     7cc:	f361 0241 	bfi	r2, r1, #1, #1
     7d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     7d4:	e05a      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		conv->specifier = *sp++;
     7d6:	f10a 0702 	add.w	r7, sl, #2
     7da:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     7de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7e2:	07d9      	lsls	r1, r3, #31
     7e4:	f140 8149 	bpl.w	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			width = va_arg(ap, int);
     7e8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     7ec:	f1b9 0f00 	cmp.w	r9, #0
     7f0:	da07      	bge.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
				conv->flag_dash = true;
     7f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     7f6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     7fa:	f042 0204 	orr.w	r2, r2, #4
     7fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     802:	075a      	lsls	r2, r3, #29
     804:	f140 8142 	bpl.w	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
			int arg = va_arg(ap, int);
     808:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     80c:	f1b8 0f00 	cmp.w	r8, #0
     810:	f280 8141 	bge.w	a96 <CONFIG_ISR_STACK_SIZE+0x296>
				conv->prec_present = false;
     814:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     818:	f36f 0341 	bfc	r3, #1, #1
     81c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     820:	f04f 38ff 	mov.w	r8, #4294967295
     824:	e137      	b.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
		switch (*sp) {
     826:	2b2d      	cmp	r3, #45	; 0x2d
     828:	d00c      	beq.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
     82a:	2b30      	cmp	r3, #48	; 0x30
     82c:	f47f af6d 	bne.w	70a <cbvprintf+0x6a>
			conv->flag_zero = true;
     830:	2201      	movs	r2, #1
	} while (loop);
     832:	e75c      	b.n	6ee <cbvprintf+0x4e>
			conv->flag_plus = true;
     834:	f04f 0e01 	mov.w	lr, #1
     838:	e759      	b.n	6ee <cbvprintf+0x4e>
			conv->flag_space = true;
     83a:	2601      	movs	r6, #1
     83c:	e757      	b.n	6ee <cbvprintf+0x4e>
			conv->flag_hash = true;
     83e:	f04f 0c01 	mov.w	ip, #1
     842:	e754      	b.n	6ee <cbvprintf+0x4e>
		switch (*sp) {
     844:	2001      	movs	r0, #1
     846:	e752      	b.n	6ee <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     848:	4633      	mov	r3, r6
     84a:	fb0c 0202 	mla	r2, ip, r2, r0
     84e:	3a30      	subs	r2, #48	; 0x30
     850:	461e      	mov	r6, r3
     852:	f816 0b01 	ldrb.w	r0, [r6], #1
     856:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     85a:	2f09      	cmp	r7, #9
     85c:	d9f4      	bls.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
	if (sp != wp) {
     85e:	4299      	cmp	r1, r3
     860:	d093      	beq.n	78a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     862:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     866:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     868:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     86a:	f362 0141 	bfi	r1, r2, #1, #1
     86e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     872:	e78a      	b.n	78a <cbvprintf+0xea>
     874:	460b      	mov	r3, r1
	size_t val = 0;
     876:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     878:	f04f 0c0a 	mov.w	ip, #10
     87c:	e7e8      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		conv->prec_star = true;
     87e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     882:	3302      	adds	r3, #2
		conv->prec_star = true;
     884:	f042 0204 	orr.w	r2, r2, #4
     888:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     88c:	461f      	mov	r7, r3
     88e:	f817 2b01 	ldrb.w	r2, [r7], #1
     892:	2a6c      	cmp	r2, #108	; 0x6c
     894:	d041      	beq.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
     896:	d825      	bhi.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     898:	2a68      	cmp	r2, #104	; 0x68
     89a:	d02b      	beq.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     89c:	2a6a      	cmp	r2, #106	; 0x6a
     89e:	d046      	beq.n	92e <CONFIG_ISR_STACK_SIZE+0x12e>
     8a0:	2a4c      	cmp	r2, #76	; 0x4c
     8a2:	d04c      	beq.n	93e <CONFIG_ISR_STACK_SIZE+0x13e>
     8a4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     8a6:	f817 2b01 	ldrb.w	r2, [r7], #1
     8aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     8ae:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     8b0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     8b4:	f200 80d9 	bhi.w	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
     8b8:	2a57      	cmp	r2, #87	; 0x57
     8ba:	d84d      	bhi.n	958 <CONFIG_ISR_STACK_SIZE+0x158>
     8bc:	2a41      	cmp	r2, #65	; 0x41
     8be:	d003      	beq.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
     8c0:	3a45      	subs	r2, #69	; 0x45
     8c2:	2a02      	cmp	r2, #2
     8c4:	f200 80d1 	bhi.w	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
		conv->specifier_cat = SPECIFIER_FP;
     8c8:	2204      	movs	r2, #4
     8ca:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     8ce:	f362 0302 	bfi	r3, r2, #0, #3
     8d2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     8d6:	2301      	movs	r3, #1
			break;
     8d8:	e09e      	b.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
		val = 10U * val + *sp++ - '0';
     8da:	fb06 2101 	mla	r1, r6, r1, r2
     8de:	4603      	mov	r3, r0
     8e0:	3930      	subs	r1, #48	; 0x30
     8e2:	e764      	b.n	7ae <cbvprintf+0x10e>
	switch (*sp) {
     8e4:	2a74      	cmp	r2, #116	; 0x74
     8e6:	d026      	beq.n	936 <CONFIG_ISR_STACK_SIZE+0x136>
     8e8:	2a7a      	cmp	r2, #122	; 0x7a
     8ea:	d1db      	bne.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
		conv->length_mod = LENGTH_Z;
     8ec:	2206      	movs	r2, #6
     8ee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8f2:	e00d      	b.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
		if (*++sp == 'h') {
     8f4:	785a      	ldrb	r2, [r3, #1]
     8f6:	2a68      	cmp	r2, #104	; 0x68
     8f8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8fc:	d106      	bne.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
			conv->length_mod = LENGTH_HH;
     8fe:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     900:	f361 02c6 	bfi	r2, r1, #3, #4
     904:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     908:	1c9f      	adds	r7, r3, #2
     90a:	e7cc      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
			conv->length_mod = LENGTH_H;
     90c:	4613      	mov	r3, r2
     90e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     910:	f362 03c6 	bfi	r3, r2, #3, #4
     914:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     918:	e7c5      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
		if (*++sp == 'l') {
     91a:	785a      	ldrb	r2, [r3, #1]
     91c:	2a6c      	cmp	r2, #108	; 0x6c
     91e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     922:	d101      	bne.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
			conv->length_mod = LENGTH_LL;
     924:	2104      	movs	r1, #4
     926:	e7eb      	b.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
			conv->length_mod = LENGTH_L;
     928:	4613      	mov	r3, r2
     92a:	2203      	movs	r2, #3
     92c:	e7f0      	b.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
		conv->length_mod = LENGTH_J;
     92e:	2205      	movs	r2, #5
     930:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     934:	e7ec      	b.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
		conv->length_mod = LENGTH_T;
     936:	2207      	movs	r2, #7
     938:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     93c:	e7e8      	b.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
		conv->unsupported = true;
     93e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     942:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     946:	f023 0302 	bic.w	r3, r3, #2
     94a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     94e:	f043 0302 	orr.w	r3, r3, #2
     952:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     956:	e7a6      	b.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     958:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     95c:	2920      	cmp	r1, #32
     95e:	f200 8084 	bhi.w	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
     962:	a001      	add	r0, pc, #4	; (adr r0, 968 <CONFIG_ISR_STACK_SIZE+0x168>)
     964:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     968:	00000a2d 	.word	0x00000a2d
     96c:	00000a6b 	.word	0x00000a6b
     970:	00000a6b 	.word	0x00000a6b
     974:	00000a6b 	.word	0x00000a6b
     978:	00000a6b 	.word	0x00000a6b
     97c:	00000a6b 	.word	0x00000a6b
     980:	00000a6b 	.word	0x00000a6b
     984:	00000a6b 	.word	0x00000a6b
     988:	00000a6b 	.word	0x00000a6b
     98c:	000008c9 	.word	0x000008c9
     990:	00000a6b 	.word	0x00000a6b
     994:	00000a2d 	.word	0x00000a2d
     998:	000009ed 	.word	0x000009ed
     99c:	000008c9 	.word	0x000008c9
     9a0:	000008c9 	.word	0x000008c9
     9a4:	000008c9 	.word	0x000008c9
     9a8:	00000a6b 	.word	0x00000a6b
     9ac:	000009ed 	.word	0x000009ed
     9b0:	00000a6b 	.word	0x00000a6b
     9b4:	00000a6b 	.word	0x00000a6b
     9b8:	00000a6b 	.word	0x00000a6b
     9bc:	00000a6b 	.word	0x00000a6b
     9c0:	00000a35 	.word	0x00000a35
     9c4:	00000a2d 	.word	0x00000a2d
     9c8:	00000a51 	.word	0x00000a51
     9cc:	00000a6b 	.word	0x00000a6b
     9d0:	00000a6b 	.word	0x00000a6b
     9d4:	00000a51 	.word	0x00000a51
     9d8:	00000a6b 	.word	0x00000a6b
     9dc:	00000a2d 	.word	0x00000a2d
     9e0:	00000a6b 	.word	0x00000a6b
     9e4:	00000a6b 	.word	0x00000a6b
     9e8:	00000a2d 	.word	0x00000a2d
		conv->specifier_cat = SPECIFIER_SINT;
     9ec:	2001      	movs	r0, #1
     9ee:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9f6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9fa:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9fc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     a00:	bf02      	ittt	eq
     a02:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     a06:	f041 0101 	orreq.w	r1, r1, #1
     a0a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     a0e:	2a63      	cmp	r2, #99	; 0x63
     a10:	d131      	bne.n	a76 <CONFIG_ISR_STACK_SIZE+0x276>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a12:	3b00      	subs	r3, #0
     a14:	bf18      	it	ne
     a16:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     a18:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a1c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a20:	430b      	orrs	r3, r1
     a22:	f363 0241 	bfi	r2, r3, #1, #1
     a26:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     a2a:	e6d8      	b.n	7de <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     a2c:	2002      	movs	r0, #2
     a2e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     a32:	e7de      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
		conv->specifier_cat = SPECIFIER_PTR;
     a34:	2103      	movs	r1, #3
     a36:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a3a:	f003 0378 	and.w	r3, r3, #120	; 0x78
     a3e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     a42:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a46:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     a48:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a4c:	4143      	adcs	r3, r0
     a4e:	e7e3      	b.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
		conv->specifier_cat = SPECIFIER_PTR;
     a50:	2103      	movs	r1, #3
     a52:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a56:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a5a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     a5e:	bf14      	ite	ne
     a60:	2301      	movne	r3, #1
     a62:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     a64:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a68:	e7d6      	b.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
		conv->invalid = true;
     a6a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a6e:	f043 0301 	orr.w	r3, r3, #1
     a72:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     a76:	2300      	movs	r3, #0
     a78:	e7ce      	b.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
		} else if (conv->width_present) {
     a7a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     a7e:	2a00      	cmp	r2, #0
		int width = -1;
     a80:	bfac      	ite	ge
     a82:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     a86:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     a8a:	e6ba      	b.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
		} else if (conv->prec_present) {
     a8c:	079b      	lsls	r3, r3, #30
     a8e:	f57f aec7 	bpl.w	820 <CONFIG_ISR_STACK_SIZE+0x20>
			precision = conv->prec_value;
     a92:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     a96:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a98:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a9c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     aa0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     aa4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     aa8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     aaa:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     aae:	d136      	bne.n	b1e <CONFIG_ISR_STACK_SIZE+0x31e>
			switch (length_mod) {
     ab0:	1ed3      	subs	r3, r2, #3
     ab2:	2b04      	cmp	r3, #4
     ab4:	d820      	bhi.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
     ab6:	e8df f003 	tbb	[pc, r3]
     aba:	0703      	.short	0x0703
     abc:	1f07      	.short	0x1f07
     abe:	1f          	.byte	0x1f
     abf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     ac0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     ac4:	17c1      	asrs	r1, r0, #31
     ac6:	e004      	b.n	ad2 <CONFIG_ISR_STACK_SIZE+0x2d2>
					(sint_value_type)va_arg(ap, intmax_t);
     ac8:	3407      	adds	r4, #7
     aca:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ace:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     ad2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ad6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ada:	f013 0603 	ands.w	r6, r3, #3
     ade:	d054      	beq.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
			OUTS(sp, fp);
     ae0:	463b      	mov	r3, r7
     ae2:	4652      	mov	r2, sl
     ae4:	4659      	mov	r1, fp
     ae6:	9802      	ldr	r0, [sp, #8]
     ae8:	f003 ff9d 	bl	4a26 <outs>
     aec:	2800      	cmp	r0, #0
     aee:	f2c0 8143 	blt.w	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     af2:	4405      	add	r5, r0
			continue;
     af4:	46ba      	mov	sl, r7
     af6:	e5db      	b.n	6b0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     af8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     afc:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     afe:	ea4f 71e0 	mov.w	r1, r0, asr #31
     b02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     b06:	d105      	bne.n	b14 <CONFIG_ISR_STACK_SIZE+0x314>
				value->uint = (unsigned char)value->uint;
     b08:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     b0c:	930a      	str	r3, [sp, #40]	; 0x28
     b0e:	2300      	movs	r3, #0
     b10:	930b      	str	r3, [sp, #44]	; 0x2c
     b12:	e7e0      	b.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
			} else if (length_mod == LENGTH_H) {
     b14:	2a02      	cmp	r2, #2
     b16:	d1de      	bne.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
				value->sint = (short)value->sint;
     b18:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     b1c:	e7d2      	b.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b1e:	2b02      	cmp	r3, #2
     b20:	d123      	bne.n	b6a <CONFIG_ISR_STACK_SIZE+0x36a>
			switch (length_mod) {
     b22:	1ed3      	subs	r3, r2, #3
     b24:	2b04      	cmp	r3, #4
     b26:	d813      	bhi.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
     b28:	e8df f003 	tbb	[pc, r3]
     b2c:	120a0a03 	.word	0x120a0a03
     b30:	12          	.byte	0x12
     b31:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     b32:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     b34:	6820      	ldr	r0, [r4, #0]
     b36:	1d23      	adds	r3, r4, #4
     b38:	900a      	str	r0, [sp, #40]	; 0x28
     b3a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     b3c:	461c      	mov	r4, r3
     b3e:	e7ca      	b.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
					(uint_value_type)va_arg(ap,
     b40:	3407      	adds	r4, #7
     b42:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     b46:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     b4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     b4e:	e7f5      	b.n	b3c <CONFIG_ISR_STACK_SIZE+0x33c>
					(uint_value_type)va_arg(ap, size_t);
     b50:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b54:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     b56:	930a      	str	r3, [sp, #40]	; 0x28
     b58:	f04f 0300 	mov.w	r3, #0
     b5c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     b5e:	d0d3      	beq.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
			} else if (length_mod == LENGTH_H) {
     b60:	2a02      	cmp	r2, #2
     b62:	d1b8      	bne.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
				value->uint = (unsigned short)value->uint;
     b64:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     b68:	e7d0      	b.n	b0c <CONFIG_ISR_STACK_SIZE+0x30c>
		} else if (specifier_cat == SPECIFIER_FP) {
     b6a:	2b04      	cmp	r3, #4
     b6c:	d107      	bne.n	b7e <CONFIG_ISR_STACK_SIZE+0x37e>
			if (length_mod == LENGTH_UPPER_L) {
     b6e:	3407      	adds	r4, #7
     b70:	f024 0407 	bic.w	r4, r4, #7
     b74:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     b78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     b7c:	e7ab      	b.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b7e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     b80:	bf04      	itt	eq
     b82:	f854 3b04 	ldreq.w	r3, [r4], #4
     b86:	930a      	streq	r3, [sp, #40]	; 0x28
     b88:	e7a5      	b.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
		switch (conv->specifier) {
     b8a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b8e:	2878      	cmp	r0, #120	; 0x78
     b90:	d8b0      	bhi.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
     b92:	2862      	cmp	r0, #98	; 0x62
     b94:	d822      	bhi.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
     b96:	2825      	cmp	r0, #37	; 0x25
     b98:	f43f ad93 	beq.w	6c2 <cbvprintf+0x22>
     b9c:	2858      	cmp	r0, #88	; 0x58
     b9e:	d1a9      	bne.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
			bps = encode_uint(value->uint, conv, buf, bpe);
     ba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     ba4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     ba8:	9300      	str	r3, [sp, #0]
     baa:	aa0c      	add	r2, sp, #48	; 0x30
     bac:	ab04      	add	r3, sp, #16
     bae:	f003 feef 	bl	4990 <encode_uint>
     bb2:	4682      	mov	sl, r0
			if (precision >= 0) {
     bb4:	f1b8 0f00 	cmp.w	r8, #0
     bb8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     bbc:	db0c      	blt.n	bd8 <CONFIG_ISR_STACK_SIZE+0x3d8>
				conv->flag_zero = false;
     bbe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     bc2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     bc6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     bca:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     bcc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     bd0:	d902      	bls.n	bd8 <CONFIG_ISR_STACK_SIZE+0x3d8>
					conv->pad0_value = precision - (int)len;
     bd2:	eba8 0303 	sub.w	r3, r8, r3
     bd6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     bd8:	4680      	mov	r8, r0
     bda:	e03d      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
     bdc:	3863      	subs	r0, #99	; 0x63
     bde:	2815      	cmp	r0, #21
     be0:	d888      	bhi.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
     be2:	a101      	add	r1, pc, #4	; (adr r1, be8 <CONFIG_ISR_STACK_SIZE+0x3e8>)
     be4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     be8:	00000c69 	.word	0x00000c69
     bec:	00000ccd 	.word	0x00000ccd
     bf0:	00000af5 	.word	0x00000af5
     bf4:	00000af5 	.word	0x00000af5
     bf8:	00000af5 	.word	0x00000af5
     bfc:	00000af5 	.word	0x00000af5
     c00:	00000ccd 	.word	0x00000ccd
     c04:	00000af5 	.word	0x00000af5
     c08:	00000af5 	.word	0x00000af5
     c0c:	00000af5 	.word	0x00000af5
     c10:	00000af5 	.word	0x00000af5
     c14:	00000d2b 	.word	0x00000d2b
     c18:	00000cf9 	.word	0x00000cf9
     c1c:	00000cfd 	.word	0x00000cfd
     c20:	00000af5 	.word	0x00000af5
     c24:	00000af5 	.word	0x00000af5
     c28:	00000c41 	.word	0x00000c41
     c2c:	00000af5 	.word	0x00000af5
     c30:	00000cf9 	.word	0x00000cf9
     c34:	00000af5 	.word	0x00000af5
     c38:	00000af5 	.word	0x00000af5
     c3c:	00000cf9 	.word	0x00000cf9
			if (precision >= 0) {
     c40:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     c44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     c48:	db0a      	blt.n	c60 <CONFIG_ISR_STACK_SIZE+0x460>
				len = strnlen(bps, precision);
     c4a:	4641      	mov	r1, r8
     c4c:	4650      	mov	r0, sl
     c4e:	f003 ff4d 	bl	4aec <strnlen>
		char sign = 0;
     c52:	2600      	movs	r6, #0
			bpe = bps + len;
     c54:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     c58:	f1ba 0f00 	cmp.w	sl, #0
     c5c:	d10c      	bne.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
     c5e:	e749      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
				len = strlen(bps);
     c60:	4650      	mov	r0, sl
     c62:	f003 ff3c 	bl	4ade <strlen>
     c66:	e7f4      	b.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
			break;
     c68:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
     c6c:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c70:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
     c74:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     c78:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     c7c:	b106      	cbz	r6, c80 <CONFIG_ISR_STACK_SIZE+0x480>
			nj_len += 1U;
     c7e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     c80:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     c84:	06d0      	lsls	r0, r2, #27
     c86:	d56b      	bpl.n	d60 <CONFIG_ISR_STACK_SIZE+0x560>
			nj_len += 2U;
     c88:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c8a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c8c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c8e:	bf48      	it	mi
     c90:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c92:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c94:	bf48      	it	mi
     c96:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c98:	f1b9 0f00 	cmp.w	r9, #0
     c9c:	dd79      	ble.n	d92 <CONFIG_ISR_STACK_SIZE+0x592>
			if (!conv->flag_dash) {
     c9e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     ca2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     ca6:	f3c2 0380 	ubfx	r3, r2, #2, #1
     caa:	9303      	str	r3, [sp, #12]
     cac:	0753      	lsls	r3, r2, #29
     cae:	d470      	bmi.n	d92 <CONFIG_ISR_STACK_SIZE+0x592>
				if (conv->flag_zero) {
     cb0:	0650      	lsls	r0, r2, #25
     cb2:	d564      	bpl.n	d7e <CONFIG_ISR_STACK_SIZE+0x57e>
					if (sign != 0) {
     cb4:	b146      	cbz	r6, cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
						OUTC(sign);
     cb6:	4659      	mov	r1, fp
     cb8:	4630      	mov	r0, r6
     cba:	9b02      	ldr	r3, [sp, #8]
     cbc:	4798      	blx	r3
     cbe:	2800      	cmp	r0, #0
     cc0:	db5a      	blt.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
						sign = 0;
     cc2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     cc4:	3501      	adds	r5, #1
						sign = 0;
     cc6:	461e      	mov	r6, r3
					pad = '0';
     cc8:	2330      	movs	r3, #48	; 0x30
     cca:	e059      	b.n	d80 <CONFIG_ISR_STACK_SIZE+0x580>
			if (conv->flag_plus) {
     ccc:	071e      	lsls	r6, r3, #28
     cce:	d411      	bmi.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
				sign = ' ';
     cd0:	f013 0610 	ands.w	r6, r3, #16
     cd4:	bf18      	it	ne
     cd6:	2620      	movne	r6, #32
			sint = value->sint;
     cd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     cdc:	2a00      	cmp	r2, #0
     cde:	f173 0100 	sbcs.w	r1, r3, #0
     ce2:	f6bf af5d 	bge.w	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
				value->uint = (uint_value_type)-sint;
     ce6:	4252      	negs	r2, r2
     ce8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     cec:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     cee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     cf2:	e755      	b.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
				sign = '+';
     cf4:	262b      	movs	r6, #43	; 0x2b
     cf6:	e7ef      	b.n	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
		switch (conv->specifier) {
     cf8:	2600      	movs	r6, #0
     cfa:	e751      	b.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
			if (value->ptr != NULL) {
     cfc:	980a      	ldr	r0, [sp, #40]	; 0x28
     cfe:	b348      	cbz	r0, d54 <CONFIG_ISR_STACK_SIZE+0x554>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d00:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     d04:	9300      	str	r3, [sp, #0]
     d06:	2100      	movs	r1, #0
     d08:	ab04      	add	r3, sp, #16
     d0a:	aa0c      	add	r2, sp, #48	; 0x30
     d0c:	f003 fe40 	bl	4990 <encode_uint>
				conv->altform_0c = true;
     d10:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d14:	4682      	mov	sl, r0
				conv->altform_0c = true;
     d16:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d1a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d1e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     d22:	2600      	movs	r6, #0
				conv->altform_0c = true;
     d24:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     d28:	e744      	b.n	bb4 <CONFIG_ISR_STACK_SIZE+0x3b4>
				store_count(conv, value->ptr, count);
     d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     d2c:	2a07      	cmp	r2, #7
     d2e:	f63f aee1 	bhi.w	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
     d32:	e8df f002 	tbb	[pc, r2]
     d36:	040d      	.short	0x040d
     d38:	08080d06 	.word	0x08080d06
     d3c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     d3e:	701d      	strb	r5, [r3, #0]
		break;
     d40:	e6d8      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		*(short *)dp = (short)count;
     d42:	801d      	strh	r5, [r3, #0]
		break;
     d44:	e6d6      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		*(intmax_t *)dp = (intmax_t)count;
     d46:	4628      	mov	r0, r5
     d48:	17e9      	asrs	r1, r5, #31
     d4a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     d4e:	e6d1      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d50:	601d      	str	r5, [r3, #0]
		break;
     d52:	e6cf      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
			bpe = bps + 5;
     d54:	f8df 80c4 	ldr.w	r8, [pc, #196]	; e1c <CONFIG_ISR_STACK_SIZE+0x61c>
     d58:	4606      	mov	r6, r0
			bps = "(nil)";
     d5a:	f1a8 0a05 	sub.w	sl, r8, #5
     d5e:	e78b      	b.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
		} else if (conv->altform_0) {
     d60:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     d62:	bf48      	it	mi
     d64:	3301      	addmi	r3, #1
     d66:	e790      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
					OUTC(pad);
     d68:	4618      	mov	r0, r3
     d6a:	9303      	str	r3, [sp, #12]
     d6c:	4659      	mov	r1, fp
     d6e:	9b02      	ldr	r3, [sp, #8]
     d70:	4798      	blx	r3
     d72:	2800      	cmp	r0, #0
     d74:	9b03      	ldr	r3, [sp, #12]
     d76:	da04      	bge.n	d82 <CONFIG_ISR_STACK_SIZE+0x582>
#undef OUTS
#undef OUTC
}
     d78:	b011      	add	sp, #68	; 0x44
     d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d7e:	2320      	movs	r3, #32
     d80:	444d      	add	r5, r9
     d82:	464a      	mov	r2, r9
				while (width-- > 0) {
     d84:	2a00      	cmp	r2, #0
     d86:	eba5 0109 	sub.w	r1, r5, r9
     d8a:	f109 39ff 	add.w	r9, r9, #4294967295
     d8e:	dceb      	bgt.n	d68 <CONFIG_ISR_STACK_SIZE+0x568>
     d90:	460d      	mov	r5, r1
		if (sign != 0) {
     d92:	b136      	cbz	r6, da2 <CONFIG_ISR_STACK_SIZE+0x5a2>
			OUTC(sign);
     d94:	4659      	mov	r1, fp
     d96:	4630      	mov	r0, r6
     d98:	9b02      	ldr	r3, [sp, #8]
     d9a:	4798      	blx	r3
     d9c:	2800      	cmp	r0, #0
     d9e:	dbeb      	blt.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     da0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     da2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     da6:	06d9      	lsls	r1, r3, #27
     da8:	d401      	bmi.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     daa:	071a      	lsls	r2, r3, #28
     dac:	d506      	bpl.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
				OUTC('0');
     dae:	4659      	mov	r1, fp
     db0:	2030      	movs	r0, #48	; 0x30
     db2:	9b02      	ldr	r3, [sp, #8]
     db4:	4798      	blx	r3
     db6:	2800      	cmp	r0, #0
     db8:	dbde      	blt.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     dba:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     dbc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     dc0:	06db      	lsls	r3, r3, #27
     dc2:	d507      	bpl.n	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
				OUTC(conv->specifier);
     dc4:	4659      	mov	r1, fp
     dc6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     dca:	9b02      	ldr	r3, [sp, #8]
     dcc:	4798      	blx	r3
     dce:	2800      	cmp	r0, #0
     dd0:	dbd2      	blt.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     dd2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     dd4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     dd6:	442e      	add	r6, r5
     dd8:	1b73      	subs	r3, r6, r5
     dda:	2b00      	cmp	r3, #0
     ddc:	dc16      	bgt.n	e0c <CONFIG_ISR_STACK_SIZE+0x60c>
			OUTS(bps, bpe);
     dde:	4643      	mov	r3, r8
     de0:	4652      	mov	r2, sl
     de2:	4659      	mov	r1, fp
     de4:	9802      	ldr	r0, [sp, #8]
     de6:	f003 fe1e 	bl	4a26 <outs>
     dea:	2800      	cmp	r0, #0
     dec:	dbc4      	blt.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     dee:	4405      	add	r5, r0
		while (width > 0) {
     df0:	44a9      	add	r9, r5
     df2:	eba9 0305 	sub.w	r3, r9, r5
     df6:	2b00      	cmp	r3, #0
     df8:	f77f ae7c 	ble.w	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
			OUTC(' ');
     dfc:	4659      	mov	r1, fp
     dfe:	2020      	movs	r0, #32
     e00:	9b02      	ldr	r3, [sp, #8]
     e02:	4798      	blx	r3
     e04:	2800      	cmp	r0, #0
     e06:	dbb7      	blt.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     e08:	3501      	adds	r5, #1
			--width;
     e0a:	e7f2      	b.n	df2 <CONFIG_ISR_STACK_SIZE+0x5f2>
				OUTC('0');
     e0c:	4659      	mov	r1, fp
     e0e:	2030      	movs	r0, #48	; 0x30
     e10:	9b02      	ldr	r3, [sp, #8]
     e12:	4798      	blx	r3
     e14:	2800      	cmp	r0, #0
     e16:	dbaf      	blt.n	d78 <CONFIG_ISR_STACK_SIZE+0x578>
     e18:	3501      	adds	r5, #1
     e1a:	e7dd      	b.n	dd8 <CONFIG_ISR_STACK_SIZE+0x5d8>
     e1c:	00005821 	.word	0x00005821

00000e20 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     e20:	b508      	push	{r3, lr}
     e22:	f04f 0220 	mov.w	r2, #32
     e26:	f3ef 8311 	mrs	r3, BASEPRI
     e2a:	f382 8812 	msr	BASEPRI_MAX, r2
     e2e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     e32:	f000 fcef 	bl	1814 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e36:	4803      	ldr	r0, [pc, #12]	; (e44 <sys_reboot+0x24>)
     e38:	f003 fce8 	bl	480c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e3c:	f000 fa98 	bl	1370 <arch_cpu_idle>
     e40:	e7fc      	b.n	e3c <sys_reboot+0x1c>
     e42:	bf00      	nop
     e44:	00005822 	.word	0x00005822

00000e48 <nrf_gpio_pin_mcu_select.constprop.0>:
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
     e48:	4b09      	ldr	r3, [pc, #36]	; (e70 <nrf_gpio_pin_mcu_select.constprop.0+0x28>)
     e4a:	490a      	ldr	r1, [pc, #40]	; (e74 <nrf_gpio_pin_mcu_select.constprop.0+0x2c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
     e4c:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
     e50:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
     e52:	2801      	cmp	r0, #1
     e54:	bf08      	it	eq
     e56:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     e58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     e60:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
     e64:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
     e68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
     e6c:	4770      	bx	lr
     e6e:	bf00      	nop
     e70:	50842500 	.word	0x50842500
     e74:	50842800 	.word	0x50842800

00000e78 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
     e78:	b570      	push	{r4, r5, r6, lr}
     e7a:	f04f 0320 	mov.w	r3, #32
     e7e:	f3ef 8611 	mrs	r6, BASEPRI
     e82:	f383 8812 	msr	BASEPRI_MAX, r3
     e86:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     e8a:	2401      	movs	r4, #1
     e8c:	4b0c      	ldr	r3, [pc, #48]	; (ec0 <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     e8e:	4d0d      	ldr	r5, [pc, #52]	; (ec4 <nordicsemi_nrf53_init+0x4c>)
     e90:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
     e94:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
     e96:	2000      	movs	r0, #0
     e98:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
     e9c:	f7ff ffd4 	bl	e48 <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
     ea0:	4620      	mov	r0, r4
     ea2:	f7ff ffd1 	bl	e48 <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     ea6:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     eaa:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     eae:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
     eb2:	f386 8811 	msr	BASEPRI, r6
     eb6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     eba:	2000      	movs	r0, #0
     ebc:	bd70      	pop	{r4, r5, r6, pc}
     ebe:	bf00      	nop
     ec0:	50001000 	.word	0x50001000
     ec4:	50004000 	.word	0x50004000

00000ec8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     ec8:	b148      	cbz	r0, ede <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     eca:	4b05      	ldr	r3, [pc, #20]	; (ee0 <arch_busy_wait+0x18>)
     ecc:	681a      	ldr	r2, [r3, #0]
     ece:	4b05      	ldr	r3, [pc, #20]	; (ee4 <arch_busy_wait+0x1c>)
     ed0:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     ed4:	4b04      	ldr	r3, [pc, #16]	; (ee8 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
     ed6:	4350      	muls	r0, r2
     ed8:	f043 0301 	orr.w	r3, r3, #1
     edc:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     ede:	4770      	bx	lr
     ee0:	20000040 	.word	0x20000040
     ee4:	000f4240 	.word	0x000f4240
     ee8:	00005640 	.word	0x00005640

00000eec <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     eec:	2806      	cmp	r0, #6
     eee:	d107      	bne.n	f00 <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     ef0:	2201      	movs	r2, #1
     ef2:	4b04      	ldr	r3, [pc, #16]	; (f04 <pm_state_set+0x18>)
     ef4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     ef8:	f3bf 8f4f 	dsb	sy
        __WFE();
     efc:	bf20      	wfe
    while (true)
     efe:	e7fd      	b.n	efc <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
     f00:	4770      	bx	lr
     f02:	bf00      	nop
     f04:	50004000 	.word	0x50004000

00000f08 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f0c:	4605      	mov	r5, r0
	__asm__ volatile(
     f0e:	f04f 0320 	mov.w	r3, #32
     f12:	f3ef 8611 	mrs	r6, BASEPRI
     f16:	f383 8812 	msr	BASEPRI_MAX, r3
     f1a:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f1e:	4b10      	ldr	r3, [pc, #64]	; (f60 <pm_state_notify+0x58>)
     f20:	681c      	ldr	r4, [r3, #0]
     f22:	2c00      	cmp	r4, #0
     f24:	bf38      	it	cc
     f26:	2400      	movcc	r4, #0
     f28:	b19c      	cbz	r4, f52 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f2a:	f04f 090c 	mov.w	r9, #12
     f2e:	4f0d      	ldr	r7, [pc, #52]	; (f64 <pm_state_notify+0x5c>)
     f30:	f8df 8034 	ldr.w	r8, [pc, #52]	; f68 <pm_state_notify+0x60>
			callback = notifier->state_exit;
     f34:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     f38:	2d00      	cmp	r5, #0
     f3a:	bf08      	it	eq
     f3c:	4613      	moveq	r3, r2
		if (callback) {
     f3e:	b12b      	cbz	r3, f4c <pm_state_notify+0x44>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f40:	f898 2014 	ldrb.w	r2, [r8, #20]
     f44:	fb09 f202 	mul.w	r2, r9, r2
     f48:	5cb8      	ldrb	r0, [r7, r2]
     f4a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     f4c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f4e:	2c00      	cmp	r4, #0
     f50:	d1f0      	bne.n	f34 <pm_state_notify+0x2c>
	__asm__ volatile(
     f52:	f386 8811 	msr	BASEPRI, r6
     f56:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f5e:	bf00      	nop
     f60:	200002b8 	.word	0x200002b8
     f64:	200002c0 	.word	0x200002c0
     f68:	20000908 	.word	0x20000908

00000f6c <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f6c:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f6e:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
     f70:	f000 001f 	and.w	r0, r0, #31
     f74:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f78:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f7a:	4b05      	ldr	r3, [pc, #20]	; (f90 <atomic_clear_bit.constprop.0+0x24>)
     f7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f80:	e8d3 2fef 	ldaex	r2, [r3]
     f84:	4002      	ands	r2, r0
     f86:	e8c3 2fe1 	stlex	r1, r2, [r3]
     f8a:	2900      	cmp	r1, #0
     f8c:	d1f8      	bne.n	f80 <atomic_clear_bit.constprop.0+0x14>
}
     f8e:	4770      	bx	lr
     f90:	200002cc 	.word	0x200002cc

00000f94 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
     f94:	2201      	movs	r2, #1

void pm_system_resume(void)
{
     f96:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
     f98:	4b17      	ldr	r3, [pc, #92]	; (ff8 <pm_system_resume+0x64>)
     f9a:	7d1d      	ldrb	r5, [r3, #20]
     f9c:	f005 031f 	and.w	r3, r5, #31
     fa0:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fa2:	43d0      	mvns	r0, r2
     fa4:	4b15      	ldr	r3, [pc, #84]	; (ffc <pm_system_resume+0x68>)
     fa6:	0969      	lsrs	r1, r5, #5
     fa8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     fac:	e8d3 1fef 	ldaex	r1, [r3]
     fb0:	ea01 0400 	and.w	r4, r1, r0
     fb4:	e8c3 4fec 	stlex	ip, r4, [r3]
     fb8:	f1bc 0f00 	cmp.w	ip, #0
     fbc:	d1f6      	bne.n	fac <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     fbe:	4211      	tst	r1, r2
     fc0:	d013      	beq.n	fea <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
     fc2:	4b0f      	ldr	r3, [pc, #60]	; (1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>)
     fc4:	4c0f      	ldr	r4, [pc, #60]	; (1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>)
     fc6:	b18b      	cbz	r3, fec <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
     fc8:	230c      	movs	r3, #12
     fca:	436b      	muls	r3, r5
     fcc:	18e2      	adds	r2, r4, r3
     fce:	7851      	ldrb	r1, [r2, #1]
     fd0:	5ce0      	ldrb	r0, [r4, r3]
     fd2:	f003 fd3f 	bl	4a54 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     fd6:	2000      	movs	r0, #0
     fd8:	f7ff ff96 	bl	f08 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     fdc:	230c      	movs	r3, #12
     fde:	2200      	movs	r2, #0
     fe0:	436b      	muls	r3, r5
     fe2:	18e1      	adds	r1, r4, r3
     fe4:	50e2      	str	r2, [r4, r3]
     fe6:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
     fea:	bd38      	pop	{r3, r4, r5, pc}
     fec:	f383 8811 	msr	BASEPRI, r3
     ff0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     ff4:	e7ef      	b.n	fd6 <pm_system_resume+0x42>
     ff6:	bf00      	nop
     ff8:	20000908 	.word	0x20000908
     ffc:	200002d0 	.word	0x200002d0
    1000:	00004a55 	.word	0x00004a55
    1004:	200002c0 	.word	0x200002c0

00001008 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    100c:	4b2f      	ldr	r3, [pc, #188]	; (10cc <pm_system_suspend+0xc4>)
{
    100e:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
    1010:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1012:	ea4f 1854 	mov.w	r8, r4, lsr #5
    1016:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    101a:	4b2d      	ldr	r3, [pc, #180]	; (10d0 <pm_system_suspend+0xc8>)
    101c:	4443      	add	r3, r8
    101e:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1022:	f004 091f 	and.w	r9, r4, #31
    1026:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    102a:	f013 0f01 	tst.w	r3, #1
    102e:	4e29      	ldr	r6, [pc, #164]	; (10d4 <pm_system_suspend+0xcc>)
    1030:	d10a      	bne.n	1048 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1032:	4601      	mov	r1, r0
    1034:	4620      	mov	r0, r4
    1036:	f000 f863 	bl	1100 <pm_policy_next_state>
		if (info != NULL) {
    103a:	b128      	cbz	r0, 1048 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
    103c:	c807      	ldmia	r0, {r0, r1, r2}
    103e:	230c      	movs	r3, #12
    1040:	fb03 6304 	mla	r3, r3, r4, r6
    1044:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1048:	230c      	movs	r3, #12
    104a:	4363      	muls	r3, r4
    104c:	5cf5      	ldrb	r5, [r6, r3]
    104e:	18f2      	adds	r2, r6, r3
    1050:	b92d      	cbnz	r5, 105e <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1052:	4620      	mov	r0, r4
    1054:	f7ff ff8a 	bl	f6c <atomic_clear_bit.constprop.0>
		ret = false;
    1058:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    105e:	1c7b      	adds	r3, r7, #1
    1060:	d00f      	beq.n	1082 <pm_system_suspend+0x7a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1062:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1066:	2100      	movs	r1, #0
    1068:	f8d2 c008 	ldr.w	ip, [r2, #8]
    106c:	481a      	ldr	r0, [pc, #104]	; (10d8 <pm_system_suspend+0xd0>)
    106e:	2300      	movs	r3, #0
    1070:	fbe5 010c 	umlal	r0, r1, r5, ip
    1074:	4a19      	ldr	r2, [pc, #100]	; (10dc <pm_system_suspend+0xd4>)
    1076:	f7ff f86d 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    107a:	2101      	movs	r1, #1
    107c:	1a38      	subs	r0, r7, r0
    107e:	f004 f93b 	bl	52f8 <z_set_timeout_expiry>
	k_sched_lock();
    1082:	f002 fda7 	bl	3bd4 <k_sched_lock>
	pm_state_notify(true);
    1086:	2001      	movs	r0, #1
    1088:	f7ff ff3e 	bl	f08 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    108c:	2301      	movs	r3, #1
    108e:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1092:	4b13      	ldr	r3, [pc, #76]	; (10e0 <pm_system_suspend+0xd8>)
    1094:	4498      	add	r8, r3
    1096:	e8d8 3fef 	ldaex	r3, [r8]
    109a:	ea43 0309 	orr.w	r3, r3, r9
    109e:	e8c8 3fe2 	stlex	r2, r3, [r8]
    10a2:	2a00      	cmp	r2, #0
    10a4:	d1f7      	bne.n	1096 <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
    10a6:	4b0f      	ldr	r3, [pc, #60]	; (10e4 <pm_system_suspend+0xdc>)
    10a8:	b133      	cbz	r3, 10b8 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    10aa:	230c      	movs	r3, #12
    10ac:	4363      	muls	r3, r4
    10ae:	18f2      	adds	r2, r6, r3
    10b0:	7851      	ldrb	r1, [r2, #1]
    10b2:	5cf0      	ldrb	r0, [r6, r3]
    10b4:	f7ff ff1a 	bl	eec <pm_state_set>
	pm_system_resume();
    10b8:	f7ff ff6c 	bl	f94 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    10bc:	4620      	mov	r0, r4
    10be:	f7ff ff55 	bl	f6c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    10c2:	f002 ff63 	bl	3f8c <k_sched_unlock>
	bool ret = true;
    10c6:	2001      	movs	r0, #1
    10c8:	e7c7      	b.n	105a <pm_system_suspend+0x52>
    10ca:	bf00      	nop
    10cc:	20000908 	.word	0x20000908
    10d0:	200002cc 	.word	0x200002cc
    10d4:	200002c0 	.word	0x200002c0
    10d8:	000f423f 	.word	0x000f423f
    10dc:	000f4240 	.word	0x000f4240
    10e0:	200002d0 	.word	0x200002d0
    10e4:	00000eed 	.word	0x00000eed

000010e8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    10e8:	4b04      	ldr	r3, [pc, #16]	; (10fc <pm_policy_state_lock_is_active+0x14>)
    10ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10ee:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    10f2:	3800      	subs	r0, #0
    10f4:	bf18      	it	ne
    10f6:	2001      	movne	r0, #1
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop
    10fc:	200002d4 	.word	0x200002d4

00001100 <pm_policy_next_state>:
{
    1100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1104:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1106:	a901      	add	r1, sp, #4
    1108:	f000 f848 	bl	119c <pm_state_cpu_get_all>
    110c:	f04f 0900 	mov.w	r9, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1110:	1e44      	subs	r4, r0, #1
    1112:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1194 <pm_policy_next_state+0x94>
    1116:	b224      	sxth	r4, r4
    1118:	1c63      	adds	r3, r4, #1
    111a:	d104      	bne.n	1126 <pm_policy_next_state+0x26>
	return NULL;
    111c:	2500      	movs	r5, #0
}
    111e:	4628      	mov	r0, r5
    1120:	b003      	add	sp, #12
    1122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1126:	9a01      	ldr	r2, [sp, #4]
    1128:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
    112c:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
    1130:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1134:	f7ff ffd8 	bl	10e8 <pm_policy_state_lock_is_active>
    1138:	bb38      	cbnz	r0, 118a <pm_policy_next_state+0x8a>
    113a:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    113e:	f04f 0c00 	mov.w	ip, #0
    1142:	6869      	ldr	r1, [r5, #4]
    1144:	f8df b050 	ldr.w	fp, [pc, #80]	; 1198 <pm_policy_next_state+0x98>
    1148:	4642      	mov	r2, r8
    114a:	fbea bc01 	umlal	fp, ip, sl, r1
    114e:	464b      	mov	r3, r9
    1150:	4658      	mov	r0, fp
    1152:	4661      	mov	r1, ip
    1154:	f7fe fffe 	bl	154 <__aeabi_uldivmod>
    1158:	f04f 0c00 	mov.w	ip, #0
    115c:	68a9      	ldr	r1, [r5, #8]
    115e:	f8df b038 	ldr.w	fp, [pc, #56]	; 1198 <pm_policy_next_state+0x98>
    1162:	464b      	mov	r3, r9
    1164:	fbea bc01 	umlal	fp, ip, sl, r1
    1168:	4607      	mov	r7, r0
    116a:	4642      	mov	r2, r8
    116c:	4658      	mov	r0, fp
    116e:	4661      	mov	r1, ip
    1170:	f7fe fff0 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1174:	4b06      	ldr	r3, [pc, #24]	; (1190 <pm_policy_next_state+0x90>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	1c59      	adds	r1, r3, #1
    117a:	d001      	beq.n	1180 <pm_policy_next_state+0x80>
    117c:	4283      	cmp	r3, r0
    117e:	d904      	bls.n	118a <pm_policy_next_state+0x8a>
		if ((ticks == K_TICKS_FOREVER) ||
    1180:	1c72      	adds	r2, r6, #1
    1182:	d0cc      	beq.n	111e <pm_policy_next_state+0x1e>
		    (ticks >= (min_residency + exit_latency))) {
    1184:	4438      	add	r0, r7
		if ((ticks == K_TICKS_FOREVER) ||
    1186:	42b0      	cmp	r0, r6
    1188:	d9c9      	bls.n	111e <pm_policy_next_state+0x1e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    118a:	3c01      	subs	r4, #1
    118c:	b224      	sxth	r4, r4
    118e:	e7c3      	b.n	1118 <pm_policy_next_state+0x18>
    1190:	20000004 	.word	0x20000004
    1194:	000f4240 	.word	0x000f4240
    1198:	000f423f 	.word	0x000f423f

0000119c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    119c:	b908      	cbnz	r0, 11a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    119e:	4b02      	ldr	r3, [pc, #8]	; (11a8 <pm_state_cpu_get_all+0xc>)
    11a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    11a2:	2000      	movs	r0, #0
    11a4:	4770      	bx	lr
    11a6:	bf00      	nop
    11a8:	00005648 	.word	0x00005648

000011ac <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    11ac:	4801      	ldr	r0, [pc, #4]	; (11b4 <nrf_cc3xx_platform_abort_init+0x8>)
    11ae:	f003 b9e3 	b.w	4578 <nrf_cc3xx_platform_set_abort>
    11b2:	bf00      	nop
    11b4:	00005648 	.word	0x00005648

000011b8 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11b8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    11ba:	b308      	cbz	r0, 1200 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    11bc:	6843      	ldr	r3, [r0, #4]
    11be:	2b04      	cmp	r3, #4
    11c0:	d007      	beq.n	11d2 <mutex_unlock_platform+0x1a>
    11c2:	2b08      	cmp	r3, #8
    11c4:	d013      	beq.n	11ee <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11c6:	b1f3      	cbz	r3, 1206 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    11c8:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    11ca:	f002 fc1b 	bl	3a04 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    11ce:	2000      	movs	r0, #0
    11d0:	e00c      	b.n	11ec <mutex_unlock_platform+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    11d2:	2200      	movs	r2, #0
    11d4:	6803      	ldr	r3, [r0, #0]
    11d6:	e8d3 1fef 	ldaex	r1, [r3]
    11da:	2901      	cmp	r1, #1
    11dc:	d103      	bne.n	11e6 <mutex_unlock_platform+0x2e>
    11de:	e8c3 2fe0 	stlex	r0, r2, [r3]
    11e2:	2800      	cmp	r0, #0
    11e4:	d1f7      	bne.n	11d6 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11e6:	4809      	ldr	r0, [pc, #36]	; (120c <mutex_unlock_platform+0x54>)
    11e8:	bf08      	it	eq
    11ea:	4610      	moveq	r0, r2
    }
}
    11ec:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    11ee:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    11f0:	2000      	movs	r0, #0
    11f2:	781b      	ldrb	r3, [r3, #0]
    11f4:	4a06      	ldr	r2, [pc, #24]	; (1210 <mutex_unlock_platform+0x58>)
    11f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    11fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    11fe:	e7f5      	b.n	11ec <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1200:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1204:	e7f2      	b.n	11ec <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1206:	4803      	ldr	r0, [pc, #12]	; (1214 <mutex_unlock_platform+0x5c>)
    1208:	e7f0      	b.n	11ec <mutex_unlock_platform+0x34>
    120a:	bf00      	nop
    120c:	ffff8fe9 	.word	0xffff8fe9
    1210:	50030000 	.word	0x50030000
    1214:	ffff8fea 	.word	0xffff8fea

00001218 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1218:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    121a:	4604      	mov	r4, r0
    121c:	b918      	cbnz	r0, 1226 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    121e:	4b0d      	ldr	r3, [pc, #52]	; (1254 <mutex_free_platform+0x3c>)
    1220:	480d      	ldr	r0, [pc, #52]	; (1258 <mutex_free_platform+0x40>)
    1222:	685b      	ldr	r3, [r3, #4]
    1224:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1226:	6861      	ldr	r1, [r4, #4]
    1228:	2908      	cmp	r1, #8
    122a:	d00d      	beq.n	1248 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    122c:	f031 0304 	bics.w	r3, r1, #4
    1230:	d00a      	beq.n	1248 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1232:	f011 0102 	ands.w	r1, r1, #2
    1236:	d008      	beq.n	124a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1238:	4621      	mov	r1, r4
    123a:	4808      	ldr	r0, [pc, #32]	; (125c <mutex_free_platform+0x44>)
    123c:	f003 ff50 	bl	50e0 <k_mem_slab_free>
        mutex->mutex = NULL;
    1240:	2300      	movs	r3, #0
    1242:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1244:	2300      	movs	r3, #0
    1246:	6063      	str	r3, [r4, #4]
}
    1248:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    124a:	2214      	movs	r2, #20
    124c:	6820      	ldr	r0, [r4, #0]
    124e:	f003 fc61 	bl	4b14 <memset>
    1252:	e7f7      	b.n	1244 <mutex_free_platform+0x2c>
    1254:	200000cc 	.word	0x200000cc
    1258:	0000584b 	.word	0x0000584b
    125c:	200002f0 	.word	0x200002f0

00001260 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1260:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1262:	4604      	mov	r4, r0
    1264:	b918      	cbnz	r0, 126e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1266:	4b16      	ldr	r3, [pc, #88]	; (12c0 <mutex_init_platform+0x60>)
    1268:	4816      	ldr	r0, [pc, #88]	; (12c4 <mutex_init_platform+0x64>)
    126a:	685b      	ldr	r3, [r3, #4]
    126c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    126e:	6863      	ldr	r3, [r4, #4]
    1270:	2b04      	cmp	r3, #4
    1272:	d023      	beq.n	12bc <mutex_init_platform+0x5c>
    1274:	2b08      	cmp	r3, #8
    1276:	d021      	beq.n	12bc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1278:	b9cb      	cbnz	r3, 12ae <mutex_init_platform+0x4e>
    127a:	6823      	ldr	r3, [r4, #0]
    127c:	b9bb      	cbnz	r3, 12ae <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    127e:	f04f 32ff 	mov.w	r2, #4294967295
    1282:	f04f 33ff 	mov.w	r3, #4294967295
    1286:	4621      	mov	r1, r4
    1288:	480f      	ldr	r0, [pc, #60]	; (12c8 <mutex_init_platform+0x68>)
    128a:	f002 fa63 	bl	3754 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    128e:	b908      	cbnz	r0, 1294 <mutex_init_platform+0x34>
    1290:	6823      	ldr	r3, [r4, #0]
    1292:	b91b      	cbnz	r3, 129c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1294:	4b0a      	ldr	r3, [pc, #40]	; (12c0 <mutex_init_platform+0x60>)
    1296:	480d      	ldr	r0, [pc, #52]	; (12cc <mutex_init_platform+0x6c>)
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    129c:	2214      	movs	r2, #20
    129e:	2100      	movs	r1, #0
    12a0:	6820      	ldr	r0, [r4, #0]
    12a2:	f003 fc37 	bl	4b14 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    12a6:	6863      	ldr	r3, [r4, #4]
    12a8:	f043 0302 	orr.w	r3, r3, #2
    12ac:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    12ae:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    12b0:	f003 ff4c 	bl	514c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    12b4:	6863      	ldr	r3, [r4, #4]
    12b6:	f043 0301 	orr.w	r3, r3, #1
    12ba:	6063      	str	r3, [r4, #4]
}
    12bc:	bd10      	pop	{r4, pc}
    12be:	bf00      	nop
    12c0:	200000cc 	.word	0x200000cc
    12c4:	0000584b 	.word	0x0000584b
    12c8:	200002f0 	.word	0x200002f0
    12cc:	00005871 	.word	0x00005871

000012d0 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12d0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    12d2:	b340      	cbz	r0, 1326 <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    12d4:	6843      	ldr	r3, [r0, #4]
    12d6:	2b04      	cmp	r3, #4
    12d8:	d00b      	beq.n	12f2 <mutex_lock_platform+0x22>
    12da:	2b08      	cmp	r3, #8
    12dc:	d016      	beq.n	130c <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12de:	b303      	cbz	r3, 1322 <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    12e0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    12e2:	f04f 32ff 	mov.w	r2, #4294967295
    12e6:	f04f 33ff 	mov.w	r3, #4294967295
    12ea:	f002 fb0d 	bl	3908 <z_impl_k_mutex_lock>
        if (ret == 0) {
    12ee:	b158      	cbz	r0, 1308 <mutex_lock_platform+0x38>
    12f0:	e015      	b.n	131e <mutex_lock_platform+0x4e>
    12f2:	2201      	movs	r2, #1
    12f4:	6803      	ldr	r3, [r0, #0]
    12f6:	e8d3 1fef 	ldaex	r1, [r3]
    12fa:	2900      	cmp	r1, #0
    12fc:	d103      	bne.n	1306 <mutex_lock_platform+0x36>
    12fe:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1302:	2800      	cmp	r0, #0
    1304:	d1f7      	bne.n	12f6 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1306:	d10a      	bne.n	131e <mutex_lock_platform+0x4e>
    1308:	2000      	movs	r0, #0
}
    130a:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    130c:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    130e:	4a07      	ldr	r2, [pc, #28]	; (132c <mutex_lock_platform+0x5c>)
    1310:	781b      	ldrb	r3, [r3, #0]
    1312:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    131a:	2b00      	cmp	r3, #0
    131c:	d0f4      	beq.n	1308 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    131e:	4804      	ldr	r0, [pc, #16]	; (1330 <mutex_lock_platform+0x60>)
    1320:	e7f3      	b.n	130a <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1322:	4804      	ldr	r0, [pc, #16]	; (1334 <mutex_lock_platform+0x64>)
    1324:	e7f1      	b.n	130a <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1326:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    132a:	e7ee      	b.n	130a <mutex_lock_platform+0x3a>
    132c:	50030000 	.word	0x50030000
    1330:	ffff8fe9 	.word	0xffff8fe9
    1334:	ffff8fea 	.word	0xffff8fea

00001338 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1338:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    133a:	4906      	ldr	r1, [pc, #24]	; (1354 <nrf_cc3xx_platform_mutex_init+0x1c>)
    133c:	2340      	movs	r3, #64	; 0x40
    133e:	2214      	movs	r2, #20
    1340:	4805      	ldr	r0, [pc, #20]	; (1358 <nrf_cc3xx_platform_mutex_init+0x20>)
    1342:	f003 feb2 	bl	50aa <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    134a:	4904      	ldr	r1, [pc, #16]	; (135c <nrf_cc3xx_platform_mutex_init+0x24>)
    134c:	4804      	ldr	r0, [pc, #16]	; (1360 <nrf_cc3xx_platform_mutex_init+0x28>)
    134e:	f003 b975 	b.w	463c <nrf_cc3xx_platform_set_mutexes>
    1352:	bf00      	nop
    1354:	2000030c 	.word	0x2000030c
    1358:	200002f0 	.word	0x200002f0
    135c:	00005660 	.word	0x00005660
    1360:	00005650 	.word	0x00005650

00001364 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1364:	4901      	ldr	r1, [pc, #4]	; (136c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1366:	2210      	movs	r2, #16
	str	r2, [r1]
    1368:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    136a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    136c:	e000ed10 	.word	0xe000ed10

00001370 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1370:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1372:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1374:	f380 8811 	msr	BASEPRI, r0
	isb
    1378:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    137c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1380:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1382:	b662      	cpsie	i
	isb
    1384:	f3bf 8f6f 	isb	sy

	bx	lr
    1388:	4770      	bx	lr
    138a:	bf00      	nop

0000138c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    138c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    138e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1390:	f381 8811 	msr	BASEPRI, r1

	wfe
    1394:	bf20      	wfe

	msr	BASEPRI, r0
    1396:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    139a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    139c:	4770      	bx	lr
    139e:	bf00      	nop

000013a0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    13a0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    13a2:	2b00      	cmp	r3, #0
    13a4:	db08      	blt.n	13b8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13a6:	2201      	movs	r2, #1
    13a8:	f000 001f 	and.w	r0, r0, #31
    13ac:	fa02 f000 	lsl.w	r0, r2, r0
    13b0:	4a02      	ldr	r2, [pc, #8]	; (13bc <arch_irq_enable+0x1c>)
    13b2:	095b      	lsrs	r3, r3, #5
    13b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    13b8:	4770      	bx	lr
    13ba:	bf00      	nop
    13bc:	e000e100 	.word	0xe000e100

000013c0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    13c0:	4b05      	ldr	r3, [pc, #20]	; (13d8 <arch_irq_is_enabled+0x18>)
    13c2:	0942      	lsrs	r2, r0, #5
    13c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    13c8:	2301      	movs	r3, #1
    13ca:	f000 001f 	and.w	r0, r0, #31
    13ce:	fa03 f000 	lsl.w	r0, r3, r0
}
    13d2:	4010      	ands	r0, r2
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	e000e100 	.word	0xe000e100

000013dc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    13dc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    13de:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    13e0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13e4:	bfac      	ite	ge
    13e6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13ea:	4b06      	ldrlt	r3, [pc, #24]	; (1404 <z_arm_irq_priority_set+0x28>)
    13ec:	ea4f 1141 	mov.w	r1, r1, lsl #5
    13f0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13f2:	bfab      	itete	ge
    13f4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13f8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13fc:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1400:	5419      	strblt	r1, [r3, r0]
}
    1402:	4770      	bx	lr
    1404:	e000ed14 	.word	0xe000ed14

00001408 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1408:	bf30      	wfi
    b z_SysNmiOnReset
    140a:	f7ff bffd 	b.w	1408 <z_SysNmiOnReset>
    140e:	bf00      	nop

00001410 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1410:	4a0b      	ldr	r2, [pc, #44]	; (1440 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1412:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1414:	4b0b      	ldr	r3, [pc, #44]	; (1444 <z_arm_prep_c+0x34>)
    1416:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    141a:	609a      	str	r2, [r3, #8]
    141c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1420:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1424:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1428:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    142c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1430:	f002 f8c4 	bl	35bc <z_bss_zero>
	z_data_copy();
    1434:	f002 fed2 	bl	41dc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1438:	f000 f9b0 	bl	179c <z_arm_interrupt_init>
	z_cstart();
    143c:	f002 f8fe 	bl	363c <z_cstart>
    1440:	00000000 	.word	0x00000000
    1444:	e000ed00 	.word	0xe000ed00

00001448 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1448:	4a09      	ldr	r2, [pc, #36]	; (1470 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    144a:	490a      	ldr	r1, [pc, #40]	; (1474 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    144c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    144e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1450:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    1452:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1454:	4908      	ldr	r1, [pc, #32]	; (1478 <arch_swap+0x30>)
    1456:	684b      	ldr	r3, [r1, #4]
    1458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    145c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    145e:	2300      	movs	r3, #0
    1460:	f383 8811 	msr	BASEPRI, r3
    1464:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1468:	6893      	ldr	r3, [r2, #8]
}
    146a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    146c:	4770      	bx	lr
    146e:	bf00      	nop
    1470:	20000908 	.word	0x20000908
    1474:	0000578c 	.word	0x0000578c
    1478:	e000ed00 	.word	0xe000ed00

0000147c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    147c:	4913      	ldr	r1, [pc, #76]	; (14cc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    147e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1480:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1484:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1486:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    148a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    148e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1490:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1494:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1498:	4f0d      	ldr	r7, [pc, #52]	; (14d0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    149a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    149e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    14a0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    14a2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    14a4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    14a6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    14a8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    14aa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    14ae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    14b2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    14b6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    14ba:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    14be:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    14c0:	f003 fae3 	bl	4a8a <configure_builtin_stack_guard>
    pop {r2, lr}
    14c4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    14c8:	4770      	bx	lr
    14ca:	0000      	.short	0x0000
    ldr r1, =_kernel
    14cc:	20000908 	.word	0x20000908
    ldr v4, =_SCS_ICSR
    14d0:	e000ed04 	.word	0xe000ed04

000014d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    14d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    14d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    14da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    14de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    14e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    14e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    14e8:	2902      	cmp	r1, #2
    beq _oops
    14ea:	d0ff      	beq.n	14ec <_oops>

000014ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    14ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    14ee:	f003 fabd 	bl	4a6c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    14f2:	bd01      	pop	{r0, pc}

000014f4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    14f4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    14f8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    14fa:	490b      	ldr	r1, [pc, #44]	; (1528 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    14fc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1500:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    1502:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1506:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    150a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    150c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1510:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1518:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    151c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    151e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1520:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1522:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1524:	4770      	bx	lr
    1526:	bf00      	nop
    1528:	0000497d 	.word	0x0000497d

0000152c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    152c:	4b08      	ldr	r3, [pc, #32]	; (1550 <arch_switch_to_main_thread+0x24>)
    152e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1530:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1532:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1536:	4610      	mov	r0, r2
    1538:	f381 8809 	msr	PSP, r1
    153c:	2100      	movs	r1, #0
    153e:	b663      	cpsie	if
    1540:	f381 8811 	msr	BASEPRI, r1
    1544:	f3bf 8f6f 	isb	sy
    1548:	2200      	movs	r2, #0
    154a:	2300      	movs	r3, #0
    154c:	f003 fa16 	bl	497c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1550:	20000908 	.word	0x20000908

00001554 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1554:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1556:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1558:	4a0b      	ldr	r2, [pc, #44]	; (1588 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    155a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    155c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    155e:	bf1e      	ittt	ne
	movne	r1, #0
    1560:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1562:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1564:	f003 fdeb 	blne	513e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1568:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    156a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    156e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1572:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1576:	4905      	ldr	r1, [pc, #20]	; (158c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1578:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    157a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    157c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    157e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1582:	4903      	ldr	r1, [pc, #12]	; (1590 <_isr_wrapper+0x3c>)
	bx r1
    1584:	4708      	bx	r1
    1586:	0000      	.short	0x0000
	ldr r2, =_kernel
    1588:	20000908 	.word	0x20000908
	ldr r1, =_sw_isr_table
    158c:	000053fc 	.word	0x000053fc
	ldr r1, =z_arm_int_exit
    1590:	00001595 	.word	0x00001595

00001594 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1594:	4b04      	ldr	r3, [pc, #16]	; (15a8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1596:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1598:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    159a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    159c:	d003      	beq.n	15a6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    159e:	4903      	ldr	r1, [pc, #12]	; (15ac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    15a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    15a4:	600a      	str	r2, [r1, #0]

000015a6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    15a6:	4770      	bx	lr
	ldr r3, =_kernel
    15a8:	20000908 	.word	0x20000908
	ldr r1, =_SCS_ICSR
    15ac:	e000ed04 	.word	0xe000ed04

000015b0 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    15b0:	4b12      	ldr	r3, [pc, #72]	; (15fc <mem_manage_fault.isra.0+0x4c>)
    15b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    15b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    15b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15b8:	0792      	lsls	r2, r2, #30
    15ba:	d508      	bpl.n	15ce <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    15bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    15be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15c0:	0612      	lsls	r2, r2, #24
    15c2:	d504      	bpl.n	15ce <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    15c4:	b118      	cbz	r0, 15ce <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    15c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    15cc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    15ce:	4b0b      	ldr	r3, [pc, #44]	; (15fc <mem_manage_fault.isra.0+0x4c>)
    15d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    15d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    15d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15d6:	06d0      	lsls	r0, r2, #27

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    15d8:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    15dc:	bf58      	it	pl
    15de:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    15e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15e2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    15e4:	bf42      	ittt	mi
    15e6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    15e8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    15ec:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    15ee:	4a03      	ldr	r2, [pc, #12]	; (15fc <mem_manage_fault.isra.0+0x4c>)
    15f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15f2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    15f6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    15f8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    15fa:	4770      	bx	lr
    15fc:	e000ed00 	.word	0xe000ed00

00001600 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1600:	4b0d      	ldr	r3, [pc, #52]	; (1638 <bus_fault.isra.0+0x38>)
    1602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1608:	0592      	lsls	r2, r2, #22
    160a:	d508      	bpl.n	161e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    160c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    160e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1610:	0412      	lsls	r2, r2, #16
    1612:	d504      	bpl.n	161e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1614:	b118      	cbz	r0, 161e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    161c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    161e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <bus_fault.isra.0+0x38>)
    1622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1626:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1628:	bf58      	it	pl
    162a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    162e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1632:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1634:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1636:	4770      	bx	lr
    1638:	e000ed00 	.word	0xe000ed00

0000163c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    163c:	4b09      	ldr	r3, [pc, #36]	; (1664 <usage_fault.isra.0+0x28>)
    163e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1642:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    164a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    164c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    164e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1652:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1656:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    165a:	bf18      	it	ne
    165c:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    165e:	629a      	str	r2, [r3, #40]	; 0x28
}
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	e000ed00 	.word	0xe000ed00

00001668 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1668:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    166a:	4b3e      	ldr	r3, [pc, #248]	; (1764 <z_arm_fault+0xfc>)
{
    166c:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    166e:	685b      	ldr	r3, [r3, #4]
    1670:	2500      	movs	r5, #0
{
    1672:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1674:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1678:	f385 8811 	msr	BASEPRI, r5
    167c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1680:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1684:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1688:	d111      	bne.n	16ae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    168a:	f002 010c 	and.w	r1, r2, #12
    168e:	2908      	cmp	r1, #8
    1690:	d00d      	beq.n	16ae <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1692:	0712      	lsls	r2, r2, #28
    1694:	d401      	bmi.n	169a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1696:	4606      	mov	r6, r0
			*nested_exc = true;
    1698:	2501      	movs	r5, #1
	*recoverable = false;
    169a:	2200      	movs	r2, #0
    169c:	3b03      	subs	r3, #3
    169e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    16a2:	2b03      	cmp	r3, #3
    16a4:	d856      	bhi.n	1754 <z_arm_fault+0xec>
    16a6:	e8df f003 	tbb	[pc, r3]
    16aa:	4d04      	.short	0x4d04
    16ac:	4a51      	.short	0x4a51
		return NULL;
    16ae:	462e      	mov	r6, r5
    16b0:	e7f3      	b.n	169a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    16b2:	4b2c      	ldr	r3, [pc, #176]	; (1764 <z_arm_fault+0xfc>)
    16b4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    16b6:	f014 0402 	ands.w	r4, r4, #2
    16ba:	d14b      	bne.n	1754 <z_arm_fault+0xec>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    16bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16be:	2a00      	cmp	r2, #0
    16c0:	db17      	blt.n	16f2 <z_arm_fault+0x8a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    16c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16c4:	005b      	lsls	r3, r3, #1
    16c6:	d514      	bpl.n	16f2 <z_arm_fault+0x8a>
	uint16_t fault_insn = *(ret_addr - 1);
    16c8:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    16ca:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    16ce:	f64d 7302 	movw	r3, #57090	; 0xdf02
    16d2:	429a      	cmp	r2, r3
    16d4:	d00c      	beq.n	16f0 <z_arm_fault+0x88>
		} else if (SCB_MMFSR != 0) {
    16d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    16da:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    16de:	781b      	ldrb	r3, [r3, #0]
    16e0:	b1fb      	cbz	r3, 1722 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    16e2:	2001      	movs	r0, #1
    16e4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    16e8:	f7ff ff62 	bl	15b0 <mem_manage_fault.isra.0>
    16ec:	4604      	mov	r4, r0
		break;
    16ee:	e000      	b.n	16f2 <z_arm_fault+0x8a>
			reason = esf->basic.r0;
    16f0:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    16f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    16f6:	b993      	cbnz	r3, 171e <z_arm_fault+0xb6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    16f8:	2220      	movs	r2, #32
    16fa:	4631      	mov	r1, r6
    16fc:	a802      	add	r0, sp, #8
    16fe:	f003 f9fe 	bl	4afe <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1702:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1704:	b345      	cbz	r5, 1758 <z_arm_fault+0xf0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1706:	f3c3 0208 	ubfx	r2, r3, #0, #9
    170a:	b922      	cbnz	r2, 1716 <z_arm_fault+0xae>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    170c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1710:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1714:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1716:	4620      	mov	r0, r4
    1718:	a902      	add	r1, sp, #8
    171a:	f003 f9a5 	bl	4a68 <z_arm_fatal_error>
}
    171e:	b00a      	add	sp, #40	; 0x28
    1720:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1722:	4b11      	ldr	r3, [pc, #68]	; (1768 <z_arm_fault+0x100>)
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	b12b      	cbz	r3, 1734 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    1728:	2001      	movs	r0, #1
    172a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    172e:	f7ff ff67 	bl	1600 <bus_fault.isra.0>
    1732:	e7db      	b.n	16ec <z_arm_fault+0x84>
		} else if (SCB_UFSR != 0) {
    1734:	4b0d      	ldr	r3, [pc, #52]	; (176c <z_arm_fault+0x104>)
    1736:	881b      	ldrh	r3, [r3, #0]
    1738:	b29b      	uxth	r3, r3
    173a:	2b00      	cmp	r3, #0
    173c:	d0d9      	beq.n	16f2 <z_arm_fault+0x8a>
		reason = usage_fault(esf);
    173e:	f7ff ff7d 	bl	163c <usage_fault.isra.0>
    1742:	e7d3      	b.n	16ec <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    1744:	2000      	movs	r0, #0
    1746:	f10d 0107 	add.w	r1, sp, #7
    174a:	e7cd      	b.n	16e8 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
    174c:	2000      	movs	r0, #0
    174e:	f10d 0107 	add.w	r1, sp, #7
    1752:	e7ec      	b.n	172e <z_arm_fault+0xc6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1754:	2400      	movs	r4, #0
    1756:	e7cc      	b.n	16f2 <z_arm_fault+0x8a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1758:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    175c:	f023 0301 	bic.w	r3, r3, #1
    1760:	e7d8      	b.n	1714 <z_arm_fault+0xac>
    1762:	bf00      	nop
    1764:	e000ed00 	.word	0xe000ed00
    1768:	e000ed29 	.word	0xe000ed29
    176c:	e000ed2a 	.word	0xe000ed2a

00001770 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1770:	4b04      	ldr	r3, [pc, #16]	; (1784 <z_arm_fault_init+0x14>)
    1772:	695a      	ldr	r2, [r3, #20]
    1774:	f042 0210 	orr.w	r2, r2, #16
    1778:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    177a:	695a      	ldr	r2, [r3, #20]
    177c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1780:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1782:	4770      	bx	lr
    1784:	e000ed00 	.word	0xe000ed00

00001788 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1788:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    178c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1790:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1792:	4672      	mov	r2, lr
	bl z_arm_fault
    1794:	f7ff ff68 	bl	1668 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1798:	bd01      	pop	{r0, pc}
    179a:	bf00      	nop

0000179c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    179c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    179e:	2120      	movs	r1, #32
    17a0:	4803      	ldr	r0, [pc, #12]	; (17b0 <z_arm_interrupt_init+0x14>)
    17a2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    17a4:	3301      	adds	r3, #1
    17a6:	2b45      	cmp	r3, #69	; 0x45
    17a8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    17ac:	d1f9      	bne.n	17a2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    17ae:	4770      	bx	lr
    17b0:	e000e100 	.word	0xe000e100

000017b4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    17b4:	2000      	movs	r0, #0
    msr CONTROL, r0
    17b6:	f380 8814 	msr	CONTROL, r0
    isb
    17ba:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    17be:	2000      	movs	r0, #0
    msr MSPLIM, r0
    17c0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    17c4:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    17c8:	f003 fdba 	bl	5340 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    17cc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    17ce:	490e      	ldr	r1, [pc, #56]	; (1808 <__start+0x54>)
    str r0, [r1]
    17d0:	6008      	str	r0, [r1, #0]
    dsb
    17d2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    17d6:	480d      	ldr	r0, [pc, #52]	; (180c <__start+0x58>)
    msr msp, r0
    17d8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    17dc:	f000 f83c 	bl	1858 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17e0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    17e2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    17e6:	480a      	ldr	r0, [pc, #40]	; (1810 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    17e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    17ec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    17ee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    17f2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    17f6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    17f8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    17fa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    17fe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1802:	f7ff fe05 	bl	1410 <z_arm_prep_c>
    1806:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1808:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    180c:	20000f20 	.word	0x20000f20
    ldr r0, =z_interrupt_stacks
    1810:	20001060 	.word	0x20001060

00001814 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1814:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1818:	4905      	ldr	r1, [pc, #20]	; (1830 <sys_arch_reboot+0x1c>)
    181a:	4b06      	ldr	r3, [pc, #24]	; (1834 <sys_arch_reboot+0x20>)
    181c:	68ca      	ldr	r2, [r1, #12]
    181e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1822:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1824:	60cb      	str	r3, [r1, #12]
    1826:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    182a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    182c:	e7fd      	b.n	182a <sys_arch_reboot+0x16>
    182e:	bf00      	nop
    1830:	e000ed00 	.word	0xe000ed00
    1834:	05fa0004 	.word	0x05fa0004

00001838 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1838:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    183a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    183c:	4a05      	ldr	r2, [pc, #20]	; (1854 <z_arm_clear_arm_mpu_config+0x1c>)
    183e:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    1840:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    1844:	428b      	cmp	r3, r1
    1846:	d100      	bne.n	184a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1848:	4770      	bx	lr
  mpu->RNR = rnr;
    184a:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    184c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    184e:	3301      	adds	r3, #1
    1850:	e7f8      	b.n	1844 <z_arm_clear_arm_mpu_config+0xc>
    1852:	bf00      	nop
    1854:	e000ed90 	.word	0xe000ed90

00001858 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1858:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    185a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    185c:	2400      	movs	r4, #0
    185e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1862:	f7ff ffe9 	bl	1838 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1866:	4a0e      	ldr	r2, [pc, #56]	; (18a0 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    1868:	4623      	mov	r3, r4
    186a:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    186c:	f04f 34ff 	mov.w	r4, #4294967295
    1870:	f103 0020 	add.w	r0, r3, #32
    1874:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1876:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1878:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    187c:	d1f8      	bne.n	1870 <z_arm_init_arch_hw_at_boot+0x18>
    187e:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1880:	f04f 30ff 	mov.w	r0, #4294967295
    1884:	f103 0260 	add.w	r2, r3, #96	; 0x60
    1888:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    188a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    188c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1890:	d1f8      	bne.n	1884 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1892:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1898:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    189c:	bd10      	pop	{r4, pc}
    189e:	bf00      	nop
    18a0:	e000e100 	.word	0xe000e100

000018a4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    18a4:	4b08      	ldr	r3, [pc, #32]	; (18c8 <z_impl_k_thread_abort+0x24>)
    18a6:	689b      	ldr	r3, [r3, #8]
    18a8:	4283      	cmp	r3, r0
    18aa:	d10b      	bne.n	18c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    18ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    18b0:	b143      	cbz	r3, 18c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18b2:	4b06      	ldr	r3, [pc, #24]	; (18cc <z_impl_k_thread_abort+0x28>)
    18b4:	685a      	ldr	r2, [r3, #4]
    18b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    18ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    18bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    18be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    18c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    18c4:	f002 bc38 	b.w	4138 <z_thread_abort>
    18c8:	20000908 	.word	0x20000908
    18cc:	e000ed00 	.word	0xe000ed00

000018d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    18d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    18d2:	4c09      	ldr	r4, [pc, #36]	; (18f8 <z_arm_configure_static_mpu_regions+0x28>)
    18d4:	4a09      	ldr	r2, [pc, #36]	; (18fc <z_arm_configure_static_mpu_regions+0x2c>)
    18d6:	4623      	mov	r3, r4
    18d8:	2101      	movs	r1, #1
    18da:	4809      	ldr	r0, [pc, #36]	; (1900 <z_arm_configure_static_mpu_regions+0x30>)
    18dc:	f000 f8dc 	bl	1a98 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    18e0:	2300      	movs	r3, #0
    18e2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    18e4:	4b07      	ldr	r3, [pc, #28]	; (1904 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    18e6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    18e8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    18ea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    18ec:	9301      	str	r3, [sp, #4]
    18ee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    18f0:	f000 f8dc 	bl	1aac <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    18f4:	b004      	add	sp, #16
    18f6:	bd10      	pop	{r4, pc}
    18f8:	20070000 	.word	0x20070000
    18fc:	20000000 	.word	0x20000000
    1900:	00005674 	.word	0x00005674
    1904:	20000190 	.word	0x20000190

00001908 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1908:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    190a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    190c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    190e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1912:	f004 031f 	and.w	r3, r4, #31
    1916:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1918:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    191a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    191c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1920:	4904      	ldr	r1, [pc, #16]	; (1934 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1922:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1926:	f043 0301 	orr.w	r3, r3, #1
    192a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    192c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    192e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1930:	bd10      	pop	{r4, pc}
    1932:	bf00      	nop
    1934:	e000ed90 	.word	0xe000ed90

00001938 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    193c:	4688      	mov	r8, r1
    193e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1940:	4606      	mov	r6, r0
    1942:	f04f 0900 	mov.w	r9, #0
	MPU->RNR = index;
    1946:	4d4a      	ldr	r5, [pc, #296]	; (1a70 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1948:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    194a:	45c1      	cmp	r9, r8
    194c:	da05      	bge.n	195a <mpu_configure_regions_and_partition.constprop.0+0x22>
		if (regions[i].size == 0U) {
    194e:	6877      	ldr	r7, [r6, #4]
    1950:	b3b7      	cbz	r7, 19c0 <mpu_configure_regions_and_partition.constprop.0+0x88>
		&&
    1952:	2f1f      	cmp	r7, #31
    1954:	d805      	bhi.n	1962 <mpu_configure_regions_and_partition.constprop.0+0x2a>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1956:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    195a:	4620      	mov	r0, r4
    195c:	b005      	add	sp, #20
    195e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1962:	06fb      	lsls	r3, r7, #27
    1964:	d1f7      	bne.n	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
		((part->start &
    1966:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    196a:	f01a 0f1f 	tst.w	sl, #31
    196e:	d1f2      	bne.n	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1970:	4650      	mov	r0, sl
    1972:	f003 f88e 	bl	4a92 <arm_cmse_mpu_region_get>
    1976:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1978:	eb07 000a 	add.w	r0, r7, sl
    197c:	3801      	subs	r0, #1
    197e:	f003 f888 	bl	4a92 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1982:	4583      	cmp	fp, r0
    1984:	d1e7      	bne.n	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
		if ((u_reg_index == -EINVAL) ||
    1986:	f11b 0f16 	cmn.w	fp, #22
    198a:	d0e4      	beq.n	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
    198c:	455c      	cmp	r4, fp
    198e:	dde2      	ble.n	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    1990:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1994:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    1996:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    199a:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    199c:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    19a0:	e9d6 3200 	ldrd	r3, r2, [r6]
    19a4:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    19a6:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    19a8:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    19ac:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    19b0:	d11c      	bne.n	19ec <mpu_configure_regions_and_partition.constprop.0+0xb4>
    19b2:	4557      	cmp	r7, sl
    19b4:	d108      	bne.n	19c8 <mpu_configure_regions_and_partition.constprop.0+0x90>
			mpu_configure_region(u_reg_index, &regions[i]);
    19b6:	4631      	mov	r1, r6
    19b8:	fa5f f08b 	uxtb.w	r0, fp
    19bc:	f003 f872 	bl	4aa4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    19c0:	f109 0901 	add.w	r9, r9, #1
    19c4:	360c      	adds	r6, #12
    19c6:	e7c0      	b.n	194a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    19c8:	4631      	mov	r1, r6
	MPU->RNR = index;
    19ca:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    19ce:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    19d0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    19d4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    19d8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    19da:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    19dc:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    19de:	f003 f861 	bl	4aa4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    19e2:	f110 0f16 	cmn.w	r0, #22
    19e6:	d0b6      	beq.n	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
			reg_index++;
    19e8:	1c44      	adds	r4, r0, #1
    19ea:	e7e9      	b.n	19c0 <mpu_configure_regions_and_partition.constprop.0+0x88>
		} else if (reg_last == u_reg_last) {
    19ec:	3b01      	subs	r3, #1
    19ee:	4557      	cmp	r7, sl
    19f0:	b2e0      	uxtb	r0, r4
    19f2:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    19f6:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    19fa:	d106      	bne.n	1a0a <mpu_configure_regions_and_partition.constprop.0+0xd2>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    19fc:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    19fe:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a00:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1a04:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a06:	612b      	str	r3, [r5, #16]
			reg_index =
    1a08:	e7e9      	b.n	19de <mpu_configure_regions_and_partition.constprop.0+0xa6>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a0a:	6929      	ldr	r1, [r5, #16]
    1a0c:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1a10:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a12:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    1a14:	4631      	mov	r1, r6
    1a16:	f003 f845 	bl	4aa4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1a1a:	f110 0f16 	cmn.w	r0, #22
    1a1e:	d09a      	beq.n	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    1a20:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    1a24:	68ea      	ldr	r2, [r5, #12]
    1a26:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1a2a:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    1a2c:	f362 0304 	bfi	r3, r2, #0, #5
    1a30:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1a34:	692b      	ldr	r3, [r5, #16]
    1a36:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1a3a:	085b      	lsrs	r3, r3, #1
    1a3c:	f363 1247 	bfi	r2, r3, #5, #3
    1a40:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1a44:	e9d6 3200 	ldrd	r3, r2, [r6]
    1a48:	4413      	add	r3, r2
    1a4a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1a4c:	f023 031f 	bic.w	r3, r3, #31
    1a50:	443b      	add	r3, r7
			reg_index++;
    1a52:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1a54:	eba3 0a0a 	sub.w	sl, r3, sl
    1a58:	b2e0      	uxtb	r0, r4
    1a5a:	f02a 031f 	bic.w	r3, sl, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1a5e:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1a60:	9303      	str	r3, [sp, #12]
    1a62:	f63f af78 	bhi.w	1956 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1a66:	4669      	mov	r1, sp
    1a68:	f7ff ff4e 	bl	1908 <region_init>
    1a6c:	e7bc      	b.n	19e8 <mpu_configure_regions_and_partition.constprop.0+0xb0>
    1a6e:	bf00      	nop
    1a70:	e000ed90 	.word	0xe000ed90

00001a74 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1a74:	2205      	movs	r2, #5
    1a76:	4b03      	ldr	r3, [pc, #12]	; (1a84 <arm_core_mpu_enable+0x10>)
    1a78:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1a7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a7e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1a82:	4770      	bx	lr
    1a84:	e000ed90 	.word	0xe000ed90

00001a88 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1a88:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1a8c:	2200      	movs	r2, #0
    1a8e:	4b01      	ldr	r3, [pc, #4]	; (1a94 <arm_core_mpu_disable+0xc>)
    1a90:	605a      	str	r2, [r3, #4]
}
    1a92:	4770      	bx	lr
    1a94:	e000ed90 	.word	0xe000ed90

00001a98 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1a98:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1a9a:	4c03      	ldr	r4, [pc, #12]	; (1aa8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1a9c:	7822      	ldrb	r2, [r4, #0]
    1a9e:	f7ff ff4b 	bl	1938 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1aa2:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1aa4:	bd10      	pop	{r4, pc}
    1aa6:	bf00      	nop
    1aa8:	20000b18 	.word	0x20000b18

00001aac <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    1aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ab0:	4d26      	ldr	r5, [pc, #152]	; (1b4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    1ab2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1ab4:	4606      	mov	r6, r0
    1ab6:	f04f 0800 	mov.w	r8, #0
    1aba:	46ab      	mov	fp, r5
	MPU->RNR = index;
    1abc:	4f24      	ldr	r7, [pc, #144]	; (1b50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1abe:	45d0      	cmp	r8, sl
    1ac0:	da1b      	bge.n	1afa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1ac2:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1ac6:	f1b9 0f00 	cmp.w	r9, #0
    1aca:	d039      	beq.n	1b40 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1acc:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1ace:	4608      	mov	r0, r1
    1ad0:	9101      	str	r1, [sp, #4]
    1ad2:	f002 ffde 	bl	4a92 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1ad6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1ad8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1ada:	eb09 0001 	add.w	r0, r9, r1
    1ade:	3801      	subs	r0, #1
    1ae0:	f002 ffd7 	bl	4a92 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1ae4:	4284      	cmp	r4, r0
    1ae6:	f04f 0214 	mov.w	r2, #20
    1aea:	4b1a      	ldr	r3, [pc, #104]	; (1b54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    1aec:	d008      	beq.n	1b00 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1aee:	f06f 0315 	mvn.w	r3, #21
    1af2:	fb02 f808 	mul.w	r8, r2, r8
    1af6:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    1afa:	b003      	add	sp, #12
    1afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1b00:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1b04:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1b06:	d0f8      	beq.n	1afa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1b08:	7819      	ldrb	r1, [r3, #0]
    1b0a:	42a1      	cmp	r1, r4
    1b0c:	ddf5      	ble.n	1afa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1b0e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    1b12:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    1b14:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    1b16:	68fc      	ldr	r4, [r7, #12]
    1b18:	f100 0108 	add.w	r1, r0, #8
    1b1c:	7b00      	ldrb	r0, [r0, #12]
    1b1e:	f364 0004 	bfi	r0, r4, #0, #5
    1b22:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1b24:	6938      	ldr	r0, [r7, #16]
    1b26:	790c      	ldrb	r4, [r1, #4]
    1b28:	0840      	lsrs	r0, r0, #1
    1b2a:	f360 1447 	bfi	r4, r0, #5, #3
    1b2e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1b30:	68f9      	ldr	r1, [r7, #12]
    1b32:	f021 011f 	bic.w	r1, r1, #31
    1b36:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1b38:	6939      	ldr	r1, [r7, #16]
    1b3a:	f021 011f 	bic.w	r1, r1, #31
    1b3e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b40:	f108 0801 	add.w	r8, r8, #1
    1b44:	3514      	adds	r5, #20
    1b46:	360c      	adds	r6, #12
    1b48:	e7b9      	b.n	1abe <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1b4a:	bf00      	nop
    1b4c:	2000080c 	.word	0x2000080c
    1b50:	e000ed90 	.word	0xe000ed90
    1b54:	20000b18 	.word	0x20000b18

00001b58 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1b58:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b5a:	4c0e      	ldr	r4, [pc, #56]	; (1b94 <z_arm_mpu_init+0x3c>)
    1b5c:	6825      	ldr	r5, [r4, #0]
    1b5e:	2d08      	cmp	r5, #8
    1b60:	d814      	bhi.n	1b8c <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1b62:	f7ff ff91 	bl	1a88 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b66:	2000      	movs	r0, #0
	MPU->MAIR0 =
    1b68:	4b0b      	ldr	r3, [pc, #44]	; (1b98 <z_arm_mpu_init+0x40>)
    1b6a:	4a0c      	ldr	r2, [pc, #48]	; (1b9c <z_arm_mpu_init+0x44>)
    1b6c:	631a      	str	r2, [r3, #48]	; 0x30
    1b6e:	4285      	cmp	r5, r0
    1b70:	d105      	bne.n	1b7e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b72:	4b0b      	ldr	r3, [pc, #44]	; (1ba0 <z_arm_mpu_init+0x48>)
    1b74:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1b76:	f7ff ff7d 	bl	1a74 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1b7a:	2000      	movs	r0, #0
}
    1b7c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1b7e:	6861      	ldr	r1, [r4, #4]
    1b80:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1b84:	f7ff fec0 	bl	1908 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b88:	3001      	adds	r0, #1
    1b8a:	e7f0      	b.n	1b6e <z_arm_mpu_init+0x16>
		return -1;
    1b8c:	f04f 30ff 	mov.w	r0, #4294967295
    1b90:	e7f4      	b.n	1b7c <z_arm_mpu_init+0x24>
    1b92:	bf00      	nop
    1b94:	00005680 	.word	0x00005680
    1b98:	e000ed90 	.word	0xe000ed90
    1b9c:	0044ffaa 	.word	0x0044ffaa
    1ba0:	20000b18 	.word	0x20000b18

00001ba4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1ba4:	4b01      	ldr	r3, [pc, #4]	; (1bac <__stdout_hook_install+0x8>)
    1ba6:	6018      	str	r0, [r3, #0]
}
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop
    1bac:	20000028 	.word	0x20000028

00001bb0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1bb0:	4a0e      	ldr	r2, [pc, #56]	; (1bec <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1bb2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1bb4:	1a84      	subs	r4, r0, r2
{
    1bb6:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    1bb8:	200c      	movs	r0, #12
	size_t offset = (size_t)(mgr - data->mgr);
    1bba:	10a3      	asrs	r3, r4, #2
    1bbc:	4c0c      	ldr	r4, [pc, #48]	; (1bf0 <onoff_stop+0x40>)
{
    1bbe:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1bc0:	435c      	muls	r4, r3
    1bc2:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    1bc4:	fb00 2004 	mla	r0, r0, r4, r2
    1bc8:	2140      	movs	r1, #64	; 0x40
    1bca:	3078      	adds	r0, #120	; 0x78
    1bcc:	f002 ffb7 	bl	4b3e <set_off_state>
	if (err < 0) {
    1bd0:	1e01      	subs	r1, r0, #0
    1bd2:	db05      	blt.n	1be0 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    1bd4:	4b07      	ldr	r3, [pc, #28]	; (1bf4 <onoff_stop+0x44>)
    1bd6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1bda:	6863      	ldr	r3, [r4, #4]
    1bdc:	4798      	blx	r3
	return 0;
    1bde:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    1be0:	4628      	mov	r0, r5
    1be2:	4633      	mov	r3, r6
}
    1be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1be8:	4718      	bx	r3
    1bea:	bf00      	nop
    1bec:	20000830 	.word	0x20000830
    1bf0:	b6db6db7 	.word	0xb6db6db7
    1bf4:	000056c0 	.word	0x000056c0

00001bf8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    1bfc:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    1bfe:	4e10      	ldr	r6, [pc, #64]	; (1c40 <onoff_start+0x48>)
{
    1c00:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
    1c02:	1b84      	subs	r4, r0, r6
    1c04:	10a3      	asrs	r3, r4, #2
    1c06:	4c0f      	ldr	r4, [pc, #60]	; (1c44 <onoff_start+0x4c>)
{
    1c08:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1c0a:	435c      	muls	r4, r3
    1c0c:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    1c0e:	4365      	muls	r5, r4
    1c10:	f105 0078 	add.w	r0, r5, #120	; 0x78
    1c14:	2140      	movs	r1, #64	; 0x40
    1c16:	4430      	add	r0, r6
    1c18:	f002 ffaa 	bl	4b70 <set_starting_state>
	if (err < 0) {
    1c1c:	1e01      	subs	r1, r0, #0
    1c1e:	db09      	blt.n	1c34 <onoff_start+0x3c>
	subdata->cb = cb;
    1c20:	4a09      	ldr	r2, [pc, #36]	; (1c48 <onoff_start+0x50>)
    1c22:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    1c24:	e9c3 271c 	strd	r2, r7, [r3, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    1c28:	4b08      	ldr	r3, [pc, #32]	; (1c4c <onoff_start+0x54>)
    1c2a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1c32:	4718      	bx	r3
		notify(mgr, err);
    1c34:	4640      	mov	r0, r8
    1c36:	463b      	mov	r3, r7
}
    1c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1c3c:	4718      	bx	r3
    1c3e:	bf00      	nop
    1c40:	20000830 	.word	0x20000830
    1c44:	b6db6db7 	.word	0xb6db6db7
    1c48:	00004bd3 	.word	0x00004bd3
    1c4c:	000056c0 	.word	0x000056c0

00001c50 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1c54:	2200      	movs	r2, #0
    1c56:	2101      	movs	r1, #1
{
    1c58:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1c5a:	2005      	movs	r0, #5
    1c5c:	f7ff fbbe 	bl	13dc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1c60:	4811      	ldr	r0, [pc, #68]	; (1ca8 <clk_init+0x58>)
    1c62:	f001 f857 	bl	2d14 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1c66:	4b11      	ldr	r3, [pc, #68]	; (1cac <clk_init+0x5c>)
    1c68:	4298      	cmp	r0, r3
    1c6a:	d119      	bne.n	1ca0 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1c6c:	f003 f989 	bl	4f82 <nrfx_clock_enable>
    1c70:	2400      	movs	r4, #0
	return &data->mgr[type];
    1c72:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c76:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1c78:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1cb0 <clk_init+0x60>
						get_sub_data(dev, i);
    1c7c:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1c7e:	4649      	mov	r1, r9
    1c80:	fb08 5004 	mla	r0, r8, r4, r5
    1c84:	f002 fe1e 	bl	48c4 <onoff_manager_init>
		if (err < 0) {
    1c88:	2800      	cmp	r0, #0
    1c8a:	db07      	blt.n	1c9c <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c8c:	2301      	movs	r3, #1
    1c8e:	fb07 5504 	mla	r5, r7, r4, r5
    1c92:	441c      	add	r4, r3
	for (enum clock_control_nrf_type i = 0;
    1c94:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c96:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    1c98:	d1f0      	bne.n	1c7c <clk_init+0x2c>
	}

	return 0;
    1c9a:	2000      	movs	r0, #0
}
    1c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1ca0:	f06f 0004 	mvn.w	r0, #4
    1ca4:	e7fa      	b.n	1c9c <clk_init+0x4c>
    1ca6:	bf00      	nop
    1ca8:	00001ce9 	.word	0x00001ce9
    1cac:	0bad0000 	.word	0x0bad0000
    1cb0:	000056e0 	.word	0x000056e0

00001cb4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1cb4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1cb6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1cb8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1cba:	434b      	muls	r3, r1
    1cbc:	4808      	ldr	r0, [pc, #32]	; (1ce0 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    1cbe:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1cc0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1cc2:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    1cc4:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1cc8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1cca:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1ccc:	f002 ff6e 	bl	4bac <set_on_state>
	if (callback) {
    1cd0:	b12d      	cbz	r5, 1cde <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1cd2:	4632      	mov	r2, r6
    1cd4:	462b      	mov	r3, r5
}
    1cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1cda:	4802      	ldr	r0, [pc, #8]	; (1ce4 <clkstarted_handle.constprop.0+0x30>)
    1cdc:	4718      	bx	r3
}
    1cde:	bd70      	pop	{r4, r5, r6, pc}
    1ce0:	20000830 	.word	0x20000830
    1ce4:	0000539c 	.word	0x0000539c

00001ce8 <clock_event_handler>:
	switch (event) {
    1ce8:	2805      	cmp	r0, #5
    1cea:	d811      	bhi.n	1d10 <clock_event_handler+0x28>
    1cec:	e8df f000 	tbb	[pc, r0]
    1cf0:	10100e03 	.word	0x10100e03
    1cf4:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1cf6:	4b07      	ldr	r3, [pc, #28]	; (1d14 <clock_event_handler+0x2c>)
    1cf8:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1cfa:	f010 0007 	ands.w	r0, r0, #7
    1cfe:	d107      	bne.n	1d10 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1d00:	f7ff bfd8 	b.w	1cb4 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1d04:	2002      	movs	r0, #2
    1d06:	e7fb      	b.n	1d00 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1d08:	2003      	movs	r0, #3
    1d0a:	e7f9      	b.n	1d00 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1d0c:	2001      	movs	r0, #1
    1d0e:	e7f7      	b.n	1d00 <clock_event_handler+0x18>
}
    1d10:	4770      	bx	lr
    1d12:	bf00      	nop
    1d14:	20000830 	.word	0x20000830

00001d18 <generic_hfclk_start>:
{
    1d18:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d1a:	f04f 0320 	mov.w	r3, #32
    1d1e:	f3ef 8111 	mrs	r1, BASEPRI
    1d22:	f383 8812 	msr	BASEPRI_MAX, r3
    1d26:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1d2a:	4a12      	ldr	r2, [pc, #72]	; (1d74 <generic_hfclk_start+0x5c>)
    1d2c:	6813      	ldr	r3, [r2, #0]
    1d2e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1d32:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1d36:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1d38:	d00c      	beq.n	1d54 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1d3a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1d3e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1d42:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1d46:	f013 0301 	ands.w	r3, r3, #1
    1d4a:	d003      	beq.n	1d54 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1d4c:	480a      	ldr	r0, [pc, #40]	; (1d78 <generic_hfclk_start+0x60>)
    1d4e:	f002 ff2d 	bl	4bac <set_on_state>
			already_started = true;
    1d52:	2301      	movs	r3, #1
	__asm__ volatile(
    1d54:	f381 8811 	msr	BASEPRI, r1
    1d58:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1d5c:	b123      	cbz	r3, 1d68 <generic_hfclk_start+0x50>
}
    1d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1d62:	2000      	movs	r0, #0
    1d64:	f7ff bfa6 	b.w	1cb4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1d68:	2001      	movs	r0, #1
}
    1d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1d6e:	f000 bfe1 	b.w	2d34 <nrfx_clock_start>
    1d72:	bf00      	nop
    1d74:	200008d0 	.word	0x200008d0
    1d78:	200008a8 	.word	0x200008a8

00001d7c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d7c:	4b07      	ldr	r3, [pc, #28]	; (1d9c <generic_hfclk_stop+0x20>)
    1d7e:	e8d3 2fef 	ldaex	r2, [r3]
    1d82:	f022 0102 	bic.w	r1, r2, #2
    1d86:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1d8a:	2800      	cmp	r0, #0
    1d8c:	d1f7      	bne.n	1d7e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1d8e:	07d3      	lsls	r3, r2, #31
    1d90:	d402      	bmi.n	1d98 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1d92:	2001      	movs	r0, #1
    1d94:	f003 b907 	b.w	4fa6 <nrfx_clock_stop>
}
    1d98:	4770      	bx	lr
    1d9a:	bf00      	nop
    1d9c:	200008d0 	.word	0x200008d0

00001da0 <api_blocking_start>:
{
    1da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1da2:	2200      	movs	r2, #0
    1da4:	2301      	movs	r3, #1
    1da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1daa:	466b      	mov	r3, sp
    1dac:	4a08      	ldr	r2, [pc, #32]	; (1dd0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1dae:	f8cd d000 	str.w	sp, [sp]
    1db2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1db6:	f002 ff3e 	bl	4c36 <api_start>
	if (err < 0) {
    1dba:	2800      	cmp	r0, #0
    1dbc:	db05      	blt.n	1dca <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1dc2:	2300      	movs	r3, #0
    1dc4:	4668      	mov	r0, sp
    1dc6:	f001 fe83 	bl	3ad0 <z_impl_k_sem_take>
}
    1dca:	b005      	add	sp, #20
    1dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    1dd0:	00004c09 	.word	0x00004c09

00001dd4 <z_nrf_clock_control_lf_on>:
{
    1dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1dd8:	2201      	movs	r2, #1
    1dda:	4606      	mov	r6, r0
    1ddc:	4939      	ldr	r1, [pc, #228]	; (1ec4 <z_nrf_clock_control_lf_on+0xf0>)
    1dde:	e8d1 3fef 	ldaex	r3, [r1]
    1de2:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1de6:	2800      	cmp	r0, #0
    1de8:	d1f9      	bne.n	1dde <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1dea:	b933      	cbnz	r3, 1dfa <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1dec:	4936      	ldr	r1, [pc, #216]	; (1ec8 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1dee:	4837      	ldr	r0, [pc, #220]	; (1ecc <z_nrf_clock_control_lf_on+0xf8>)
    1df0:	604b      	str	r3, [r1, #4]
    1df2:	60cb      	str	r3, [r1, #12]
    1df4:	608a      	str	r2, [r1, #8]
    1df6:	f002 fd78 	bl	48ea <onoff_request>
	switch (start_mode) {
    1dfa:	1e73      	subs	r3, r6, #1
    1dfc:	2b01      	cmp	r3, #1
    1dfe:	d832      	bhi.n	1e66 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1e00:	2e01      	cmp	r6, #1
    1e02:	d107      	bne.n	1e14 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1e04:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e08:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1e0c:	f003 0303 	and.w	r3, r3, #3
    1e10:	2b02      	cmp	r3, #2
    1e12:	d028      	beq.n	1e66 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1e14:	f003 f98d 	bl	5132 <k_is_in_isr>
    1e18:	4604      	mov	r4, r0
    1e1a:	b918      	cbnz	r0, 1e24 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    1e1c:	4b2c      	ldr	r3, [pc, #176]	; (1ed0 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1e1e:	781b      	ldrb	r3, [r3, #0]
    1e20:	2b00      	cmp	r3, #0
    1e22:	d147      	bne.n	1eb4 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    1e24:	f04f 0320 	mov.w	r3, #32
    1e28:	f3ef 8511 	mrs	r5, BASEPRI
    1e2c:	f383 8812 	msr	BASEPRI_MAX, r3
    1e30:	f3bf 8f6f 	isb	sy
    1e34:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1e36:	4f27      	ldr	r7, [pc, #156]	; (1ed4 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e38:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1ed8 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e3c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1edc <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1e40:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1e44:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1e48:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1e4c:	03d2      	lsls	r2, r2, #15
    1e4e:	d50c      	bpl.n	1e6a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1e50:	f003 0303 	and.w	r3, r3, #3
    1e54:	2b02      	cmp	r3, #2
    1e56:	d001      	beq.n	1e5c <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1e58:	2e01      	cmp	r6, #1
    1e5a:	d106      	bne.n	1e6a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    1e5c:	b324      	cbz	r4, 1ea8 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    1e5e:	f385 8811 	msr	BASEPRI, r5
    1e62:	f3bf 8f6f 	isb	sy
}
    1e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1e6a:	b1c4      	cbz	r4, 1e9e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1e6c:	4628      	mov	r0, r5
    1e6e:	f7ff fa8d 	bl	138c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1e72:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1e76:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1e7a:	b2db      	uxtb	r3, r3
    1e7c:	2b01      	cmp	r3, #1
    1e7e:	d1df      	bne.n	1e40 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1e80:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1e82:	2900      	cmp	r1, #0
    1e84:	d0dc      	beq.n	1e40 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e86:	2100      	movs	r1, #0
    1e88:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1e8a:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1e8c:	2102      	movs	r1, #2
    1e8e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    1e92:	2220      	movs	r2, #32
    1e94:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e98:	f8c9 3000 	str.w	r3, [r9]
}
    1e9c:	e7d0      	b.n	1e40 <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
    1e9e:	2100      	movs	r1, #0
    1ea0:	2021      	movs	r0, #33	; 0x21
    1ea2:	f002 f929 	bl	40f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1ea6:	e7e4      	b.n	1e72 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    1ea8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1eac:	2202      	movs	r2, #2
    1eae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1eb2:	e7d8      	b.n	1e66 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    1eb4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1eb8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1eba:	4605      	mov	r5, r0
    1ebc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1ec0:	e7b9      	b.n	1e36 <z_nrf_clock_control_lf_on+0x62>
    1ec2:	bf00      	nop
    1ec4:	200008d4 	.word	0x200008d4
    1ec8:	20000820 	.word	0x20000820
    1ecc:	2000084c 	.word	0x2000084c
    1ed0:	20000b19 	.word	0x20000b19
    1ed4:	50005104 	.word	0x50005104
    1ed8:	e000e100 	.word	0xe000e100
    1edc:	50005008 	.word	0x50005008

00001ee0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1ee0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1ee2:	4808      	ldr	r0, [pc, #32]	; (1f04 <uart_console_init+0x24>)
    1ee4:	4b08      	ldr	r3, [pc, #32]	; (1f08 <uart_console_init+0x28>)
    1ee6:	6018      	str	r0, [r3, #0]
    1ee8:	f003 f8b6 	bl	5058 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1eec:	b138      	cbz	r0, 1efe <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    1eee:	4807      	ldr	r0, [pc, #28]	; (1f0c <uart_console_init+0x2c>)
    1ef0:	f7ff fe58 	bl	1ba4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1ef4:	4805      	ldr	r0, [pc, #20]	; (1f0c <uart_console_init+0x2c>)
    1ef6:	f7fe fad9 	bl	4ac <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1efa:	2000      	movs	r0, #0
}
    1efc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1efe:	f06f 0012 	mvn.w	r0, #18
    1f02:	e7fb      	b.n	1efc <uart_console_init+0x1c>
    1f04:	000053e4 	.word	0x000053e4
    1f08:	200008d8 	.word	0x200008d8
    1f0c:	00001f11 	.word	0x00001f11

00001f10 <console_out>:
	if ('\n' == c) {
    1f10:	280a      	cmp	r0, #10
{
    1f12:	b538      	push	{r3, r4, r5, lr}
    1f14:	4604      	mov	r4, r0
    1f16:	4d07      	ldr	r5, [pc, #28]	; (1f34 <console_out+0x24>)
	if ('\n' == c) {
    1f18:	d104      	bne.n	1f24 <console_out+0x14>
    1f1a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1f1c:	6883      	ldr	r3, [r0, #8]
    1f1e:	210d      	movs	r1, #13
    1f20:	685b      	ldr	r3, [r3, #4]
    1f22:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1f24:	6828      	ldr	r0, [r5, #0]
    1f26:	6883      	ldr	r3, [r0, #8]
    1f28:	b2e1      	uxtb	r1, r4
    1f2a:	685b      	ldr	r3, [r3, #4]
    1f2c:	4798      	blx	r3
}
    1f2e:	4620      	mov	r0, r4
    1f30:	bd38      	pop	{r3, r4, r5, pc}
    1f32:	bf00      	nop
    1f34:	200008d8 	.word	0x200008d8

00001f38 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1f38:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    1f3a:	4603      	mov	r3, r0
    1f3c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1f3e:	d002      	beq.n	1f46 <nrfx_gpio_handler+0xe>
    1f40:	2a01      	cmp	r2, #1
    1f42:	d01c      	beq.n	1f7e <nrfx_gpio_handler+0x46>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    1f44:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1f46:	4e0f      	ldr	r6, [pc, #60]	; (1f84 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1f48:	6932      	ldr	r2, [r6, #16]
    1f4a:	6851      	ldr	r1, [r2, #4]
    1f4c:	2900      	cmp	r1, #0
    1f4e:	d0f9      	beq.n	1f44 <nrfx_gpio_handler+0xc>
    1f50:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
    1f52:	2501      	movs	r5, #1
    1f54:	2c00      	cmp	r4, #0
    1f56:	bf38      	it	cc
    1f58:	2400      	movcc	r4, #0
    *p_pin = pin_number & 0x1F;
    1f5a:	f003 031f 	and.w	r3, r3, #31
    1f5e:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    1f60:	688a      	ldr	r2, [r1, #8]
    1f62:	402a      	ands	r2, r5
    1f64:	d002      	beq.n	1f6c <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1f66:	4630      	mov	r0, r6
    1f68:	684b      	ldr	r3, [r1, #4]
    1f6a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1f6c:	2c00      	cmp	r4, #0
    1f6e:	d0e9      	beq.n	1f44 <nrfx_gpio_handler+0xc>
	return node->next;
    1f70:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1f72:	4621      	mov	r1, r4
    1f74:	2b00      	cmp	r3, #0
    1f76:	bf38      	it	cc
    1f78:	2300      	movcc	r3, #0
    1f7a:	461c      	mov	r4, r3
    1f7c:	e7f0      	b.n	1f60 <nrfx_gpio_handler+0x28>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1f7e:	4e02      	ldr	r6, [pc, #8]	; (1f88 <nrfx_gpio_handler+0x50>)
    1f80:	e7e2      	b.n	1f48 <nrfx_gpio_handler+0x10>
    1f82:	bf00      	nop
    1f84:	000053b4 	.word	0x000053b4
    1f88:	000053cc 	.word	0x000053cc

00001f8c <gpio_nrfx_pin_interrupt_configure>:
{
    1f8c:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f8e:	6840      	ldr	r0, [r0, #4]
    1f90:	f001 051f 	and.w	r5, r1, #31
    1f94:	7b04      	ldrb	r4, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
    1f96:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f9a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    1f9e:	b085      	sub	sp, #20
    1fa0:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    1fa4:	d104      	bne.n	1fb0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    1fa6:	4628      	mov	r0, r5
    1fa8:	f001 f9b4 	bl	3314 <nrfx_gpiote_trigger_disable>
	return 0;
    1fac:	2000      	movs	r0, #0
    1fae:	e032      	b.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
	if (mode == GPIO_INT_MODE_LEVEL) {
    1fb0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fb4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1fb8:	d12f      	bne.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1fbe:	bf0c      	ite	eq
    1fc0:	2304      	moveq	r3, #4
    1fc2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fc4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1fc8:	6883      	ldr	r3, [r0, #8]
    1fca:	fa23 f101 	lsr.w	r1, r3, r1
    1fce:	07c9      	lsls	r1, r1, #31
    1fd0:	d42f      	bmi.n	2032 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32>
    1fd2:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1fd6:	d12c      	bne.n	2032 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32>
        case 1: return NRF_P1;
    1fd8:	491e      	ldr	r1, [pc, #120]	; (2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>)
    1fda:	481f      	ldr	r0, [pc, #124]	; (2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>)
    return pin_number >> 5;
    1fdc:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    1fde:	2a01      	cmp	r2, #1
    1fe0:	bf14      	ite	ne
    1fe2:	460a      	movne	r2, r1
    1fe4:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    1fe6:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1fea:	3380      	adds	r3, #128	; 0x80
    1fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1ff0:	07db      	lsls	r3, r3, #31
    1ff2:	d41e      	bmi.n	2032 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1ff4:	f10d 0407 	add.w	r4, sp, #7
    1ff8:	4621      	mov	r1, r4
    1ffa:	4628      	mov	r0, r5
    1ffc:	f001 f8f6 	bl	31ec <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2000:	4b16      	ldr	r3, [pc, #88]	; (205c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5c>)
    2002:	4298      	cmp	r0, r3
    2004:	d114      	bne.n	2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>
			err = nrfx_gpiote_channel_alloc(&ch);
    2006:	4620      	mov	r0, r4
    2008:	f001 f93a 	bl	3280 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    200c:	4b14      	ldr	r3, [pc, #80]	; (2060 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60>)
    200e:	4298      	cmp	r0, r3
    2010:	d00e      	beq.n	2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>
				return -ENOMEM;
    2012:	f06f 000b 	mvn.w	r0, #11
}
    2016:	b005      	add	sp, #20
    2018:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    201a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    201e:	d005      	beq.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    2020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2024:	bf0c      	ite	eq
    2026:	2302      	moveq	r3, #2
    2028:	2301      	movne	r3, #1
    202a:	e7cb      	b.n	1fc4 <gpio_nrfx_pin_interrupt_configure+0x38>
    202c:	2303      	movs	r3, #3
    202e:	e7c9      	b.n	1fc4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2030:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2032:	2300      	movs	r3, #0
    2034:	4628      	mov	r0, r5
    2036:	4619      	mov	r1, r3
    2038:	aa02      	add	r2, sp, #8
    203a:	f000 ffb3 	bl	2fa4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    203e:	4b08      	ldr	r3, [pc, #32]	; (2060 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60>)
    2040:	4298      	cmp	r0, r3
    2042:	d104      	bne.n	204e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2044:	2101      	movs	r1, #1
    2046:	4628      	mov	r0, r5
    2048:	f001 f920 	bl	328c <nrfx_gpiote_trigger_enable>
    204c:	e7ae      	b.n	1fac <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    204e:	f06f 0004 	mvn.w	r0, #4
    2052:	e7e0      	b.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
    2054:	50842500 	.word	0x50842500
    2058:	50842800 	.word	0x50842800
    205c:	0bad0004 	.word	0x0bad0004
    2060:	0bad0000 	.word	0x0bad0000

00002064 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2064:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2066:	f001 f8fb 	bl	3260 <nrfx_gpiote_is_init>
    206a:	4604      	mov	r4, r0
    206c:	b968      	cbnz	r0, 208a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    206e:	f001 f8cf 	bl	3210 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2072:	4b08      	ldr	r3, [pc, #32]	; (2094 <gpio_nrfx_init+0x30>)
    2074:	4298      	cmp	r0, r3
    2076:	d10a      	bne.n	208e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2078:	4621      	mov	r1, r4
    207a:	4807      	ldr	r0, [pc, #28]	; (2098 <gpio_nrfx_init+0x34>)
    207c:	f001 f8b0 	bl	31e0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2080:	4622      	mov	r2, r4
    2082:	2105      	movs	r1, #5
    2084:	200d      	movs	r0, #13
    2086:	f7ff f9a9 	bl	13dc <z_arm_irq_priority_set>
		return 0;
    208a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    208c:	bd10      	pop	{r4, pc}
		return -EIO;
    208e:	f06f 0004 	mvn.w	r0, #4
    2092:	e7fb      	b.n	208c <gpio_nrfx_init+0x28>
    2094:	0bad0000 	.word	0x0bad0000
    2098:	00001f39 	.word	0x00001f39

0000209c <gpio_nrfx_pin_configure>:
{
    209c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    20a0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    20a2:	f001 051f 	and.w	r5, r1, #31
    20a6:	7b3b      	ldrb	r3, [r7, #12]
{
    20a8:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    20aa:	4614      	mov	r4, r2
{
    20ac:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    20ae:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    20b2:	b9ca      	cbnz	r2, 20e8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    20b4:	a902      	add	r1, sp, #8
    20b6:	4628      	mov	r0, r5
    20b8:	f001 f898 	bl	31ec <nrfx_gpiote_channel_get>
    20bc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    20be:	4628      	mov	r0, r5
    20c0:	f001 f94a 	bl	3358 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    20c4:	4b49      	ldr	r3, [pc, #292]	; (21ec <gpio_nrfx_pin_configure+0x150>)
    20c6:	4298      	cmp	r0, r3
    20c8:	d004      	beq.n	20d4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    20ca:	f06f 0004 	mvn.w	r0, #4
}
    20ce:	b005      	add	sp, #20
    20d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    20d4:	4284      	cmp	r4, r0
    20d6:	d105      	bne.n	20e4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    20d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    20dc:	f001 f8ca 	bl	3274 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    20e0:	42a0      	cmp	r0, r4
    20e2:	d1f2      	bne.n	20ca <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    20e4:	2000      	movs	r0, #0
    20e6:	e7f2      	b.n	20ce <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    20e8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    20ec:	f10d 0103 	add.w	r1, sp, #3
    20f0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    20f2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    20f6:	f001 f879 	bl	31ec <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    20fa:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    20fc:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    20fe:	4649      	mov	r1, r9
    2100:	4628      	mov	r0, r5
    2102:	aa02      	add	r2, sp, #8
    2104:	f000 ff4e 	bl	2fa4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2108:	4b38      	ldr	r3, [pc, #224]	; (21ec <gpio_nrfx_pin_configure+0x150>)
    210a:	4298      	cmp	r0, r3
    210c:	d002      	beq.n	2114 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    210e:	f06f 0015 	mvn.w	r0, #21
    2112:	e7dc      	b.n	20ce <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2114:	4580      	cmp	r8, r0
    2116:	d103      	bne.n	2120 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2118:	f89d 0003 	ldrb.w	r0, [sp, #3]
    211c:	f001 f8aa 	bl	3274 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2120:	03a3      	lsls	r3, r4, #14
    2122:	d54f      	bpl.n	21c4 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2124:	f240 6306 	movw	r3, #1542	; 0x606
    2128:	f240 2206 	movw	r2, #518	; 0x206
    212c:	4023      	ands	r3, r4
    212e:	4293      	cmp	r3, r2
    2130:	d03a      	beq.n	21a8 <gpio_nrfx_pin_configure+0x10c>
    2132:	d80c      	bhi.n	214e <gpio_nrfx_pin_configure+0xb2>
    2134:	2b06      	cmp	r3, #6
    2136:	d015      	beq.n	2164 <gpio_nrfx_pin_configure+0xc8>
    2138:	d804      	bhi.n	2144 <gpio_nrfx_pin_configure+0xa8>
    213a:	b19b      	cbz	r3, 2164 <gpio_nrfx_pin_configure+0xc8>
    213c:	2b02      	cmp	r3, #2
    213e:	d1e6      	bne.n	210e <gpio_nrfx_pin_configure+0x72>
    2140:	2304      	movs	r3, #4
    2142:	e00f      	b.n	2164 <gpio_nrfx_pin_configure+0xc8>
    2144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2148:	d1e1      	bne.n	210e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    214a:	2301      	movs	r3, #1
    214c:	e00a      	b.n	2164 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    214e:	f240 4202 	movw	r2, #1026	; 0x402
    2152:	4293      	cmp	r3, r2
    2154:	d02a      	beq.n	21ac <gpio_nrfx_pin_configure+0x110>
    2156:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    215a:	d029      	beq.n	21b0 <gpio_nrfx_pin_configure+0x114>
    215c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2160:	d1d5      	bne.n	210e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2162:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2164:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2168:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    216c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2170:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2172:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    2176:	bf4c      	ite	mi
    2178:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    217a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    217e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2180:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2184:	d516      	bpl.n	21b4 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2186:	2101      	movs	r1, #1
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    218e:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2190:	2200      	movs	r2, #0
    2192:	4628      	mov	r0, r5
    2194:	a901      	add	r1, sp, #4
    2196:	f000 ffb1 	bl	30fc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    219a:	4b14      	ldr	r3, [pc, #80]	; (21ec <gpio_nrfx_pin_configure+0x150>)
    219c:	4298      	cmp	r0, r3
    219e:	bf14      	ite	ne
    21a0:	f06f 0015 	mvnne.w	r0, #21
    21a4:	2000      	moveq	r0, #0
    21a6:	e792      	b.n	20ce <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    21a8:	2307      	movs	r3, #7
    21aa:	e7db      	b.n	2164 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    21ac:	2305      	movs	r3, #5
    21ae:	e7d9      	b.n	2164 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    21b0:	2303      	movs	r3, #3
    21b2:	e7d7      	b.n	2164 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    21b4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    21b6:	bf41      	itttt	mi
    21b8:	2101      	movmi	r1, #1
    21ba:	687b      	ldrmi	r3, [r7, #4]
    21bc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    21c0:	60de      	strmi	r6, [r3, #12]
}
    21c2:	e7e5      	b.n	2190 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
    21c4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    21c6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    21ca:	bf4c      	ite	mi
    21cc:	2403      	movmi	r4, #3
    21ce:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    21d2:	461a      	mov	r2, r3
    21d4:	4628      	mov	r0, r5
    21d6:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    21d8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    21dc:	f000 fee2 	bl	2fa4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    21e0:	4b02      	ldr	r3, [pc, #8]	; (21ec <gpio_nrfx_pin_configure+0x150>)
    21e2:	4298      	cmp	r0, r3
    21e4:	f43f af7e 	beq.w	20e4 <gpio_nrfx_pin_configure+0x48>
    21e8:	e791      	b.n	210e <gpio_nrfx_pin_configure+0x72>
    21ea:	bf00      	nop
    21ec:	0bad0000 	.word	0x0bad0000

000021f0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    21f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    21f2:	794b      	ldrb	r3, [r1, #5]
    21f4:	2b01      	cmp	r3, #1
    21f6:	d028      	beq.n	224a <uarte_nrfx_configure+0x5a>
    21f8:	2b03      	cmp	r3, #3
    21fa:	d123      	bne.n	2244 <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    21fc:	2410      	movs	r4, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    21fe:	798b      	ldrb	r3, [r1, #6]
    2200:	2b03      	cmp	r3, #3
    2202:	d11f      	bne.n	2244 <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2204:	79ce      	ldrb	r6, [r1, #7]
    2206:	b10e      	cbz	r6, 220c <uarte_nrfx_configure+0x1c>
    2208:	2e01      	cmp	r6, #1
    220a:	d11b      	bne.n	2244 <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    220c:	790a      	ldrb	r2, [r1, #4]
    220e:	2a01      	cmp	r2, #1
    2210:	d01d      	beq.n	224e <uarte_nrfx_configure+0x5e>
    2212:	2a02      	cmp	r2, #2
    2214:	d01f      	beq.n	2256 <uarte_nrfx_configure+0x66>
    2216:	b9aa      	cbnz	r2, 2244 <uarte_nrfx_configure+0x54>
    2218:	4615      	mov	r5, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    221a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    221c:	6847      	ldr	r7, [r0, #4]
	switch (baudrate) {
    221e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2222:	683f      	ldr	r7, [r7, #0]
	switch (baudrate) {
    2224:	d06e      	beq.n	2304 <uarte_nrfx_configure+0x114>
    2226:	d833      	bhi.n	2290 <uarte_nrfx_configure+0xa0>
    2228:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    222c:	d06d      	beq.n	230a <uarte_nrfx_configure+0x11a>
    222e:	d81c      	bhi.n	226a <uarte_nrfx_configure+0x7a>
    2230:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2234:	d06b      	beq.n	230e <uarte_nrfx_configure+0x11e>
    2236:	d810      	bhi.n	225a <uarte_nrfx_configure+0x6a>
    2238:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    223c:	d06a      	beq.n	2314 <uarte_nrfx_configure+0x124>
    223e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2242:	d06a      	beq.n	231a <uarte_nrfx_configure+0x12a>
    2244:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2248:	e05b      	b.n	2302 <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
    224a:	2400      	movs	r4, #0
    224c:	e7d7      	b.n	21fe <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    224e:	f44f 7580 	mov.w	r5, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2252:	220e      	movs	r2, #14
    2254:	e7e1      	b.n	221a <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    2256:	2500      	movs	r5, #0
    2258:	e7fb      	b.n	2252 <uarte_nrfx_configure+0x62>
	switch (baudrate) {
    225a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    225e:	d05f      	beq.n	2320 <uarte_nrfx_configure+0x130>
    2260:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2264:	d1ee      	bne.n	2244 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2266:	4b39      	ldr	r3, [pc, #228]	; (234c <uarte_nrfx_configure+0x15c>)
    2268:	e03e      	b.n	22e8 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    226a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    226e:	d05a      	beq.n	2326 <uarte_nrfx_configure+0x136>
    2270:	d807      	bhi.n	2282 <uarte_nrfx_configure+0x92>
    2272:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2276:	d058      	beq.n	232a <uarte_nrfx_configure+0x13a>
    2278:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    227c:	d1e2      	bne.n	2244 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    227e:	4b34      	ldr	r3, [pc, #208]	; (2350 <uarte_nrfx_configure+0x160>)
    2280:	e032      	b.n	22e8 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    2282:	f647 2c12 	movw	ip, #31250	; 0x7a12
    2286:	4563      	cmp	r3, ip
    2288:	d1dc      	bne.n	2244 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    228a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    228e:	e02b      	b.n	22e8 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    2290:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2294:	d04b      	beq.n	232e <uarte_nrfx_configure+0x13e>
    2296:	d813      	bhi.n	22c0 <uarte_nrfx_configure+0xd0>
    2298:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    229c:	d04a      	beq.n	2334 <uarte_nrfx_configure+0x144>
    229e:	d809      	bhi.n	22b4 <uarte_nrfx_configure+0xc4>
    22a0:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    22a4:	4563      	cmp	r3, ip
    22a6:	d047      	beq.n	2338 <uarte_nrfx_configure+0x148>
    22a8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    22ac:	d1ca      	bne.n	2244 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    22ae:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    22b2:	e019      	b.n	22e8 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    22b4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    22b8:	d1c4      	bne.n	2244 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    22ba:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    22be:	e013      	b.n	22e8 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    22c0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    22c4:	d03b      	beq.n	233e <uarte_nrfx_configure+0x14e>
    22c6:	d809      	bhi.n	22dc <uarte_nrfx_configure+0xec>
    22c8:	f8df c098 	ldr.w	ip, [pc, #152]	; 2364 <uarte_nrfx_configure+0x174>
    22cc:	4563      	cmp	r3, ip
    22ce:	d039      	beq.n	2344 <uarte_nrfx_configure+0x154>
    22d0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    22d4:	d1b6      	bne.n	2244 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    22d6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    22da:	e005      	b.n	22e8 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    22dc:	f8df c088 	ldr.w	ip, [pc, #136]	; 2368 <uarte_nrfx_configure+0x178>
    22e0:	4563      	cmp	r3, ip
    22e2:	d1af      	bne.n	2244 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    22e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    22e8:	6900      	ldr	r0, [r0, #16]
NRF_STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type           * p_reg,
                                           nrf_uarte_config_t const * p_cfg)
{
    p_reg->CONFIG = (uint32_t)p_cfg->parity
#if defined(UARTE_CONFIG_STOP_Msk)
                    | (uint32_t)p_cfg->stop
    22ea:	4322      	orrs	r2, r4
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    22ec:	4335      	orrs	r5, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    22ee:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    22f2:	432a      	orrs	r2, r5
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    22f4:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    22f6:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
    22fa:	c903      	ldmia	r1, {r0, r1}
    22fc:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2300:	2000      	movs	r0, #0
}
    2302:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2304:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2308:	e7ee      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    230a:	4b12      	ldr	r3, [pc, #72]	; (2354 <uarte_nrfx_configure+0x164>)
    230c:	e7ec      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    230e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2312:	e7e9      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
    2314:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2318:	e7e6      	b.n	22e8 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    231a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    231e:	e7e3      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2320:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2324:	e7e0      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2326:	4b0c      	ldr	r3, [pc, #48]	; (2358 <uarte_nrfx_configure+0x168>)
    2328:	e7de      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    232a:	4b0c      	ldr	r3, [pc, #48]	; (235c <uarte_nrfx_configure+0x16c>)
    232c:	e7dc      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    232e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2332:	e7d9      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2334:	4b0a      	ldr	r3, [pc, #40]	; (2360 <uarte_nrfx_configure+0x170>)
    2336:	e7d7      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2338:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    233c:	e7d4      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    233e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2342:	e7d1      	b.n	22e8 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2344:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2348:	e7ce      	b.n	22e8 <uarte_nrfx_configure+0xf8>
    234a:	bf00      	nop
    234c:	0013b000 	.word	0x0013b000
    2350:	004ea000 	.word	0x004ea000
    2354:	00275000 	.word	0x00275000
    2358:	0075c000 	.word	0x0075c000
    235c:	003af000 	.word	0x003af000
    2360:	013a9000 	.word	0x013a9000
    2364:	0003d090 	.word	0x0003d090
    2368:	000f4240 	.word	0x000f4240

0000236c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    236c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2370:	4607      	mov	r7, r0
    2372:	2200      	movs	r2, #0
    2374:	2101      	movs	r1, #1
    2376:	2008      	movs	r0, #8
    2378:	f7ff f830 	bl	13dc <z_arm_irq_priority_set>
    237c:	2008      	movs	r0, #8
    237e:	f7ff f80f 	bl	13a0 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2382:	2100      	movs	r1, #0
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    2384:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    2388:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    238a:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    238e:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2392:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2396:	4648      	mov	r0, r9
	data->dev = dev;
    2398:	6037      	str	r7, [r6, #0]
    239a:	aa01      	add	r2, sp, #4
    239c:	f002 fd1d 	bl	4dda <pinctrl_lookup_state>
	if (ret < 0) {
    23a0:	1e05      	subs	r5, r0, #0
    23a2:	db50      	blt.n	2446 <uarte_0_init+0xda>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    23a4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    23a6:	f8d9 2000 	ldr.w	r2, [r9]
    23aa:	7919      	ldrb	r1, [r3, #4]
    23ac:	6818      	ldr	r0, [r3, #0]
    23ae:	f002 fd31 	bl	4e14 <pinctrl_configure_pins>
	if (err < 0) {
    23b2:	1e05      	subs	r5, r0, #0
    23b4:	db47      	blt.n	2446 <uarte_0_init+0xda>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    23b6:	4638      	mov	r0, r7
    23b8:	1d31      	adds	r1, r6, #4
    23ba:	f7ff ff19 	bl	21f0 <uarte_nrfx_configure>
	if (err) {
    23be:	4605      	mov	r5, r0
    23c0:	2800      	cmp	r0, #0
    23c2:	d140      	bne.n	2446 <uarte_0_init+0xda>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    23c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    23c8:	0799      	lsls	r1, r3, #30
    23ca:	d513      	bpl.n	23f4 <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    23cc:	f106 0012 	add.w	r0, r6, #18
    23d0:	f000 fd6e 	bl	2eb0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    23d4:	4b1f      	ldr	r3, [pc, #124]	; (2454 <uarte_0_init+0xe8>)
    23d6:	4298      	cmp	r0, r3
    23d8:	d139      	bne.n	244e <uarte_0_init+0xe2>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    23da:	7cb3      	ldrb	r3, [r6, #18]
    23dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    23e0:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    23e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    23e8:	2301      	movs	r3, #1
    23ea:	7cb2      	ldrb	r2, [r6, #18]
    23ec:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    23ee:	4a1a      	ldr	r2, [pc, #104]	; (2458 <uarte_0_init+0xec>)
    23f0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    23f4:	2308      	movs	r3, #8
    23f6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    23fa:	f898 3008 	ldrb.w	r3, [r8, #8]
    23fe:	b95b      	cbnz	r3, 2418 <uarte_0_init+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2400:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2404:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2408:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    240c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2410:	2301      	movs	r3, #1
    2412:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2416:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2418:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    241c:	3610      	adds	r6, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    241e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2420:	bf5c      	itt	pl
    2422:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2426:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    242a:	06db      	lsls	r3, r3, #27
    242c:	bf44      	itt	mi
    242e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2432:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    2436:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2438:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    243c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2440:	2301      	movs	r3, #1
    2442:	60a3      	str	r3, [r4, #8]
    2444:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2446:	4628      	mov	r0, r5
    2448:	b003      	add	sp, #12
    244a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    244e:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    2452:	e7f8      	b.n	2446 <uarte_0_init+0xda>
    2454:	0bad0000 	.word	0x0bad0000
    2458:	50017000 	.word	0x50017000

0000245c <uarte_nrfx_poll_out>:
{
    245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    245e:	4606      	mov	r6, r0
    2460:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    2462:	6904      	ldr	r4, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2464:	f002 fe65 	bl	5132 <k_is_in_isr>
    2468:	b910      	cbnz	r0, 2470 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    246a:	4b2d      	ldr	r3, [pc, #180]	; (2520 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
    246c:	781b      	ldrb	r3, [r3, #0]
    246e:	b983      	cbnz	r3, 2492 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2470:	f04f 0320 	mov.w	r3, #32
    2474:	f3ef 8511 	mrs	r5, BASEPRI
    2478:	f383 8812 	msr	BASEPRI_MAX, r3
    247c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2480:	6870      	ldr	r0, [r6, #4]
    2482:	f002 fc99 	bl	4db8 <is_tx_ready.isra.0>
    2486:	bb28      	cbnz	r0, 24d4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2488:	f385 8811 	msr	BASEPRI, r5
    248c:	f3bf 8f6f 	isb	sy
}
    2490:	e7ee      	b.n	2470 <uarte_nrfx_poll_out+0x14>
{
    2492:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2494:	6870      	ldr	r0, [r6, #4]
    2496:	f002 fc8f 	bl	4db8 <is_tx_ready.isra.0>
    249a:	b970      	cbnz	r0, 24ba <uarte_nrfx_poll_out+0x5e>
    249c:	2001      	movs	r0, #1
    249e:	f002 fd6e 	bl	4f7e <nrfx_busy_wait>
    24a2:	3d01      	subs	r5, #1
    24a4:	d1f6      	bne.n	2494 <uarte_nrfx_poll_out+0x38>
    24a6:	2100      	movs	r1, #0
    24a8:	2021      	movs	r0, #33	; 0x21
    24aa:	f001 fe25 	bl	40f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    24ae:	e7f0      	b.n	2492 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    24b0:	f385 8811 	msr	BASEPRI, r5
    24b4:	f3bf 8f6f 	isb	sy
}
    24b8:	e7f5      	b.n	24a6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    24ba:	f04f 0320 	mov.w	r3, #32
    24be:	f3ef 8511 	mrs	r5, BASEPRI
    24c2:	f383 8812 	msr	BASEPRI_MAX, r3
    24c6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    24ca:	6870      	ldr	r0, [r6, #4]
    24cc:	f002 fc74 	bl	4db8 <is_tx_ready.isra.0>
    24d0:	2800      	cmp	r0, #0
    24d2:	d0ed      	beq.n	24b0 <uarte_nrfx_poll_out+0x54>
    p_reg->TXD.MAXCNT = length;
    24d4:	2201      	movs	r2, #1
	data->char_out = c;
    24d6:	f804 7f10 	strb.w	r7, [r4, #16]!
	const struct uarte_nrfx_config *config = dev->config;
    24da:	6871      	ldr	r1, [r6, #4]
	return config->uarte_regs;
    24dc:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    24de:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    24e2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24e6:	2200      	movs	r2, #0
    24e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    24ec:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    24f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    24f4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    24f8:	684a      	ldr	r2, [r1, #4]
    24fa:	06d2      	lsls	r2, r2, #27
    24fc:	d508      	bpl.n	2510 <uarte_nrfx_poll_out+0xb4>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    24fe:	2108      	movs	r1, #8
	return config->uarte_regs;
    2500:	6872      	ldr	r2, [r6, #4]
    2502:	6812      	ldr	r2, [r2, #0]
    2504:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2508:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    250c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2510:	2201      	movs	r2, #1
    2512:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2514:	f385 8811 	msr	BASEPRI, r5
    2518:	f3bf 8f6f 	isb	sy
}
    251c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    251e:	bf00      	nop
    2520:	20000b19 	.word	0x20000b19

00002524 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2524:	4919      	ldr	r1, [pc, #100]	; (258c <sys_clock_timeout_handler+0x68>)
{
    2526:	b570      	push	{r4, r5, r6, lr}
    2528:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    252a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    252e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2530:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2534:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2538:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    253a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    253e:	f04f 0500 	mov.w	r5, #0
    2542:	d20a      	bcs.n	255a <sys_clock_timeout_handler+0x36>
		return true;
    2544:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2546:	4b12      	ldr	r3, [pc, #72]	; (2590 <sys_clock_timeout_handler+0x6c>)
    2548:	6819      	ldr	r1, [r3, #0]
    254a:	060a      	lsls	r2, r1, #24
    254c:	0a0b      	lsrs	r3, r1, #8
    254e:	1992      	adds	r2, r2, r6
    2550:	4910      	ldr	r1, [pc, #64]	; (2594 <sys_clock_timeout_handler+0x70>)
    2552:	f143 0300 	adc.w	r3, r3, #0
    2556:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    255a:	f001 ff2d 	bl	43b8 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    255e:	00a3      	lsls	r3, r4, #2
    2560:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    2564:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2568:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    256c:	42b2      	cmp	r2, r6
    256e:	d10b      	bne.n	2588 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2570:	b91d      	cbnz	r5, 257a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    2572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2576:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    257a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    257e:	4b06      	ldr	r3, [pc, #24]	; (2598 <sys_clock_timeout_handler+0x74>)
    2580:	fa00 f404 	lsl.w	r4, r0, r4
    2584:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2588:	bd70      	pop	{r4, r5, r6, pc}
    258a:	bf00      	nop
    258c:	200001a8 	.word	0x200001a8
    2590:	200008fc 	.word	0x200008fc
    2594:	20000190 	.word	0x20000190
    2598:	50015000 	.word	0x50015000

0000259c <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    259c:	2301      	movs	r3, #1
    259e:	4083      	lsls	r3, r0
{
    25a0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    25a2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25a4:	4a0d      	ldr	r2, [pc, #52]	; (25dc <compare_int_lock+0x40>)
    25a6:	e8d2 1fef 	ldaex	r1, [r2]
    25aa:	ea01 0c04 	and.w	ip, r1, r4
    25ae:	e8c2 cfee 	stlex	lr, ip, [r2]
    25b2:	f1be 0f00 	cmp.w	lr, #0
    25b6:	d1f6      	bne.n	25a6 <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    25bc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    25c0:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    25c4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    25c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25cc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    25d0:	420b      	tst	r3, r1
}
    25d2:	bf14      	ite	ne
    25d4:	2001      	movne	r0, #1
    25d6:	2000      	moveq	r0, #0
    25d8:	bd10      	pop	{r4, pc}
    25da:	bf00      	nop
    25dc:	200008f8 	.word	0x200008f8

000025e0 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    25e0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    25e2:	4a0e      	ldr	r2, [pc, #56]	; (261c <compare_int_unlock.part.0+0x3c>)
    25e4:	4083      	lsls	r3, r0
    25e6:	e8d2 1fef 	ldaex	r1, [r2]
    25ea:	4319      	orrs	r1, r3
    25ec:	e8c2 1fec 	stlex	ip, r1, [r2]
    25f0:	f1bc 0f00 	cmp.w	ip, #0
    25f4:	d1f7      	bne.n	25e6 <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    25fa:	4a09      	ldr	r2, [pc, #36]	; (2620 <compare_int_unlock.part.0+0x40>)
    25fc:	4083      	lsls	r3, r0
    25fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2602:	4b08      	ldr	r3, [pc, #32]	; (2624 <compare_int_unlock.part.0+0x44>)
    2604:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2608:	fa23 f000 	lsr.w	r0, r3, r0
    260c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    260e:	bf42      	ittt	mi
    2610:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    2614:	4b04      	ldrmi	r3, [pc, #16]	; (2628 <compare_int_unlock.part.0+0x48>)
    2616:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    261a:	4770      	bx	lr
    261c:	200008f8 	.word	0x200008f8
    2620:	50015000 	.word	0x50015000
    2624:	200008f4 	.word	0x200008f4
    2628:	e000e100 	.word	0xe000e100

0000262c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    262c:	4b0d      	ldr	r3, [pc, #52]	; (2664 <z_nrf_rtc_timer_read+0x38>)
    262e:	681b      	ldr	r3, [r3, #0]
    2630:	0a19      	lsrs	r1, r3, #8
    2632:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2634:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2638:	4b0b      	ldr	r3, [pc, #44]	; (2668 <z_nrf_rtc_timer_read+0x3c>)
    263a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    263e:	18c0      	adds	r0, r0, r3
    2640:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2648:	d20a      	bcs.n	2660 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    264a:	4b08      	ldr	r3, [pc, #32]	; (266c <z_nrf_rtc_timer_read+0x40>)
    264c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2650:	4299      	cmp	r1, r3
    2652:	bf08      	it	eq
    2654:	4290      	cmpeq	r0, r2
    2656:	d203      	bcs.n	2660 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2658:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    265c:	f141 0100 	adc.w	r1, r1, #0
}
    2660:	4770      	bx	lr
    2662:	bf00      	nop
    2664:	200008fc 	.word	0x200008fc
    2668:	50015000 	.word	0x50015000
    266c:	20000190 	.word	0x20000190

00002670 <compare_set>:
{
    2670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2674:	4616      	mov	r6, r2
    2676:	461f      	mov	r7, r3
    2678:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    267a:	f7ff ff8f 	bl	259c <compare_int_lock>
    267e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2680:	f7ff ffd4 	bl	262c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2684:	42b9      	cmp	r1, r7
    2686:	bf08      	it	eq
    2688:	42b0      	cmpeq	r0, r6
    268a:	d27b      	bcs.n	2784 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
    268c:	2300      	movs	r3, #0
    268e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2692:	ebb6 0800 	subs.w	r8, r6, r0
    2696:	eb67 0901 	sbc.w	r9, r7, r1
    269a:	454b      	cmp	r3, r9
    269c:	bf08      	it	eq
    269e:	4542      	cmpeq	r2, r8
    26a0:	d37d      	bcc.n	279e <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
    26a2:	4b40      	ldr	r3, [pc, #256]	; (27a4 <compare_set+0x134>)
    26a4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    26a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    26ac:	429f      	cmp	r7, r3
    26ae:	bf08      	it	eq
    26b0:	4296      	cmpeq	r6, r2
    26b2:	d051      	beq.n	2758 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    26b4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    26b8:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    26bc:	4614      	mov	r4, r2
    26be:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    26c2:	f105 0850 	add.w	r8, r5, #80	; 0x50
    26c6:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    26ca:	ea4f 0888 	mov.w	r8, r8, lsl #2
    26ce:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26d2:	fa1f f888 	uxth.w	r8, r8
    26d6:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    26da:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    26de:	4b32      	ldr	r3, [pc, #200]	; (27a8 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26e0:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    26e4:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
    26e8:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    26ec:	eba0 000a 	sub.w	r0, r0, sl
    26f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26f4:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    26f8:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    26fa:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    26fe:	d105      	bne.n	270c <compare_set+0x9c>
    2700:	9201      	str	r2, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    2702:	2013      	movs	r0, #19
    2704:	f002 fe16 	bl	5334 <z_impl_k_busy_wait>
    2708:	4b27      	ldr	r3, [pc, #156]	; (27a8 <compare_set+0x138>)
    270a:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    270c:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    2710:	eba4 000c 	sub.w	r0, r4, ip
    2714:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2718:	2100      	movs	r1, #0
			cc_val = now + 2;
    271a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    271e:	bf88      	it	hi
    2720:	4664      	movhi	r4, ip
    2722:	f8c8 1000 	str.w	r1, [r8]
    2726:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    272a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    272e:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    2732:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2736:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    273a:	4582      	cmp	sl, r0
    273c:	d006      	beq.n	274c <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
    273e:	1a20      	subs	r0, r4, r0
    2740:	3802      	subs	r0, #2
    2742:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2746:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    274a:	d819      	bhi.n	2780 <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
    274c:	1aa4      	subs	r4, r4, r2
    274e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    2752:	1932      	adds	r2, r6, r4
    2754:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    2758:	4c12      	ldr	r4, [pc, #72]	; (27a4 <compare_set+0x134>)
    275a:	0129      	lsls	r1, r5, #4
    275c:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    2760:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    2764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
    2766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
    2768:	5062      	str	r2, [r4, r1]
	return ret;
    276a:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
    276c:	6043      	str	r3, [r0, #4]
	if (key) {
    276e:	9b00      	ldr	r3, [sp, #0]
    2770:	b113      	cbz	r3, 2778 <compare_set+0x108>
    2772:	4628      	mov	r0, r5
    2774:	f7ff ff34 	bl	25e0 <compare_int_unlock.part.0>
}
    2778:	4620      	mov	r0, r4
    277a:	b003      	add	sp, #12
    277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2780:	4620      	mov	r0, r4
    2782:	e7b1      	b.n	26e8 <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
    2784:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2786:	4a09      	ldr	r2, [pc, #36]	; (27ac <compare_set+0x13c>)
    2788:	40ab      	lsls	r3, r5
    278a:	e8d2 1fef 	ldaex	r1, [r2]
    278e:	4319      	orrs	r1, r3
    2790:	e8c2 1fe0 	stlex	r0, r1, [r2]
    2794:	2800      	cmp	r0, #0
    2796:	d1f8      	bne.n	278a <compare_set+0x11a>
    2798:	4632      	mov	r2, r6
    279a:	463b      	mov	r3, r7
    279c:	e7dc      	b.n	2758 <compare_set+0xe8>
			return -EINVAL;
    279e:	f06f 0415 	mvn.w	r4, #21
    27a2:	e7e4      	b.n	276e <compare_set+0xfe>
    27a4:	20000198 	.word	0x20000198
    27a8:	50015000 	.word	0x50015000
    27ac:	200008f4 	.word	0x200008f4

000027b0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    27b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    27b2:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    27b4:	f04f 30ff 	mov.w	r0, #4294967295
    27b8:	f04f 31ff 	mov.w	r1, #4294967295
    27bc:	4d16      	ldr	r5, [pc, #88]	; (2818 <sys_clock_driver_init+0x68>)
    27be:	4b17      	ldr	r3, [pc, #92]	; (281c <sys_clock_driver_init+0x6c>)
    27c0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    27c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    27c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    27cc:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27d2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    27d6:	4b12      	ldr	r3, [pc, #72]	; (2820 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    27d8:	2101      	movs	r1, #1
    27da:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    27de:	2015      	movs	r0, #21
    27e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    27e4:	4622      	mov	r2, r4
    27e6:	f7fe fdf9 	bl	13dc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    27ea:	2015      	movs	r0, #21
    27ec:	f7fe fdd8 	bl	13a0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    27f0:	2301      	movs	r3, #1
    27f2:	4a0c      	ldr	r2, [pc, #48]	; (2824 <sys_clock_driver_init+0x74>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    27f4:	4620      	mov	r0, r4
    27f6:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    27f8:	4a0b      	ldr	r2, [pc, #44]	; (2828 <sys_clock_driver_init+0x78>)
    27fa:	602b      	str	r3, [r5, #0]
    27fc:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    27fe:	4b0b      	ldr	r3, [pc, #44]	; (282c <sys_clock_driver_init+0x7c>)
    2800:	4a0b      	ldr	r2, [pc, #44]	; (2830 <sys_clock_driver_init+0x80>)
    2802:	9300      	str	r3, [sp, #0]
    2804:	9401      	str	r4, [sp, #4]
    2806:	2300      	movs	r3, #0
    2808:	f7ff ff32 	bl	2670 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    280c:	4630      	mov	r0, r6
    280e:	f7ff fae1 	bl	1dd4 <z_nrf_clock_control_lf_on>

	return 0;
}
    2812:	4620      	mov	r0, r4
    2814:	b002      	add	sp, #8
    2816:	bd70      	pop	{r4, r5, r6, pc}
    2818:	50015000 	.word	0x50015000
    281c:	20000198 	.word	0x20000198
    2820:	e000e100 	.word	0xe000e100
    2824:	50015008 	.word	0x50015008
    2828:	200008f8 	.word	0x200008f8
    282c:	00002525 	.word	0x00002525
    2830:	007fffff 	.word	0x007fffff

00002834 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    2834:	4b33      	ldr	r3, [pc, #204]	; (2904 <rtc_nrf_isr+0xd0>)
{
    2836:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    283a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    283e:	079a      	lsls	r2, r3, #30
    2840:	d509      	bpl.n	2856 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2842:	4b31      	ldr	r3, [pc, #196]	; (2908 <rtc_nrf_isr+0xd4>)
    2844:	681a      	ldr	r2, [r3, #0]
    2846:	b132      	cbz	r2, 2856 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2848:	2200      	movs	r2, #0
    284a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    284c:	4a2f      	ldr	r2, [pc, #188]	; (290c <rtc_nrf_isr+0xd8>)
    284e:	681b      	ldr	r3, [r3, #0]
    2850:	6813      	ldr	r3, [r2, #0]
    2852:	3301      	adds	r3, #1
    2854:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2856:	f04f 0320 	mov.w	r3, #32
    285a:	f3ef 8211 	mrs	r2, BASEPRI
    285e:	f383 8812 	msr	BASEPRI_MAX, r3
    2862:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2866:	4b27      	ldr	r3, [pc, #156]	; (2904 <rtc_nrf_isr+0xd0>)
    2868:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    286c:	03db      	lsls	r3, r3, #15
    286e:	d50e      	bpl.n	288e <rtc_nrf_isr+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2870:	4b27      	ldr	r3, [pc, #156]	; (2910 <rtc_nrf_isr+0xdc>)
    2872:	e8d3 1fef 	ldaex	r1, [r3]
    2876:	f021 0001 	bic.w	r0, r1, #1
    287a:	e8c3 0fe4 	stlex	r4, r0, [r3]
    287e:	2c00      	cmp	r4, #0
    2880:	d1f7      	bne.n	2872 <rtc_nrf_isr+0x3e>
    2882:	4b24      	ldr	r3, [pc, #144]	; (2914 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2884:	2900      	cmp	r1, #0
    2886:	d136      	bne.n	28f6 <rtc_nrf_isr+0xc2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2888:	6819      	ldr	r1, [r3, #0]
		if (result) {
    288a:	2900      	cmp	r1, #0
    288c:	d133      	bne.n	28f6 <rtc_nrf_isr+0xc2>
{
    288e:	2300      	movs	r3, #0
	__asm__ volatile(
    2890:	f382 8811 	msr	BASEPRI, r2
    2894:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    2898:	b353      	cbz	r3, 28f0 <rtc_nrf_isr+0xbc>
		curr_time = z_nrf_rtc_timer_read();
    289a:	f7ff fec7 	bl	262c <z_nrf_rtc_timer_read>
    289e:	4604      	mov	r4, r0
	__asm__ volatile(
    28a0:	f04f 0320 	mov.w	r3, #32
    28a4:	f3ef 8011 	mrs	r0, BASEPRI
    28a8:	f383 8812 	msr	BASEPRI_MAX, r3
    28ac:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    28b0:	4b19      	ldr	r3, [pc, #100]	; (2918 <rtc_nrf_isr+0xe4>)
    28b2:	2200      	movs	r2, #0
    28b4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    28b8:	4549      	cmp	r1, r9
    28ba:	bf08      	it	eq
    28bc:	4544      	cmpeq	r4, r8
    28be:	d31f      	bcc.n	2900 <rtc_nrf_isr+0xcc>
			user_context = cc_data[chan].user_context;
    28c0:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    28c4:	f04f 34ff 	mov.w	r4, #4294967295
    28c8:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
    28cc:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    28ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    28d2:	e9c3 4502 	strd	r4, r5, [r3, #8]
    28d6:	4b0b      	ldr	r3, [pc, #44]	; (2904 <rtc_nrf_isr+0xd0>)
    28d8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    28dc:	f380 8811 	msr	BASEPRI, r0
    28e0:	f3bf 8f6f 	isb	sy
		if (handler) {
    28e4:	b121      	cbz	r1, 28f0 <rtc_nrf_isr+0xbc>
			handler(chan, expire_time, user_context);
    28e6:	4642      	mov	r2, r8
    28e8:	464b      	mov	r3, r9
    28ea:	2000      	movs	r0, #0
    28ec:	9600      	str	r6, [sp, #0]
    28ee:	4788      	blx	r1
}
    28f0:	b002      	add	sp, #8
    28f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28f6:	2100      	movs	r1, #0
    28f8:	6019      	str	r1, [r3, #0]
    28fa:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    28fc:	2301      	movs	r3, #1
}
    28fe:	e7c7      	b.n	2890 <rtc_nrf_isr+0x5c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2900:	4611      	mov	r1, r2
    2902:	e7eb      	b.n	28dc <rtc_nrf_isr+0xa8>
    2904:	50015000 	.word	0x50015000
    2908:	50015104 	.word	0x50015104
    290c:	200008fc 	.word	0x200008fc
    2910:	200008f4 	.word	0x200008f4
    2914:	50015140 	.word	0x50015140
    2918:	20000198 	.word	0x20000198

0000291c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    291c:	1c43      	adds	r3, r0, #1
{
    291e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2920:	d020      	beq.n	2964 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2922:	2801      	cmp	r0, #1
    2924:	dd20      	ble.n	2968 <sys_clock_set_timeout+0x4c>
    2926:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    292a:	da1f      	bge.n	296c <sys_clock_set_timeout+0x50>
    292c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    292e:	f7ff fe7d 	bl	262c <z_nrf_rtc_timer_read>
    2932:	4b0f      	ldr	r3, [pc, #60]	; (2970 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2934:	490f      	ldr	r1, [pc, #60]	; (2974 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2936:	e9d3 2300 	ldrd	r2, r3, [r3]
    293a:	1a80      	subs	r0, r0, r2
		ticks = 0;
    293c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2940:	bf28      	it	cs
    2942:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2944:	3001      	adds	r0, #1
    2946:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    2948:	480b      	ldr	r0, [pc, #44]	; (2978 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    294a:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    294c:	4284      	cmp	r4, r0
    294e:	bf28      	it	cs
    2950:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2952:	2000      	movs	r0, #0
    2954:	1912      	adds	r2, r2, r4
    2956:	9001      	str	r0, [sp, #4]
    2958:	f143 0300 	adc.w	r3, r3, #0
    295c:	f7ff fe88 	bl	2670 <compare_set>
}
    2960:	b002      	add	sp, #8
    2962:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2964:	4804      	ldr	r0, [pc, #16]	; (2978 <sys_clock_set_timeout+0x5c>)
    2966:	e7e1      	b.n	292c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2968:	2400      	movs	r4, #0
    296a:	e7e0      	b.n	292e <sys_clock_set_timeout+0x12>
    296c:	4c02      	ldr	r4, [pc, #8]	; (2978 <sys_clock_set_timeout+0x5c>)
    296e:	e7de      	b.n	292e <sys_clock_set_timeout+0x12>
    2970:	200001a8 	.word	0x200001a8
    2974:	00002525 	.word	0x00002525
    2978:	007fffff 	.word	0x007fffff

0000297c <sys_clock_elapsed>:
{
    297c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    297e:	f7ff fe55 	bl	262c <z_nrf_rtc_timer_read>
    2982:	4b02      	ldr	r3, [pc, #8]	; (298c <sys_clock_elapsed+0x10>)
    2984:	681b      	ldr	r3, [r3, #0]
}
    2986:	1ac0      	subs	r0, r0, r3
    2988:	bd08      	pop	{r3, pc}
    298a:	bf00      	nop
    298c:	200001a8 	.word	0x200001a8

00002990 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    2990:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
    2994:	b570      	push	{r4, r5, r6, lr}
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    2996:	2b00      	cmp	r3, #0
        case 1: return NRF_P1;
    2998:	4e0f      	ldr	r6, [pc, #60]	; (29d8 <nrf_pin_configure+0x48>)
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    299a:	bf0e      	itee	eq
    299c:	4615      	moveq	r5, r2
    299e:	2501      	movne	r5, #1
    29a0:	2100      	movne	r1, #0
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    29a2:	f010 0f20 	tst.w	r0, #32
        case 1: return NRF_P1;
    29a6:	4b0d      	ldr	r3, [pc, #52]	; (29dc <nrf_pin_configure+0x4c>)
    29a8:	bf18      	it	ne
    29aa:	4633      	movne	r3, r6
    *p_pin = pin_number & 0x1F;
    29ac:	f000 041f 	and.w	r4, r0, #31
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    29b0:	f3c0 1281 	ubfx	r2, r0, #6, #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    29b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    29b8:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    29bc:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    29c0:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    29c4:	430a      	orrs	r2, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    29c6:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    29ca:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    29ce:	4322      	orrs	r2, r4
    reg->PIN_CNF[pin_number] = cnf;
    29d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    29d4:	bd70      	pop	{r4, r5, r6, pc}
    29d6:	bf00      	nop
    29d8:	50842800 	.word	0x50842800
    29dc:	50842500 	.word	0x50842500

000029e0 <nrf_gpio_pin_clear>:
        case 1: return NRF_P1;
    29e0:	4b06      	ldr	r3, [pc, #24]	; (29fc <nrf_gpio_pin_clear+0x1c>)
    29e2:	4907      	ldr	r1, [pc, #28]	; (2a00 <nrf_gpio_pin_clear+0x20>)
    *p_pin = pin_number & 0x1F;
    29e4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    29e8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    29ea:	2801      	cmp	r0, #1
    29ec:	bf14      	ite	ne
    29ee:	4618      	movne	r0, r3
    29f0:	4608      	moveq	r0, r1
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    29f2:	2301      	movs	r3, #1
    29f4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    29f6:	60c3      	str	r3, [r0, #12]
}
    29f8:	4770      	bx	lr
    29fa:	bf00      	nop
    29fc:	50842500 	.word	0x50842500
    2a00:	50842800 	.word	0x50842800

00002a04 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    2a04:	4b06      	ldr	r3, [pc, #24]	; (2a20 <nrf_gpio_pin_set+0x1c>)
    2a06:	4907      	ldr	r1, [pc, #28]	; (2a24 <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
    2a08:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2a0c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    2a0e:	2801      	cmp	r0, #1
    2a10:	bf14      	ite	ne
    2a12:	4618      	movne	r0, r3
    2a14:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a16:	2301      	movs	r3, #1
    2a18:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2a1a:	6083      	str	r3, [r0, #8]
}
    2a1c:	4770      	bx	lr
    2a1e:	bf00      	nop
    2a20:	50842500 	.word	0x50842500
    2a24:	50842800 	.word	0x50842800

00002a28 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2a28:	4b06      	ldr	r3, [pc, #24]	; (2a44 <nrf53_errata_42+0x1c>)
    2a2a:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2a2c:	3304      	adds	r3, #4
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2a2e:	2a07      	cmp	r2, #7
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2a30:	681b      	ldr	r3, [r3, #0]
                if (var1 == 0x07)
    2a32:	d105      	bne.n	2a40 <nrf53_errata_42+0x18>
                {
                    switch(var2)
    2a34:	3b02      	subs	r3, #2
    2a36:	2b03      	cmp	r3, #3
    2a38:	d802      	bhi.n	2a40 <nrf53_errata_42+0x18>
    2a3a:	4a03      	ldr	r2, [pc, #12]	; (2a48 <nrf53_errata_42+0x20>)
    2a3c:	5cd0      	ldrb	r0, [r2, r3]
    2a3e:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2a40:	2000      	movs	r0, #0
    #endif
}
    2a42:	4770      	bx	lr
    2a44:	00ff0130 	.word	0x00ff0130
    2a48:	000058c8 	.word	0x000058c8

00002a4c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2a4c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a50:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2a54:	4b03      	ldr	r3, [pc, #12]	; (2a64 <SystemCoreClockUpdate+0x18>)
    2a56:	f002 0203 	and.w	r2, r2, #3
    2a5a:	40d3      	lsrs	r3, r2
    2a5c:	4a02      	ldr	r2, [pc, #8]	; (2a68 <SystemCoreClockUpdate+0x1c>)
    2a5e:	6013      	str	r3, [r2, #0]
#endif
}
    2a60:	4770      	bx	lr
    2a62:	bf00      	nop
    2a64:	07a12000 	.word	0x07a12000
    2a68:	20000040 	.word	0x20000040

00002a6c <SystemInit>:

void SystemInit(void)
{
    2a6c:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2a6e:	f7ff ffdb 	bl	2a28 <nrf53_errata_42>
    2a72:	b148      	cbz	r0, 2a88 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2a74:	4b3a      	ldr	r3, [pc, #232]	; (2b60 <SystemInit+0xf4>)
    2a76:	681a      	ldr	r2, [r3, #0]
    2a78:	b932      	cbnz	r2, 2a88 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2a7a:	210d      	movs	r1, #13
    2a7c:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2a7e:	2101      	movs	r1, #1
    2a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    2a84:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2a86:	601a      	str	r2, [r3, #0]
{
    2a88:	2200      	movs	r2, #0
    2a8a:	00d3      	lsls	r3, r2, #3
    2a8c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2a90:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2a94:	3101      	adds	r1, #1
    2a96:	d007      	beq.n	2aa8 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2a98:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2a9c:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2a9e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2aa2:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2aa4:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2aa6:	d1f0      	bne.n	2a8a <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2aa8:	f7ff ffbe 	bl	2a28 <nrf53_errata_42>
    2aac:	2800      	cmp	r0, #0
    2aae:	d150      	bne.n	2b52 <SystemInit+0xe6>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2ab0:	f7ff ffba 	bl	2a28 <nrf53_errata_42>
    2ab4:	b138      	cbz	r0, 2ac6 <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2ab6:	4b2b      	ldr	r3, [pc, #172]	; (2b64 <SystemInit+0xf8>)
    2ab8:	4a2b      	ldr	r2, [pc, #172]	; (2b68 <SystemInit+0xfc>)
    2aba:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2abc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ac0:	2201      	movs	r2, #1
    2ac2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2ac6:	4b29      	ldr	r3, [pc, #164]	; (2b6c <SystemInit+0x100>)
    2ac8:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2aca:	3304      	adds	r3, #4
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2acc:	2a07      	cmp	r2, #7
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2ace:	681b      	ldr	r3, [r3, #0]
                if (var1 == 0x07)
    2ad0:	d108      	bne.n	2ae4 <SystemInit+0x78>
                {
                    switch(var2)
    2ad2:	3b02      	subs	r3, #2
    2ad4:	2b03      	cmp	r3, #3
    2ad6:	d805      	bhi.n	2ae4 <SystemInit+0x78>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2ad8:	4a25      	ldr	r2, [pc, #148]	; (2b70 <SystemInit+0x104>)
    2ada:	5cd3      	ldrb	r3, [r2, r3]
    2adc:	b113      	cbz	r3, 2ae4 <SystemInit+0x78>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2ade:	2200      	movs	r2, #0
    2ae0:	4b24      	ldr	r3, [pc, #144]	; (2b74 <SystemInit+0x108>)
    2ae2:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2ae4:	f7ff ffa0 	bl	2a28 <nrf53_errata_42>
    2ae8:	b150      	cbz	r0, 2b00 <SystemInit+0x94>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2aea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2aee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2af2:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2af4:	bf42      	ittt	mi
    2af6:	2200      	movmi	r2, #0
    2af8:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2afc:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2b00:	4b1a      	ldr	r3, [pc, #104]	; (2b6c <SystemInit+0x100>)
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2b02:	4a1d      	ldr	r2, [pc, #116]	; (2b78 <SystemInit+0x10c>)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2b04:	681b      	ldr	r3, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2b06:	6812      	ldr	r2, [r2, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2b08:	2b07      	cmp	r3, #7
    2b0a:	d109      	bne.n	2b20 <SystemInit+0xb4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2b0c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b10:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2b14:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2b16:	bf44      	itt	mi
    2b18:	f06f 0201 	mvnmi.w	r2, #1
    2b1c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2b20:	f7ff ff82 	bl	2a28 <nrf53_errata_42>
    2b24:	b110      	cbz	r0, 2b2c <SystemInit+0xc0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2b26:	2265      	movs	r2, #101	; 0x65
    2b28:	4b14      	ldr	r3, [pc, #80]	; (2b7c <SystemInit+0x110>)
    2b2a:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2b2c:	4a14      	ldr	r2, [pc, #80]	; (2b80 <SystemInit+0x114>)
    2b2e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2b32:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2b3a:	4a12      	ldr	r2, [pc, #72]	; (2b84 <SystemInit+0x118>)
    2b3c:	4b12      	ldr	r3, [pc, #72]	; (2b88 <SystemInit+0x11c>)
    2b3e:	6811      	ldr	r1, [r2, #0]
    2b40:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2b44:	69d2      	ldr	r2, [r2, #28]
    2b46:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    2b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    2b4e:	f7ff bf7d 	b.w	2a4c <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2b52:	2229      	movs	r2, #41	; 0x29
    2b54:	4b09      	ldr	r3, [pc, #36]	; (2b7c <SystemInit+0x110>)
    2b56:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2b58:	2203      	movs	r2, #3
    2b5a:	631a      	str	r2, [r3, #48]	; 0x30
    2b5c:	e7a8      	b.n	2ab0 <SystemInit+0x44>
    2b5e:	bf00      	nop
    2b60:	50004a20 	.word	0x50004a20
    2b64:	50039530 	.word	0x50039530
    2b68:	beef0044 	.word	0xbeef0044
    2b6c:	00ff0130 	.word	0x00ff0130
    2b70:	000058cc 	.word	0x000058cc
    2b74:	5003254c 	.word	0x5003254c
    2b78:	00ff0134 	.word	0x00ff0134
    2b7c:	5000470c 	.word	0x5000470c
    2b80:	e000ed00 	.word	0xe000ed00
    2b84:	00ff8000 	.word	0x00ff8000
    2b88:	50006000 	.word	0x50006000

00002b8c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2b8c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2b8e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2b90:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2b92:	fab2 f382 	clz	r3, r2
    2b96:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    2b9a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    2b9c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    2b9e:	d010      	beq.n	2bc2 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2ba0:	fa05 f303 	lsl.w	r3, r5, r3
    2ba4:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2ba8:	e8d0 6fef 	ldaex	r6, [r0]
    2bac:	4296      	cmp	r6, r2
    2bae:	d104      	bne.n	2bba <nrfx_flag32_alloc+0x2e>
    2bb0:	e8c0 3fec 	stlex	ip, r3, [r0]
    2bb4:	f1bc 0f00 	cmp.w	ip, #0
    2bb8:	d1f6      	bne.n	2ba8 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2bba:	d1e9      	bne.n	2b90 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    2bbc:	4802      	ldr	r0, [pc, #8]	; (2bc8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    2bbe:	700c      	strb	r4, [r1, #0]
}
    2bc0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    2bc2:	4802      	ldr	r0, [pc, #8]	; (2bcc <nrfx_flag32_alloc+0x40>)
    2bc4:	e7fc      	b.n	2bc0 <nrfx_flag32_alloc+0x34>
    2bc6:	bf00      	nop
    2bc8:	0bad0000 	.word	0x0bad0000
    2bcc:	0bad0002 	.word	0x0bad0002

00002bd0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2bd0:	6803      	ldr	r3, [r0, #0]
{
    2bd2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    2bd4:	40cb      	lsrs	r3, r1
    2bd6:	07db      	lsls	r3, r3, #31
    2bd8:	d411      	bmi.n	2bfe <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2bda:	2301      	movs	r3, #1
    2bdc:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    2be0:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2be2:	ea41 0203 	orr.w	r2, r1, r3
    2be6:	e8d0 4fef 	ldaex	r4, [r0]
    2bea:	429c      	cmp	r4, r3
    2bec:	d104      	bne.n	2bf8 <nrfx_flag32_free+0x28>
    2bee:	e8c0 2fec 	stlex	ip, r2, [r0]
    2bf2:	f1bc 0f00 	cmp.w	ip, #0
    2bf6:	d1f6      	bne.n	2be6 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2bf8:	d1f2      	bne.n	2be0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    2bfa:	4802      	ldr	r0, [pc, #8]	; (2c04 <nrfx_flag32_free+0x34>)
}
    2bfc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2bfe:	4802      	ldr	r0, [pc, #8]	; (2c08 <nrfx_flag32_free+0x38>)
    2c00:	e7fc      	b.n	2bfc <nrfx_flag32_free+0x2c>
    2c02:	bf00      	nop
    2c04:	0bad0000 	.word	0x0bad0000
    2c08:	0bad0004 	.word	0x0bad0004

00002c0c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c0e:	4605      	mov	r5, r0
    2c10:	2803      	cmp	r0, #3
    2c12:	d875      	bhi.n	2d00 <clock_stop+0xf4>
    2c14:	e8df f000 	tbb	[pc, r0]
    2c18:	3d301002 	.word	0x3d301002
    p_reg->INTENCLR = mask;
    2c1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c20:	2202      	movs	r2, #2
    2c22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c26:	2200      	movs	r2, #0
    2c28:	f503 7382 	add.w	r3, r3, #260	; 0x104
    2c2c:	601a      	str	r2, [r3, #0]
    2c2e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c30:	4b34      	ldr	r3, [pc, #208]	; (2d04 <clock_stop+0xf8>)
    2c32:	2201      	movs	r2, #1
    2c34:	601a      	str	r2, [r3, #0]
}
    2c36:	e00c      	b.n	2c52 <clock_stop+0x46>
    p_reg->INTENCLR = mask;
    2c38:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2c3c:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c3e:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    2c40:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c44:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    2c48:	f502 7280 	add.w	r2, r2, #256	; 0x100
    2c4c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c4e:	4a2e      	ldr	r2, [pc, #184]	; (2d08 <clock_stop+0xfc>)
    2c50:	6013      	str	r3, [r2, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2c52:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2c54:	429d      	cmp	r5, r3
    2c56:	bf18      	it	ne
    2c58:	2400      	movne	r4, #0
    2c5a:	f242 7710 	movw	r7, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    2c5e:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2c62:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2c66:	bf08      	it	eq
    2c68:	f10d 0407 	addeq.w	r4, sp, #7
    switch (domain)
    2c6c:	2d03      	cmp	r5, #3
    2c6e:	d847      	bhi.n	2d00 <clock_stop+0xf4>
    2c70:	e8df f005 	tbb	[pc, r5]
    2c74:	3f362d1c 	.word	0x3f362d1c
    p_reg->INTENCLR = mask;
    2c78:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c84:	2200      	movs	r2, #0
    2c86:	f503 7392 	add.w	r3, r3, #292	; 0x124
    2c8a:	601a      	str	r2, [r3, #0]
    2c8c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c8e:	4b1f      	ldr	r3, [pc, #124]	; (2d0c <clock_stop+0x100>)
    2c90:	e7cf      	b.n	2c32 <clock_stop+0x26>
    p_reg->INTENCLR = mask;
    2c92:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c96:	f44f 7280 	mov.w	r2, #256	; 0x100
    2c9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c9e:	2200      	movs	r2, #0
    2ca0:	f503 7390 	add.w	r3, r3, #288	; 0x120
    2ca4:	601a      	str	r2, [r3, #0]
    2ca6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ca8:	4b19      	ldr	r3, [pc, #100]	; (2d10 <clock_stop+0x104>)
    2caa:	e7c2      	b.n	2c32 <clock_stop+0x26>
            if (p_clk_src != NULL)
    2cac:	b124      	cbz	r4, 2cb8 <clock_stop+0xac>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2cae:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2cb2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2cb6:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2cb8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2cbc:	03db      	lsls	r3, r3, #15
    2cbe:	d51f      	bpl.n	2d00 <clock_stop+0xf4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2cc0:	b9d4      	cbnz	r4, 2cf8 <clock_stop+0xec>
    2cc2:	2001      	movs	r0, #1
    2cc4:	f002 f95b 	bl	4f7e <nrfx_busy_wait>
    2cc8:	3f01      	subs	r7, #1
    2cca:	d1cf      	bne.n	2c6c <clock_stop+0x60>
    2ccc:	e018      	b.n	2d00 <clock_stop+0xf4>
            if (p_clk_src != NULL)
    2cce:	b124      	cbz	r4, 2cda <clock_stop+0xce>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2cd0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2cd4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2cd8:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2cda:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2cde:	e7ed      	b.n	2cbc <clock_stop+0xb0>
            if (p_clk_src != NULL)
    2ce0:	b124      	cbz	r4, 2cec <clock_stop+0xe0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    2ce2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    2ce6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2cea:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    2cec:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    2cf0:	e7e4      	b.n	2cbc <clock_stop+0xb0>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    2cf2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    2cf6:	e7e1      	b.n	2cbc <clock_stop+0xb0>
    2cf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2cfc:	2b01      	cmp	r3, #1
    2cfe:	d0e0      	beq.n	2cc2 <clock_stop+0xb6>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2d00:	b003      	add	sp, #12
    2d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d04:	5000500c 	.word	0x5000500c
    2d08:	50005004 	.word	0x50005004
    2d0c:	50005024 	.word	0x50005024
    2d10:	5000501c 	.word	0x5000501c

00002d14 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2d14:	4b04      	ldr	r3, [pc, #16]	; (2d28 <nrfx_clock_init+0x14>)
    2d16:	791a      	ldrb	r2, [r3, #4]
    2d18:	b922      	cbnz	r2, 2d24 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2d1a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2d1c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2d1e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2d20:	4802      	ldr	r0, [pc, #8]	; (2d2c <nrfx_clock_init+0x18>)
    2d22:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2d24:	4802      	ldr	r0, [pc, #8]	; (2d30 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2d26:	4770      	bx	lr
    2d28:	20000900 	.word	0x20000900
    2d2c:	0bad0000 	.word	0x0bad0000
    2d30:	0bad000c 	.word	0x0bad000c

00002d34 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    2d34:	b508      	push	{r3, lr}
    2d36:	2803      	cmp	r0, #3
    2d38:	d81e      	bhi.n	2d78 <nrfx_clock_start+0x44>
    2d3a:	e8df f000 	tbb	[pc, r0]
    2d3e:	3302      	.short	0x3302
    2d40:	4a3d      	.short	0x4a3d
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2d42:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2d46:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2d4a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2d4e:	03c9      	lsls	r1, r1, #15
    2d50:	d413      	bmi.n	2d7a <nrfx_clock_start+0x46>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    2d52:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    2d56:	07db      	lsls	r3, r3, #31
    2d58:	d419      	bmi.n	2d8e <nrfx_clock_start+0x5a>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    2d5a:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d5c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d60:	2100      	movs	r1, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d62:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d66:	4b21      	ldr	r3, [pc, #132]	; (2dec <nrfx_clock_start+0xb8>)
    2d68:	6019      	str	r1, [r3, #0]
    2d6a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2d6c:	2302      	movs	r3, #2
    2d6e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d72:	2201      	movs	r2, #1
    2d74:	4b1e      	ldr	r3, [pc, #120]	; (2df0 <nrfx_clock_start+0xbc>)
    2d76:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    2d78:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2d7a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    2d7e:	2b02      	cmp	r3, #2
    2d80:	d0ec      	beq.n	2d5c <nrfx_clock_start+0x28>
    if (!is_correct_clk)
    2d82:	2b01      	cmp	r3, #1
    2d84:	d0ea      	beq.n	2d5c <nrfx_clock_start+0x28>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    2d86:	2000      	movs	r0, #0
    2d88:	f7ff ff40 	bl	2c0c <clock_stop>
    2d8c:	e7e5      	b.n	2d5a <nrfx_clock_start+0x26>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2d8e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    2d92:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    2d96:	3b01      	subs	r3, #1
    2d98:	2b01      	cmp	r3, #1
    2d9a:	d8f4      	bhi.n	2d86 <nrfx_clock_start+0x52>
    p_reg->INTENSET = mask;
    2d9c:	2302      	movs	r3, #2
    2d9e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    2da2:	e7e9      	b.n	2d78 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2da4:	2200      	movs	r2, #0
    2da6:	4b13      	ldr	r3, [pc, #76]	; (2df4 <nrfx_clock_start+0xc0>)
    2da8:	601a      	str	r2, [r3, #0]
    2daa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2dac:	2201      	movs	r2, #1
    2dae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2db2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    2db6:	e7de      	b.n	2d76 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2db8:	2200      	movs	r2, #0
    2dba:	4b0f      	ldr	r3, [pc, #60]	; (2df8 <nrfx_clock_start+0xc4>)
    2dbc:	601a      	str	r2, [r3, #0]
    2dbe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
    2dc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2dc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dcc:	2201      	movs	r2, #1
    2dce:	621a      	str	r2, [r3, #32]
}
    2dd0:	e7d2      	b.n	2d78 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dd2:	2200      	movs	r2, #0
    2dd4:	4b09      	ldr	r3, [pc, #36]	; (2dfc <nrfx_clock_start+0xc8>)
    2dd6:	601a      	str	r2, [r3, #0]
    2dd8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2dda:	f44f 7280 	mov.w	r2, #256	; 0x100
    2dde:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2de2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2de6:	2201      	movs	r2, #1
    2de8:	619a      	str	r2, [r3, #24]
}
    2dea:	e7c5      	b.n	2d78 <nrfx_clock_start+0x44>
    2dec:	50005104 	.word	0x50005104
    2df0:	50005008 	.word	0x50005008
    2df4:	50005100 	.word	0x50005100
    2df8:	50005124 	.word	0x50005124
    2dfc:	50005120 	.word	0x50005120

00002e00 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e00:	4b26      	ldr	r3, [pc, #152]	; (2e9c <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e02:	b510      	push	{r4, lr}
    2e04:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e06:	b152      	cbz	r2, 2e1e <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e08:	2000      	movs	r0, #0
    2e0a:	6018      	str	r0, [r3, #0]
    2e0c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2e0e:	2201      	movs	r2, #1
    2e10:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2e18:	4b21      	ldr	r3, [pc, #132]	; (2ea0 <nrfx_power_clock_irq_handler+0xa0>)
    2e1a:	681b      	ldr	r3, [r3, #0]
    2e1c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e1e:	4b21      	ldr	r3, [pc, #132]	; (2ea4 <nrfx_power_clock_irq_handler+0xa4>)
    2e20:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2e22:	b18a      	cbz	r2, 2e48 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e24:	2200      	movs	r2, #0
    2e26:	601a      	str	r2, [r3, #0]
    2e28:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e2a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e2e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e32:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2e36:	f002 0203 	and.w	r2, r2, #3
    2e3a:	2a01      	cmp	r2, #1
    2e3c:	f04f 0102 	mov.w	r1, #2
    2e40:	d124      	bne.n	2e8c <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e42:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e46:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e48:	4b17      	ldr	r3, [pc, #92]	; (2ea8 <nrfx_power_clock_irq_handler+0xa8>)
    2e4a:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2e4c:	b162      	cbz	r2, 2e68 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e4e:	2200      	movs	r2, #0
    2e50:	601a      	str	r2, [r3, #0]
    2e52:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2e54:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e58:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2e60:	4b0f      	ldr	r3, [pc, #60]	; (2ea0 <nrfx_power_clock_irq_handler+0xa0>)
    2e62:	2004      	movs	r0, #4
    2e64:	681b      	ldr	r3, [r3, #0]
    2e66:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e68:	4b10      	ldr	r3, [pc, #64]	; (2eac <nrfx_power_clock_irq_handler+0xac>)
    2e6a:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2e6c:	b1aa      	cbz	r2, 2e9a <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e72:	2200      	movs	r2, #0
    2e74:	601a      	str	r2, [r3, #0]
    2e76:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2e78:	f44f 7200 	mov.w	r2, #512	; 0x200
    2e7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2e84:	4b06      	ldr	r3, [pc, #24]	; (2ea0 <nrfx_power_clock_irq_handler+0xa0>)
    2e86:	2005      	movs	r0, #5
    2e88:	681b      	ldr	r3, [r3, #0]
    2e8a:	4718      	bx	r3
    2e8c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e90:	4b03      	ldr	r3, [pc, #12]	; (2ea0 <nrfx_power_clock_irq_handler+0xa0>)
    2e92:	2001      	movs	r0, #1
    2e94:	681b      	ldr	r3, [r3, #0]
    2e96:	4798      	blx	r3
    2e98:	e7d6      	b.n	2e48 <nrfx_power_clock_irq_handler+0x48>
}
    2e9a:	bd10      	pop	{r4, pc}
    2e9c:	50005100 	.word	0x50005100
    2ea0:	20000900 	.word	0x20000900
    2ea4:	50005104 	.word	0x50005104
    2ea8:	50005120 	.word	0x50005120
    2eac:	50005124 	.word	0x50005124

00002eb0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2eb0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2eb2:	4801      	ldr	r0, [pc, #4]	; (2eb8 <nrfx_dppi_channel_alloc+0x8>)
    2eb4:	f7ff be6a 	b.w	2b8c <nrfx_flag32_alloc>
    2eb8:	20000044 	.word	0x20000044

00002ebc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2ebc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2ebe:	f003 021f 	and.w	r2, r3, #31
    2ec2:	6002      	str	r2, [r0, #0]
}
    2ec4:	4a03      	ldr	r2, [pc, #12]	; (2ed4 <nrf_gpio_pin_port_decode+0x18>)
    2ec6:	4804      	ldr	r0, [pc, #16]	; (2ed8 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    2ec8:	095b      	lsrs	r3, r3, #5
}
    2eca:	2b01      	cmp	r3, #1
    2ecc:	bf08      	it	eq
    2ece:	4610      	moveq	r0, r2
    2ed0:	4770      	bx	lr
    2ed2:	bf00      	nop
    2ed4:	50842800 	.word	0x50842800
    2ed8:	50842500 	.word	0x50842500

00002edc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2edc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2ede:	4c0d      	ldr	r4, [pc, #52]	; (2f14 <call_handler+0x38>)
    2ee0:	f100 0308 	add.w	r3, r0, #8
    2ee4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    2ee8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2eea:	05da      	lsls	r2, r3, #23
{
    2eec:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2eee:	d507      	bpl.n	2f00 <call_handler+0x24>
    2ef0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2ef4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2ef8:	6852      	ldr	r2, [r2, #4]
    2efa:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2efe:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2f00:	68a3      	ldr	r3, [r4, #8]
    2f02:	b12b      	cbz	r3, 2f10 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2f04:	4631      	mov	r1, r6
    2f06:	4628      	mov	r0, r5
    2f08:	68e2      	ldr	r2, [r4, #12]
    }
}
    2f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2f0e:	4718      	bx	r3
}
    2f10:	bd70      	pop	{r4, r5, r6, pc}
    2f12:	bf00      	nop
    2f14:	20000048 	.word	0x20000048

00002f18 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f18:	4b12      	ldr	r3, [pc, #72]	; (2f64 <release_handler+0x4c>)
    2f1a:	3008      	adds	r0, #8
    2f1c:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
    2f20:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f22:	05d1      	lsls	r1, r2, #23
    2f24:	d51b      	bpl.n	2f5e <release_handler+0x46>
    2f26:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2f2a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    2f2e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f32:	2000      	movs	r0, #0
    2f34:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2f38:	f834 2b02 	ldrh.w	r2, [r4], #2
    2f3c:	f412 7f80 	tst.w	r2, #256	; 0x100
    2f40:	d003      	beq.n	2f4a <release_handler+0x32>
    2f42:	f3c2 2243 	ubfx	r2, r2, #9, #4
    2f46:	4291      	cmp	r1, r2
    2f48:	d009      	beq.n	2f5e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f4a:	3001      	adds	r0, #1
    2f4c:	2830      	cmp	r0, #48	; 0x30
    2f4e:	d1f3      	bne.n	2f38 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2f50:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f52:	4805      	ldr	r0, [pc, #20]	; (2f68 <release_handler+0x50>)
}
    2f54:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    2f56:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f5a:	f7ff be39 	b.w	2bd0 <nrfx_flag32_free>
}
    2f5e:	bc10      	pop	{r4}
    2f60:	4770      	bx	lr
    2f62:	bf00      	nop
    2f64:	20000048 	.word	0x20000048
    2f68:	200000bc 	.word	0x200000bc

00002f6c <pin_handler_trigger_uninit>:
{
    2f6c:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2f6e:	4c0c      	ldr	r4, [pc, #48]	; (2fa0 <pin_handler_trigger_uninit+0x34>)
    2f70:	f100 0508 	add.w	r5, r0, #8
    2f74:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    2f78:	069a      	lsls	r2, r3, #26
    2f7a:	d50a      	bpl.n	2f92 <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2f7c:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2f7e:	0b5b      	lsrs	r3, r3, #13
    2f80:	009b      	lsls	r3, r3, #2
    2f82:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2f86:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2f8a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    2f8e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
    2f92:	f7ff ffc1 	bl	2f18 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2f96:	2300      	movs	r3, #0
    2f98:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2f9c:	bd38      	pop	{r3, r4, r5, pc}
    2f9e:	bf00      	nop
    2fa0:	20000048 	.word	0x20000048

00002fa4 <nrfx_gpiote_input_configure>:
{
    2fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2fa8:	461d      	mov	r5, r3
    2faa:	4604      	mov	r4, r0
    2fac:	4616      	mov	r6, r2
    if (p_input_config)
    2fae:	460b      	mov	r3, r1
    2fb0:	b309      	cbz	r1, 2ff6 <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fb2:	4f4e      	ldr	r7, [pc, #312]	; (30ec <nrfx_gpiote_input_configure+0x148>)
    2fb4:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    2fb8:	f837 2018 	ldrh.w	r2, [r7, r8, lsl #1]
    2fbc:	f002 0222 	and.w	r2, r2, #34	; 0x22
    2fc0:	2a22      	cmp	r2, #34	; 0x22
    2fc2:	d103      	bne.n	2fcc <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    2fc4:	484a      	ldr	r0, [pc, #296]	; (30f0 <nrfx_gpiote_input_configure+0x14c>)
}
    2fc6:	b004      	add	sp, #16
    2fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2fcc:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2fce:	f10d 010e 	add.w	r1, sp, #14
    2fd2:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2fd6:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2fda:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2fde:	f10d 020f 	add.w	r2, sp, #15
    2fe2:	f001 ffe2 	bl	4faa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2fe6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    2fea:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2fee:	f043 0301 	orr.w	r3, r3, #1
    2ff2:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    2ff6:	b196      	cbz	r6, 301e <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ff8:	4b3c      	ldr	r3, [pc, #240]	; (30ec <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2ffa:	7830      	ldrb	r0, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2ffc:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ffe:	f104 0608 	add.w	r6, r4, #8
    3002:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    3006:	078f      	lsls	r7, r1, #30
    3008:	d50c      	bpl.n	3024 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    300a:	2a00      	cmp	r2, #0
    300c:	d1da      	bne.n	2fc4 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    300e:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    3012:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3016:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    301a:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    301e:	bbd5      	cbnz	r5, 3096 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    3020:	4834      	ldr	r0, [pc, #208]	; (30f4 <nrfx_gpiote_input_configure+0x150>)
    3022:	e7d0      	b.n	2fc6 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3024:	f021 0120 	bic.w	r1, r1, #32
    3028:	04c9      	lsls	r1, r1, #19
    302a:	0cc9      	lsrs	r1, r1, #19
    302c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    3030:	2a00      	cmp	r2, #0
    3032:	d0ec      	beq.n	300e <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    3034:	2803      	cmp	r0, #3
    3036:	d8c5      	bhi.n	2fc4 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3038:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    303c:	4662      	mov	r2, ip
    303e:	0092      	lsls	r2, r2, #2
    3040:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3044:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3048:	b920      	cbnz	r0, 3054 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    304a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    304e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    3052:	e7dc      	b.n	300e <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3054:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3058:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    305c:	f027 0703 	bic.w	r7, r7, #3
    3060:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3064:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3068:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    306c:	f427 374f 	bic.w	r7, r7, #211968	; 0x33c00
    3070:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    3074:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3078:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    307c:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3080:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    3084:	ea47 070e 	orr.w	r7, r7, lr
    3088:	f041 0120 	orr.w	r1, r1, #32
    308c:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    3090:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    3094:	e7bb      	b.n	300e <nrfx_gpiote_input_configure+0x6a>
    release_handler(pin);
    3096:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3098:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    309c:	f7ff ff3c 	bl	2f18 <release_handler>
    if (!handler)
    30a0:	2e00      	cmp	r6, #0
    30a2:	d0bd      	beq.n	3020 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    30a4:	4d11      	ldr	r5, [pc, #68]	; (30ec <nrfx_gpiote_input_configure+0x148>)
    30a6:	682b      	ldr	r3, [r5, #0]
    30a8:	429e      	cmp	r6, r3
    30aa:	d104      	bne.n	30b6 <nrfx_gpiote_input_configure+0x112>
    30ac:	686b      	ldr	r3, [r5, #4]
    30ae:	429f      	cmp	r7, r3
    30b0:	d101      	bne.n	30b6 <nrfx_gpiote_input_configure+0x112>
    30b2:	2200      	movs	r2, #0
    30b4:	e00a      	b.n	30cc <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    30b6:	4810      	ldr	r0, [pc, #64]	; (30f8 <nrfx_gpiote_input_configure+0x154>)
    30b8:	f10d 010f 	add.w	r1, sp, #15
    30bc:	f7ff fd66 	bl	2b8c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    30c0:	4b0c      	ldr	r3, [pc, #48]	; (30f4 <nrfx_gpiote_input_configure+0x150>)
    30c2:	4298      	cmp	r0, r3
    30c4:	f47f af7f 	bne.w	2fc6 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    30c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    30cc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30d0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    30d2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30d4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    30d8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30dc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    30e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    30e4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    30e8:	e79a      	b.n	3020 <nrfx_gpiote_input_configure+0x7c>
    30ea:	bf00      	nop
    30ec:	20000048 	.word	0x20000048
    30f0:	0bad0004 	.word	0x0bad0004
    30f4:	0bad0000 	.word	0x0bad0000
    30f8:	200000bc 	.word	0x200000bc

000030fc <nrfx_gpiote_output_configure>:
{
    30fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30fe:	4604      	mov	r4, r0
    3100:	4615      	mov	r5, r2
    3102:	b085      	sub	sp, #20
    if (p_config)
    3104:	b309      	cbz	r1, 314a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3106:	4e33      	ldr	r6, [pc, #204]	; (31d4 <nrfx_gpiote_output_configure+0xd8>)
    3108:	f100 0708 	add.w	r7, r0, #8
    310c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3110:	0798      	lsls	r0, r3, #30
    3112:	d401      	bmi.n	3118 <nrfx_gpiote_output_configure+0x1c>
    3114:	069a      	lsls	r2, r3, #26
    3116:	d45a      	bmi.n	31ce <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3118:	f013 0f1c 	tst.w	r3, #28
    311c:	d002      	beq.n	3124 <nrfx_gpiote_output_configure+0x28>
    311e:	784b      	ldrb	r3, [r1, #1]
    3120:	2b01      	cmp	r3, #1
    3122:	d054      	beq.n	31ce <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3124:	2301      	movs	r3, #1
    3126:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    312a:	2300      	movs	r3, #0
    312c:	1c4a      	adds	r2, r1, #1
    312e:	e9cd 1300 	strd	r1, r3, [sp]
    3132:	4620      	mov	r0, r4
    3134:	1c8b      	adds	r3, r1, #2
    3136:	f10d 010f 	add.w	r1, sp, #15
    313a:	f001 ff36 	bl	4faa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    313e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3142:	f043 0303 	orr.w	r3, r3, #3
    3146:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    314a:	b915      	cbnz	r5, 3152 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    314c:	4822      	ldr	r0, [pc, #136]	; (31d8 <nrfx_gpiote_output_configure+0xdc>)
}
    314e:	b005      	add	sp, #20
    3150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3152:	4e20      	ldr	r6, [pc, #128]	; (31d4 <nrfx_gpiote_output_configure+0xd8>)
    3154:	f104 0708 	add.w	r7, r4, #8
    3158:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    315c:	0783      	lsls	r3, r0, #30
    315e:	d536      	bpl.n	31ce <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    3160:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3164:	2300      	movs	r3, #0
    3166:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3168:	f020 0020 	bic.w	r0, r0, #32
    316c:	0089      	lsls	r1, r1, #2
    316e:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3172:	04c0      	lsls	r0, r0, #19
    3174:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    3178:	0cc0      	lsrs	r0, r0, #19
    317a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    317e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3182:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3186:	786a      	ldrb	r2, [r5, #1]
    3188:	2a00      	cmp	r2, #0
    318a:	d0df      	beq.n	314c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    318c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3190:	78ad      	ldrb	r5, [r5, #2]
    3192:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3196:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    319a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    319e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    31a2:	0223      	lsls	r3, r4, #8
    31a4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    31a8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31aa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    31ae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    31b2:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31b4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    31b6:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    31ba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31be:	432b      	orrs	r3, r5
    31c0:	f040 0020 	orr.w	r0, r0, #32
    31c4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    31c8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    31cc:	e7be      	b.n	314c <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    31ce:	4803      	ldr	r0, [pc, #12]	; (31dc <nrfx_gpiote_output_configure+0xe0>)
    31d0:	e7bd      	b.n	314e <nrfx_gpiote_output_configure+0x52>
    31d2:	bf00      	nop
    31d4:	20000048 	.word	0x20000048
    31d8:	0bad0000 	.word	0x0bad0000
    31dc:	0bad0004 	.word	0x0bad0004

000031e0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    31e0:	4b01      	ldr	r3, [pc, #4]	; (31e8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    31e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    31e6:	4770      	bx	lr
    31e8:	20000048 	.word	0x20000048

000031ec <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    31ec:	4b05      	ldr	r3, [pc, #20]	; (3204 <nrfx_gpiote_channel_get+0x18>)
    31ee:	3008      	adds	r0, #8
    31f0:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    31f4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31f6:	bf43      	ittte	mi
    31f8:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    31fa:	4803      	ldrmi	r0, [pc, #12]	; (3208 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31fc:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    31fe:	4803      	ldrpl	r0, [pc, #12]	; (320c <nrfx_gpiote_channel_get+0x20>)
}
    3200:	4770      	bx	lr
    3202:	bf00      	nop
    3204:	20000048 	.word	0x20000048
    3208:	0bad0000 	.word	0x0bad0000
    320c:	0bad0004 	.word	0x0bad0004

00003210 <nrfx_gpiote_init>:
{
    3210:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3212:	4c0e      	ldr	r4, [pc, #56]	; (324c <nrfx_gpiote_init+0x3c>)
    3214:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3218:	b9b5      	cbnz	r5, 3248 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    321a:	2260      	movs	r2, #96	; 0x60
    321c:	4629      	mov	r1, r5
    321e:	f104 0010 	add.w	r0, r4, #16
    3222:	f001 fc77 	bl	4b14 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3226:	200d      	movs	r0, #13
    3228:	f7fe f8ba 	bl	13a0 <arch_irq_enable>
    p_reg->INTENSET = mask;
    322c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3230:	4b07      	ldr	r3, [pc, #28]	; (3250 <nrfx_gpiote_init+0x40>)
    return err_code;
    3232:	4808      	ldr	r0, [pc, #32]	; (3254 <nrfx_gpiote_init+0x44>)
    3234:	601d      	str	r5, [r3, #0]
    3236:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3238:	4b07      	ldr	r3, [pc, #28]	; (3258 <nrfx_gpiote_init+0x48>)
    323a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    323e:	2301      	movs	r3, #1
    3240:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3244:	6763      	str	r3, [r4, #116]	; 0x74
}
    3246:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3248:	4804      	ldr	r0, [pc, #16]	; (325c <nrfx_gpiote_init+0x4c>)
    324a:	e7fc      	b.n	3246 <nrfx_gpiote_init+0x36>
    324c:	20000048 	.word	0x20000048
    3250:	5000d17c 	.word	0x5000d17c
    3254:	0bad0000 	.word	0x0bad0000
    3258:	5000d000 	.word	0x5000d000
    325c:	0bad0005 	.word	0x0bad0005

00003260 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3260:	4b03      	ldr	r3, [pc, #12]	; (3270 <nrfx_gpiote_is_init+0x10>)
    3262:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3266:	3800      	subs	r0, #0
    3268:	bf18      	it	ne
    326a:	2001      	movne	r0, #1
    326c:	4770      	bx	lr
    326e:	bf00      	nop
    3270:	20000048 	.word	0x20000048

00003274 <nrfx_gpiote_channel_free>:
{
    3274:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3276:	4801      	ldr	r0, [pc, #4]	; (327c <nrfx_gpiote_channel_free+0x8>)
    3278:	f7ff bcaa 	b.w	2bd0 <nrfx_flag32_free>
    327c:	200000b8 	.word	0x200000b8

00003280 <nrfx_gpiote_channel_alloc>:
{
    3280:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3282:	4801      	ldr	r0, [pc, #4]	; (3288 <nrfx_gpiote_channel_alloc+0x8>)
    3284:	f7ff bc82 	b.w	2b8c <nrfx_flag32_alloc>
    3288:	200000b8 	.word	0x200000b8

0000328c <nrfx_gpiote_trigger_enable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    328c:	4b1f      	ldr	r3, [pc, #124]	; (330c <nrfx_gpiote_trigger_enable+0x80>)
{
    328e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3290:	f100 0208 	add.w	r2, r0, #8
    3294:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    3298:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    329a:	069a      	lsls	r2, r3, #26
    329c:	d51d      	bpl.n	32da <nrfx_gpiote_trigger_enable+0x4e>
    329e:	f013 0502 	ands.w	r5, r3, #2
    32a2:	d11a      	bne.n	32da <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32a4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    32a6:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    32a8:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    32ac:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    32b0:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32b4:	6005      	str	r5, [r0, #0]
    32b6:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    32ba:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    32bc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    32c0:	f040 0001 	orr.w	r0, r0, #1
    32c4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    32c8:	b129      	cbz	r1, 32d6 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    32ca:	2201      	movs	r2, #1
    32cc:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    32d0:	4a0f      	ldr	r2, [pc, #60]	; (3310 <nrfx_gpiote_trigger_enable+0x84>)
    32d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    32d6:	b003      	add	sp, #12
    32d8:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32da:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    32de:	2b04      	cmp	r3, #4
    32e0:	d00f      	beq.n	3302 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    32e2:	2b05      	cmp	r3, #5
    32e4:	d00f      	beq.n	3306 <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    32e6:	a801      	add	r0, sp, #4
    32e8:	9401      	str	r4, [sp, #4]
    32ea:	f7ff fde7 	bl	2ebc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    32ee:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    32f0:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    32f2:	40d9      	lsrs	r1, r3
    32f4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    32f8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    32fa:	4620      	mov	r0, r4
    32fc:	f001 fe9c 	bl	5038 <nrf_gpio_cfg_sense_set>
}
    3300:	e7e9      	b.n	32d6 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3302:	2103      	movs	r1, #3
    3304:	e7f9      	b.n	32fa <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3306:	2102      	movs	r1, #2
    3308:	e7f7      	b.n	32fa <nrfx_gpiote_trigger_enable+0x6e>
    330a:	bf00      	nop
    330c:	20000048 	.word	0x20000048
    3310:	5000d000 	.word	0x5000d000

00003314 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3314:	4b0e      	ldr	r3, [pc, #56]	; (3350 <nrfx_gpiote_trigger_disable+0x3c>)
    3316:	f100 0208 	add.w	r2, r0, #8
    331a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    331e:	0699      	lsls	r1, r3, #26
    3320:	d513      	bpl.n	334a <nrfx_gpiote_trigger_disable+0x36>
    3322:	079a      	lsls	r2, r3, #30
    3324:	d411      	bmi.n	334a <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3326:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3328:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    332a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    332c:	4909      	ldr	r1, [pc, #36]	; (3354 <nrfx_gpiote_trigger_disable+0x40>)
    332e:	009b      	lsls	r3, r3, #2
    3330:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3334:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3338:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    333c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3340:	f022 0203 	bic.w	r2, r2, #3
    3344:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3348:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    334a:	2100      	movs	r1, #0
    334c:	f001 be74 	b.w	5038 <nrf_gpio_cfg_sense_set>
    3350:	20000048 	.word	0x20000048
    3354:	5000d000 	.word	0x5000d000

00003358 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3358:	4b10      	ldr	r3, [pc, #64]	; (339c <nrfx_gpiote_pin_uninit+0x44>)
    335a:	f100 0208 	add.w	r2, r0, #8
    335e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
    3362:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
    3364:	07db      	lsls	r3, r3, #31
{
    3366:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3368:	d516      	bpl.n	3398 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    336a:	f7ff ffd3 	bl	3314 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    336e:	4620      	mov	r0, r4
    3370:	f7ff fdfc 	bl	2f6c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3374:	a801      	add	r0, sp, #4
    3376:	9401      	str	r4, [sp, #4]
    3378:	f7ff fda0 	bl	2ebc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    337c:	9b01      	ldr	r3, [sp, #4]
    337e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3382:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3386:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    338a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    338e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    3392:	4803      	ldr	r0, [pc, #12]	; (33a0 <nrfx_gpiote_pin_uninit+0x48>)
}
    3394:	b002      	add	sp, #8
    3396:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3398:	4802      	ldr	r0, [pc, #8]	; (33a4 <nrfx_gpiote_pin_uninit+0x4c>)
    339a:	e7fb      	b.n	3394 <nrfx_gpiote_pin_uninit+0x3c>
    339c:	20000048 	.word	0x20000048
    33a0:	0bad0000 	.word	0x0bad0000
    33a4:	0bad0004 	.word	0x0bad0004

000033a8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    33a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    33ac:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    33ae:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33b0:	462c      	mov	r4, r5
{
    33b2:	4b5e      	ldr	r3, [pc, #376]	; (352c <nrfx_gpiote_irq_handler+0x184>)
    return p_reg->INTENSET & mask;
    33b4:	485e      	ldr	r0, [pc, #376]	; (3530 <nrfx_gpiote_irq_handler+0x188>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33b6:	495f      	ldr	r1, [pc, #380]	; (3534 <nrfx_gpiote_irq_handler+0x18c>)
{
    33b8:	b089      	sub	sp, #36	; 0x24
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33ba:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    33bc:	b136      	cbz	r6, 33cc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    33be:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    33c2:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33c4:	bf1e      	ittt	ne
    33c6:	601c      	strne	r4, [r3, #0]
    33c8:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    33ca:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    33cc:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33ce:	428b      	cmp	r3, r1
        mask <<= 1;
    33d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33d4:	d1f1      	bne.n	33ba <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33d6:	4f58      	ldr	r7, [pc, #352]	; (3538 <nrfx_gpiote_irq_handler+0x190>)
    33d8:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    33da:	b333      	cbz	r3, 342a <nrfx_gpiote_irq_handler+0x82>
        *p_masks = gpio_regs[i]->LATCH;
    33dc:	4e57      	ldr	r6, [pc, #348]	; (353c <nrfx_gpiote_irq_handler+0x194>)
    33de:	6a33      	ldr	r3, [r6, #32]
    33e0:	9306      	str	r3, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    33e2:	6233      	str	r3, [r6, #32]
        *p_masks = gpio_regs[i]->LATCH;
    33e4:	4b56      	ldr	r3, [pc, #344]	; (3540 <nrfx_gpiote_irq_handler+0x198>)
    33e6:	6a1a      	ldr	r2, [r3, #32]
    33e8:	9207      	str	r2, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    33ea:	621a      	str	r2, [r3, #32]
        *p_masks = gpio_regs[i]->LATCH;
    33ec:	e9cd 6301 	strd	r6, r3, [sp, #4]
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    33f0:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    33f4:	f04f 0b01 	mov.w	fp, #1
    33f8:	f10d 0918 	add.w	r9, sp, #24
            while (latch[i])
    33fc:	f8d9 3000 	ldr.w	r3, [r9]
    3400:	b9cb      	cbnz	r3, 3436 <nrfx_gpiote_irq_handler+0x8e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3402:	f108 0820 	add.w	r8, r8, #32
    3406:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    340a:	f109 0904 	add.w	r9, r9, #4
    340e:	d1f5      	bne.n	33fc <nrfx_gpiote_irq_handler+0x54>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3410:	603b      	str	r3, [r7, #0]
    3412:	683b      	ldr	r3, [r7, #0]
    3414:	9b01      	ldr	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3416:	9902      	ldr	r1, [sp, #8]
        *p_masks = gpio_regs[i]->LATCH;
    3418:	6a1a      	ldr	r2, [r3, #32]
    341a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    341c:	621a      	str	r2, [r3, #32]
        *p_masks = gpio_regs[i]->LATCH;
    341e:	9b02      	ldr	r3, [sp, #8]
    3420:	6a1b      	ldr	r3, [r3, #32]
    3422:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    3424:	620b      	str	r3, [r1, #32]
        if (latch[port_idx])
    3426:	4313      	orrs	r3, r2
    3428:	d1e2      	bne.n	33f0 <nrfx_gpiote_irq_handler+0x48>
        mask &= ~NRFX_BIT(ch);
    342a:	2401      	movs	r4, #1
    while (mask)
    342c:	2d00      	cmp	r5, #0
    342e:	d164      	bne.n	34fa <nrfx_gpiote_irq_handler+0x152>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3430:	b009      	add	sp, #36	; 0x24
    3432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    3436:	fa93 f3a3 	rbit	r3, r3
    343a:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    343e:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3442:	4b40      	ldr	r3, [pc, #256]	; (3544 <nrfx_gpiote_irq_handler+0x19c>)
    3444:	f106 0208 	add.w	r2, r6, #8
    3448:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    344c:	08f4      	lsrs	r4, r6, #3
    344e:	f3c2 0382 	ubfx	r3, r2, #2, #3
    3452:	9303      	str	r3, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    3454:	f006 0007 	and.w	r0, r6, #7
    3458:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    345a:	ab06      	add	r3, sp, #24
    345c:	fa0b fc00 	lsl.w	ip, fp, r0
    3460:	5d18      	ldrb	r0, [r3, r4]
    3462:	0891      	lsrs	r1, r2, #2
    3464:	ea20 000c 	bic.w	r0, r0, ip
    3468:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    346a:	a805      	add	r0, sp, #20
    346c:	9605      	str	r6, [sp, #20]
    346e:	f7ff fd25 	bl	2ebc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3472:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    3474:	074b      	lsls	r3, r1, #29
    3476:	f104 0480 	add.w	r4, r4, #128	; 0x80
    347a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    347e:	f3c4 4401 	ubfx	r4, r4, #16, #2
    3482:	d521      	bpl.n	34c8 <nrfx_gpiote_irq_handler+0x120>
        call_handler(pin, trigger);
    3484:	4651      	mov	r1, sl
    3486:	4630      	mov	r0, r6
    3488:	f7ff fd28 	bl	2edc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    348c:	a805      	add	r0, sp, #20
    348e:	9605      	str	r6, [sp, #20]
    3490:	f7ff fd14 	bl	2ebc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3494:	9a05      	ldr	r2, [sp, #20]
    3496:	b2e4      	uxtb	r4, r4
    3498:	3280      	adds	r2, #128	; 0x80
    349a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    349e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    34a2:	4294      	cmp	r4, r2
    34a4:	d107      	bne.n	34b6 <nrfx_gpiote_irq_handler+0x10e>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    34a6:	2100      	movs	r1, #0
    34a8:	4630      	mov	r0, r6
    34aa:	f001 fdc5 	bl	5038 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    34ae:	4621      	mov	r1, r4
    34b0:	4630      	mov	r0, r6
    34b2:	f001 fdc1 	bl	5038 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    34b6:	a805      	add	r0, sp, #20
    34b8:	9605      	str	r6, [sp, #20]
    34ba:	f7ff fcff 	bl	2ebc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    34be:	9b05      	ldr	r3, [sp, #20]
    34c0:	fa0b f303 	lsl.w	r3, fp, r3
    34c4:	6203      	str	r3, [r0, #32]
    34c6:	e799      	b.n	33fc <nrfx_gpiote_irq_handler+0x54>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    34c8:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    34ca:	bf0c      	ite	eq
    34cc:	2103      	moveq	r1, #3
    34ce:	2102      	movne	r1, #2
    34d0:	4630      	mov	r0, r6
    34d2:	f001 fdb1 	bl	5038 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    34d6:	9b03      	ldr	r3, [sp, #12]
    34d8:	2b03      	cmp	r3, #3
    34da:	d004      	beq.n	34e6 <nrfx_gpiote_irq_handler+0x13e>
    34dc:	2c02      	cmp	r4, #2
    34de:	d107      	bne.n	34f0 <nrfx_gpiote_irq_handler+0x148>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34e0:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34e4:	d1e7      	bne.n	34b6 <nrfx_gpiote_irq_handler+0x10e>
            call_handler(pin, trigger);
    34e6:	4651      	mov	r1, sl
    34e8:	4630      	mov	r0, r6
    34ea:	f7ff fcf7 	bl	2edc <call_handler>
    34ee:	e7e2      	b.n	34b6 <nrfx_gpiote_irq_handler+0x10e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34f0:	2c03      	cmp	r4, #3
    34f2:	d1e0      	bne.n	34b6 <nrfx_gpiote_irq_handler+0x10e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34f4:	f1ba 0f02 	cmp.w	sl, #2
    34f8:	e7f4      	b.n	34e4 <nrfx_gpiote_irq_handler+0x13c>
        uint32_t ch = NRF_CTZ(mask);
    34fa:	fa95 f3a5 	rbit	r3, r5
    34fe:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3502:	fa04 f203 	lsl.w	r2, r4, r3
    3506:	009b      	lsls	r3, r3, #2
    3508:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    350c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3510:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3514:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3518:	f3c0 2005 	ubfx	r0, r0, #8, #6
    351c:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3520:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3524:	f7ff fcda 	bl	2edc <call_handler>
    3528:	e780      	b.n	342c <nrfx_gpiote_irq_handler+0x84>
    352a:	bf00      	nop
    352c:	5000d100 	.word	0x5000d100
    3530:	5000d000 	.word	0x5000d000
    3534:	5000d120 	.word	0x5000d120
    3538:	5000d17c 	.word	0x5000d17c
    353c:	50842500 	.word	0x50842500
    3540:	50842800 	.word	0x50842800
    3544:	20000048 	.word	0x20000048

00003548 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3548:	4b0e      	ldr	r3, [pc, #56]	; (3584 <z_sys_init_run_level+0x3c>)
{
    354a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    354c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3550:	3001      	adds	r0, #1
    3552:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3556:	42a6      	cmp	r6, r4
    3558:	d800      	bhi.n	355c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    355a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    355c:	e9d4 3500 	ldrd	r3, r5, [r4]
    3560:	4628      	mov	r0, r5
    3562:	4798      	blx	r3
		if (dev != NULL) {
    3564:	b165      	cbz	r5, 3580 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    3566:	68eb      	ldr	r3, [r5, #12]
    3568:	b130      	cbz	r0, 3578 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    356a:	2800      	cmp	r0, #0
    356c:	bfb8      	it	lt
    356e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3570:	28ff      	cmp	r0, #255	; 0xff
    3572:	bfa8      	it	ge
    3574:	20ff      	movge	r0, #255	; 0xff
    3576:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3578:	785a      	ldrb	r2, [r3, #1]
    357a:	f042 0201 	orr.w	r2, r2, #1
    357e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3580:	3408      	adds	r4, #8
    3582:	e7e8      	b.n	3556 <z_sys_init_run_level+0xe>
    3584:	00005778 	.word	0x00005778

00003588 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3588:	2201      	movs	r2, #1
{
    358a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    358c:	4b09      	ldr	r3, [pc, #36]	; (35b4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    358e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3590:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3592:	f7ff ffd9 	bl	3548 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3596:	f000 ff93 	bl	44c0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    359a:	2003      	movs	r0, #3
    359c:	f7ff ffd4 	bl	3548 <z_sys_init_run_level>

	z_init_static_threads();
    35a0:	f000 f938 	bl	3814 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    35a4:	f7fc ff54 	bl	450 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    35a8:	4a03      	ldr	r2, [pc, #12]	; (35b8 <bg_thread_main+0x30>)
    35aa:	7b13      	ldrb	r3, [r2, #12]
    35ac:	f023 0301 	bic.w	r3, r3, #1
    35b0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    35b2:	bd08      	pop	{r3, pc}
    35b4:	20000b19 	.word	0x20000b19
    35b8:	20000230 	.word	0x20000230

000035bc <z_bss_zero>:
{
    35bc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    35be:	4803      	ldr	r0, [pc, #12]	; (35cc <z_bss_zero+0x10>)
    35c0:	4a03      	ldr	r2, [pc, #12]	; (35d0 <z_bss_zero+0x14>)
    35c2:	2100      	movs	r1, #0
    35c4:	1a12      	subs	r2, r2, r0
    35c6:	f001 fd6c 	bl	50a2 <z_early_memset>
}
    35ca:	bd08      	pop	{r3, pc}
    35cc:	20000190 	.word	0x20000190
    35d0:	20000b1c 	.word	0x20000b1c

000035d4 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    35d4:	2300      	movs	r3, #0
    35d6:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    35d8:	b570      	push	{r4, r5, r6, lr}
    35da:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    35dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    35e0:	220f      	movs	r2, #15
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    35e2:	2518      	movs	r5, #24
	z_setup_new_thread(thread, stack,
    35e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    35e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    35ec:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    35ee:	4b0e      	ldr	r3, [pc, #56]	; (3628 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    35f0:	4e0e      	ldr	r6, [pc, #56]	; (362c <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    35f2:	fb05 3500 	mla	r5, r5, r0, r3
	z_setup_new_thread(thread, stack,
    35f6:	490e      	ldr	r1, [pc, #56]	; (3630 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    35f8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    35fc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    35fe:	fb02 1100 	mla	r1, r2, r0, r1
    3602:	4b0c      	ldr	r3, [pc, #48]	; (3634 <z_init_cpu+0x60>)
    3604:	4630      	mov	r0, r6
    3606:	9500      	str	r5, [sp, #0]
    3608:	f000 f8d4 	bl	37b4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    360c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    360e:	480a      	ldr	r0, [pc, #40]	; (3638 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    3610:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3612:	3401      	adds	r4, #1
    3614:	f023 0304 	bic.w	r3, r3, #4
    3618:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    361c:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    361e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    3620:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3622:	b006      	add	sp, #24
    3624:	bd70      	pop	{r4, r5, r6, pc}
    3626:	bf00      	nop
    3628:	20000908 	.word	0x20000908
    362c:	200001b0 	.word	0x200001b0
    3630:	20000f20 	.word	0x20000f20
    3634:	000038d1 	.word	0x000038d1
    3638:	20001060 	.word	0x20001060

0000363c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    363c:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    363e:	4b2d      	ldr	r3, [pc, #180]	; (36f4 <z_cstart+0xb8>)
    3640:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
    3642:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3646:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    364a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    364e:	2400      	movs	r4, #0
    3650:	23e0      	movs	r3, #224	; 0xe0
    3652:	4d29      	ldr	r5, [pc, #164]	; (36f8 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    3654:	4e29      	ldr	r6, [pc, #164]	; (36fc <z_cstart+0xc0>)
    3656:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    365a:	77ec      	strb	r4, [r5, #31]
    365c:	762c      	strb	r4, [r5, #24]
    365e:	766c      	strb	r4, [r5, #25]
    3660:	76ac      	strb	r4, [r5, #26]
    3662:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3668:	4f25      	ldr	r7, [pc, #148]	; (3700 <z_cstart+0xc4>)
    366a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    366e:	626b      	str	r3, [r5, #36]	; 0x24
    3670:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3674:	f7fe f87c 	bl	1770 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3678:	f7fd fe74 	bl	1364 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    367c:	f04f 33ff 	mov.w	r3, #4294967295
    3680:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3682:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3684:	f7fe fa68 	bl	1b58 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3688:	f7fe f922 	bl	18d0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    368c:	f240 1301 	movw	r3, #257	; 0x101
    3690:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3694:	ab06      	add	r3, sp, #24
    3696:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3698:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    369c:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    369e:	f001 fcda 	bl	5056 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    36a2:	4620      	mov	r0, r4
    36a4:	f7ff ff50 	bl	3548 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    36a8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    36aa:	4d16      	ldr	r5, [pc, #88]	; (3704 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    36ac:	f7ff ff4c 	bl	3548 <z_sys_init_run_level>
	z_sched_init();
    36b0:	f000 fc88 	bl	3fc4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    36b4:	4b14      	ldr	r3, [pc, #80]	; (3708 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    36b6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    36b8:	9305      	str	r3, [sp, #20]
    36ba:	2301      	movs	r3, #1
    36bc:	4913      	ldr	r1, [pc, #76]	; (370c <z_cstart+0xd0>)
    36be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    36c2:	e9cd 4303 	strd	r4, r3, [sp, #12]
    36c6:	4628      	mov	r0, r5
    36c8:	463b      	mov	r3, r7
    36ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
    36ce:	9400      	str	r4, [sp, #0]
    36d0:	f000 f870 	bl	37b4 <z_setup_new_thread>
    36d4:	4606      	mov	r6, r0
    36d6:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    36d8:	4628      	mov	r0, r5
    36da:	f022 0204 	bic.w	r2, r2, #4
    36de:	736a      	strb	r2, [r5, #13]
    36e0:	f001 fd6d 	bl	51be <z_ready_thread>
	z_init_cpu(0);
    36e4:	4620      	mov	r0, r4
    36e6:	f7ff ff75 	bl	35d4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    36ea:	463a      	mov	r2, r7
    36ec:	4631      	mov	r1, r6
    36ee:	4628      	mov	r0, r5
    36f0:	f7fd ff1c 	bl	152c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    36f4:	20001060 	.word	0x20001060
    36f8:	e000ed00 	.word	0xe000ed00
    36fc:	20000908 	.word	0x20000908
    3700:	00003589 	.word	0x00003589
    3704:	20000230 	.word	0x20000230
    3708:	000058d0 	.word	0x000058d0
    370c:	20000b20 	.word	0x20000b20

00003710 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3710:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3712:	4b0e      	ldr	r3, [pc, #56]	; (374c <init_mem_slab_module+0x3c>)
    3714:	4c0e      	ldr	r4, [pc, #56]	; (3750 <init_mem_slab_module+0x40>)
    3716:	42a3      	cmp	r3, r4
    3718:	d301      	bcc.n	371e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    371a:	2000      	movs	r0, #0
	return rc;
}
    371c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    371e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    3722:	ea41 0200 	orr.w	r2, r1, r0
    3726:	f012 0203 	ands.w	r2, r2, #3
    372a:	d10b      	bne.n	3744 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    372c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    372e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3730:	42aa      	cmp	r2, r5
    3732:	d101      	bne.n	3738 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3734:	331c      	adds	r3, #28
    3736:	e7ee      	b.n	3716 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    3738:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    373a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    373c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    373e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    3740:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    3742:	e7f5      	b.n	3730 <init_mem_slab_module+0x20>
		return -EINVAL;
    3744:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3748:	e7e8      	b.n	371c <init_mem_slab_module+0xc>
    374a:	bf00      	nop
    374c:	2000013c 	.word	0x2000013c
    3750:	2000013c 	.word	0x2000013c

00003754 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3754:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    3756:	460c      	mov	r4, r1
    3758:	4616      	mov	r6, r2
    375a:	461f      	mov	r7, r3
	__asm__ volatile(
    375c:	f04f 0320 	mov.w	r3, #32
    3760:	f3ef 8111 	mrs	r1, BASEPRI
    3764:	f383 8812 	msr	BASEPRI_MAX, r3
    3768:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    376c:	6943      	ldr	r3, [r0, #20]
    376e:	b15b      	cbz	r3, 3788 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    3770:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3772:	681b      	ldr	r3, [r3, #0]
    3774:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3776:	6983      	ldr	r3, [r0, #24]
    3778:	3301      	adds	r3, #1
    377a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    377c:	2000      	movs	r0, #0
	__asm__ volatile(
    377e:	f381 8811 	msr	BASEPRI, r1
    3782:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3786:	e011      	b.n	37ac <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3788:	ea56 0207 	orrs.w	r2, r6, r7
    378c:	d103      	bne.n	3796 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    378e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    3792:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    3794:	e7f3      	b.n	377e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3796:	4602      	mov	r2, r0
    3798:	e9cd 6700 	strd	r6, r7, [sp]
    379c:	3008      	adds	r0, #8
    379e:	f000 fb63 	bl	3e68 <z_pend_curr>
		if (result == 0) {
    37a2:	b918      	cbnz	r0, 37ac <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    37a4:	4b02      	ldr	r3, [pc, #8]	; (37b0 <k_mem_slab_alloc+0x5c>)
    37a6:	689b      	ldr	r3, [r3, #8]
    37a8:	695b      	ldr	r3, [r3, #20]
    37aa:	6023      	str	r3, [r4, #0]
}
    37ac:	b002      	add	sp, #8
    37ae:	bdd0      	pop	{r4, r6, r7, pc}
    37b0:	20000908 	.word	0x20000908

000037b4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    37b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    37b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    37ba:	f100 0558 	add.w	r5, r0, #88	; 0x58
    37be:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    37c0:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    37c2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    37c6:	2500      	movs	r5, #0
{
    37c8:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    37ca:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    37cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    37ce:	e9c0 5506 	strd	r5, r5, [r0, #24]
    37d2:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37d4:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37d8:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    37dc:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    37e0:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    37e2:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    37e4:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37e6:	9202      	str	r2, [sp, #8]
    37e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    37ea:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37ee:	9201      	str	r2, [sp, #4]
    37f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    37f2:	9200      	str	r2, [sp, #0]
    37f4:	4642      	mov	r2, r8
    37f6:	f7fd fe7d 	bl	14f4 <arch_new_thread>
	if (!_current) {
    37fa:	4b05      	ldr	r3, [pc, #20]	; (3810 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    37fc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    37fe:	689b      	ldr	r3, [r3, #8]
    3800:	b103      	cbz	r3, 3804 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    3802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    3804:	4640      	mov	r0, r8
    3806:	6723      	str	r3, [r4, #112]	; 0x70
    3808:	b004      	add	sp, #16
    380a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    380e:	bf00      	nop
    3810:	20000908 	.word	0x20000908

00003814 <z_init_static_threads>:
{
    3814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3818:	4e2a      	ldr	r6, [pc, #168]	; (38c4 <z_init_static_threads+0xb0>)
    381a:	4d2b      	ldr	r5, [pc, #172]	; (38c8 <z_init_static_threads+0xb4>)
    381c:	46b0      	mov	r8, r6
{
    381e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3820:	42b5      	cmp	r5, r6
    3822:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3826:	d310      	bcc.n	384a <z_init_static_threads+0x36>
	k_sched_lock();
    3828:	f000 f9d4 	bl	3bd4 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    382c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3830:	f240 36e7 	movw	r6, #999	; 0x3e7
    3834:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    3836:	4c24      	ldr	r4, [pc, #144]	; (38c8 <z_init_static_threads+0xb4>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3838:	f8df a090 	ldr.w	sl, [pc, #144]	; 38cc <z_init_static_threads+0xb8>
    383c:	4544      	cmp	r4, r8
    383e:	d321      	bcc.n	3884 <z_init_static_threads+0x70>
}
    3840:	b006      	add	sp, #24
    3842:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    3846:	f000 bba1 	b.w	3f8c <k_sched_unlock>
		z_setup_new_thread(
    384a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    384e:	9305      	str	r3, [sp, #20]
    3850:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3854:	9304      	str	r3, [sp, #16]
    3856:	f854 3c14 	ldr.w	r3, [r4, #-20]
    385a:	9303      	str	r3, [sp, #12]
    385c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3860:	9302      	str	r3, [sp, #8]
    3862:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3866:	9301      	str	r3, [sp, #4]
    3868:	f854 3c20 	ldr.w	r3, [r4, #-32]
    386c:	9300      	str	r3, [sp, #0]
    386e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3872:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3876:	f7ff ff9d 	bl	37b4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    387a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    387e:	655d      	str	r5, [r3, #84]	; 0x54
    3880:	4625      	mov	r5, r4
    3882:	e7cd      	b.n	3820 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3884:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3886:	1c5a      	adds	r2, r3, #1
    3888:	d00d      	beq.n	38a6 <z_init_static_threads+0x92>
    388a:	4630      	mov	r0, r6
    388c:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    388e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3892:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3896:	42b9      	cmp	r1, r7
    3898:	bf08      	it	eq
    389a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    389c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    389e:	d104      	bne.n	38aa <z_init_static_threads+0x96>
	z_sched_start(thread);
    38a0:	4628      	mov	r0, r5
    38a2:	f000 fa85 	bl	3db0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    38a6:	3430      	adds	r4, #48	; 0x30
    38a8:	e7c8      	b.n	383c <z_init_static_threads+0x28>
    38aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    38ae:	2300      	movs	r3, #0
    38b0:	f7fc fc50 	bl	154 <__aeabi_uldivmod>
    38b4:	4602      	mov	r2, r0
    38b6:	460b      	mov	r3, r1
    38b8:	f105 0018 	add.w	r0, r5, #24
    38bc:	4651      	mov	r1, sl
    38be:	f000 fcf3 	bl	42a8 <z_add_timeout>
    38c2:	e7f0      	b.n	38a6 <z_init_static_threads+0x92>
    38c4:	2000013c 	.word	0x2000013c
    38c8:	2000013c 	.word	0x2000013c
    38cc:	000051df 	.word	0x000051df

000038d0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    38d0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    38d2:	4c0b      	ldr	r4, [pc, #44]	; (3900 <idle+0x30>)
	return !z_sys_post_kernel;
    38d4:	4d0b      	ldr	r5, [pc, #44]	; (3904 <idle+0x34>)
	__asm__ volatile(
    38d6:	f04f 0220 	mov.w	r2, #32
    38da:	f3ef 8311 	mrs	r3, BASEPRI
    38de:	f382 8812 	msr	BASEPRI_MAX, r2
    38e2:	f3bf 8f6f 	isb	sy
    38e6:	f001 fcf7 	bl	52d8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    38ea:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    38ec:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    38ee:	b913      	cbnz	r3, 38f6 <idle+0x26>
	arch_cpu_idle();
    38f0:	f7fd fd3e 	bl	1370 <arch_cpu_idle>
}
    38f4:	e7ef      	b.n	38d6 <idle+0x6>
    38f6:	f7fd fb87 	bl	1008 <pm_system_suspend>
    38fa:	2800      	cmp	r0, #0
    38fc:	d1eb      	bne.n	38d6 <idle+0x6>
    38fe:	e7f7      	b.n	38f0 <idle+0x20>
    3900:	20000908 	.word	0x20000908
    3904:	20000b19 	.word	0x20000b19

00003908 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    390c:	4604      	mov	r4, r0
    390e:	4616      	mov	r6, r2
    3910:	461f      	mov	r7, r3
    3912:	f04f 0320 	mov.w	r3, #32
    3916:	f3ef 8811 	mrs	r8, BASEPRI
    391a:	f383 8812 	msr	BASEPRI_MAX, r3
    391e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3922:	68c3      	ldr	r3, [r0, #12]
    3924:	4a35      	ldr	r2, [pc, #212]	; (39fc <z_impl_k_mutex_lock+0xf4>)
    3926:	b16b      	cbz	r3, 3944 <z_impl_k_mutex_lock+0x3c>
    3928:	6880      	ldr	r0, [r0, #8]
    392a:	6891      	ldr	r1, [r2, #8]
    392c:	4288      	cmp	r0, r1
    392e:	d019      	beq.n	3964 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3930:	ea56 0307 	orrs.w	r3, r6, r7
    3934:	d118      	bne.n	3968 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    3936:	f388 8811 	msr	BASEPRI, r8
    393a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    393e:	f06f 000f 	mvn.w	r0, #15
    3942:	e00c      	b.n	395e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    3944:	6891      	ldr	r1, [r2, #8]
    3946:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    394a:	3301      	adds	r3, #1
    394c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    394e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3950:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    3952:	60a3      	str	r3, [r4, #8]
    3954:	f388 8811 	msr	BASEPRI, r8
    3958:	f3bf 8f6f 	isb	sy
		return 0;
    395c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    395e:	b002      	add	sp, #8
    3960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3964:	6921      	ldr	r1, [r4, #16]
    3966:	e7f0      	b.n	394a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3968:	f991 100e 	ldrsb.w	r1, [r1, #14]
    396c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    3970:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3974:	4299      	cmp	r1, r3
    3976:	bfa8      	it	ge
    3978:	4619      	movge	r1, r3
    397a:	4291      	cmp	r1, r2
    397c:	bfb8      	it	lt
    397e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3980:	428b      	cmp	r3, r1
    3982:	dd2f      	ble.n	39e4 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    3984:	f000 fa84 	bl	3e90 <z_set_prio>
    3988:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    398a:	4622      	mov	r2, r4
    398c:	4641      	mov	r1, r8
    398e:	e9cd 6700 	strd	r6, r7, [sp]
    3992:	481b      	ldr	r0, [pc, #108]	; (3a00 <z_impl_k_mutex_lock+0xf8>)
    3994:	f000 fa68 	bl	3e68 <z_pend_curr>
	if (got_mutex == 0) {
    3998:	2800      	cmp	r0, #0
    399a:	d0e0      	beq.n	395e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    399c:	f04f 0320 	mov.w	r3, #32
    39a0:	f3ef 8611 	mrs	r6, BASEPRI
    39a4:	f383 8812 	msr	BASEPRI_MAX, r3
    39a8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    39ac:	6823      	ldr	r3, [r4, #0]
    39ae:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39b0:	429c      	cmp	r4, r3
    39b2:	d00a      	beq.n	39ca <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    39b4:	b14b      	cbz	r3, 39ca <z_impl_k_mutex_lock+0xc2>
    39b6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    39ba:	4299      	cmp	r1, r3
    39bc:	bfa8      	it	ge
    39be:	4619      	movge	r1, r3
    39c0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    39c4:	4299      	cmp	r1, r3
    39c6:	bfb8      	it	lt
    39c8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    39ca:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    39cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    39d0:	4299      	cmp	r1, r3
    39d2:	d109      	bne.n	39e8 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    39d4:	b16d      	cbz	r5, 39f2 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    39d6:	4631      	mov	r1, r6
    39d8:	4809      	ldr	r0, [pc, #36]	; (3a00 <z_impl_k_mutex_lock+0xf8>)
    39da:	f000 f8e9 	bl	3bb0 <z_reschedule>
	return -EAGAIN;
    39de:	f06f 000a 	mvn.w	r0, #10
    39e2:	e7bc      	b.n	395e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    39e4:	2500      	movs	r5, #0
    39e6:	e7d0      	b.n	398a <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    39e8:	f000 fa52 	bl	3e90 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    39ec:	2800      	cmp	r0, #0
    39ee:	d1f2      	bne.n	39d6 <z_impl_k_mutex_lock+0xce>
    39f0:	e7f0      	b.n	39d4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    39f2:	f386 8811 	msr	BASEPRI, r6
    39f6:	f3bf 8f6f 	isb	sy
    39fa:	e7f0      	b.n	39de <z_impl_k_mutex_lock+0xd6>
    39fc:	20000908 	.word	0x20000908
    3a00:	20000b1a 	.word	0x20000b1a

00003a04 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3a04:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3a06:	6883      	ldr	r3, [r0, #8]
{
    3a08:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d036      	beq.n	3a7c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3a0e:	4a1e      	ldr	r2, [pc, #120]	; (3a88 <z_impl_k_mutex_unlock+0x84>)
    3a10:	6892      	ldr	r2, [r2, #8]
    3a12:	4293      	cmp	r3, r2
    3a14:	d135      	bne.n	3a82 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3a16:	7bda      	ldrb	r2, [r3, #15]
    3a18:	3a01      	subs	r2, #1
    3a1a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3a1c:	68c3      	ldr	r3, [r0, #12]
    3a1e:	2b01      	cmp	r3, #1
    3a20:	d905      	bls.n	3a2e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    3a22:	3b01      	subs	r3, #1
    3a24:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    3a26:	f000 fab1 	bl	3f8c <k_sched_unlock>

	return 0;
    3a2a:	2000      	movs	r0, #0
}
    3a2c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3a2e:	f04f 0320 	mov.w	r3, #32
    3a32:	f3ef 8511 	mrs	r5, BASEPRI
    3a36:	f383 8812 	msr	BASEPRI_MAX, r3
    3a3a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3a3e:	6901      	ldr	r1, [r0, #16]
    3a40:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    3a42:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3a46:	4299      	cmp	r1, r3
    3a48:	d001      	beq.n	3a4e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    3a4a:	f000 fa21 	bl	3e90 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3a4e:	4620      	mov	r0, r4
    3a50:	f001 fc14 	bl	527c <z_unpend_first_thread>
	mutex->owner = new_owner;
    3a54:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3a56:	b158      	cbz	r0, 3a70 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    3a58:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3a5c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3a5e:	2200      	movs	r2, #0
    3a60:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3a62:	f001 fbac 	bl	51be <z_ready_thread>
		z_reschedule(&lock, key);
    3a66:	4629      	mov	r1, r5
    3a68:	4808      	ldr	r0, [pc, #32]	; (3a8c <z_impl_k_mutex_unlock+0x88>)
    3a6a:	f000 f8a1 	bl	3bb0 <z_reschedule>
    3a6e:	e7da      	b.n	3a26 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    3a70:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3a72:	f385 8811 	msr	BASEPRI, r5
    3a76:	f3bf 8f6f 	isb	sy
    3a7a:	e7d4      	b.n	3a26 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    3a7c:	f06f 0015 	mvn.w	r0, #21
    3a80:	e7d4      	b.n	3a2c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    3a82:	f04f 30ff 	mov.w	r0, #4294967295
    3a86:	e7d1      	b.n	3a2c <z_impl_k_mutex_unlock+0x28>
    3a88:	20000908 	.word	0x20000908
    3a8c:	20000b1a 	.word	0x20000b1a

00003a90 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3a90:	b538      	push	{r3, r4, r5, lr}
    3a92:	4604      	mov	r4, r0
	__asm__ volatile(
    3a94:	f04f 0320 	mov.w	r3, #32
    3a98:	f3ef 8511 	mrs	r5, BASEPRI
    3a9c:	f383 8812 	msr	BASEPRI_MAX, r3
    3aa0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3aa4:	f001 fbea 	bl	527c <z_unpend_first_thread>

	if (thread != NULL) {
    3aa8:	b148      	cbz	r0, 3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
    3aaa:	2200      	movs	r2, #0
    3aac:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3aae:	f001 fb86 	bl	51be <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3ab2:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3ab8:	4804      	ldr	r0, [pc, #16]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3aba:	f000 b879 	b.w	3bb0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3abe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3ac2:	429a      	cmp	r2, r3
    3ac4:	bf18      	it	ne
    3ac6:	3301      	addne	r3, #1
    3ac8:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    3aca:	e7f2      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3acc:	20000b1a 	.word	0x20000b1a

00003ad0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3ad2:	4614      	mov	r4, r2
    3ad4:	461d      	mov	r5, r3
    3ad6:	f04f 0320 	mov.w	r3, #32
    3ada:	f3ef 8111 	mrs	r1, BASEPRI
    3ade:	f383 8812 	msr	BASEPRI_MAX, r3
    3ae2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3ae6:	6883      	ldr	r3, [r0, #8]
    3ae8:	b143      	cbz	r3, 3afc <z_impl_k_sem_take+0x2c>
		sem->count--;
    3aea:	3b01      	subs	r3, #1
    3aec:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    3aee:	f381 8811 	msr	BASEPRI, r1
    3af2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3af6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3af8:	b003      	add	sp, #12
    3afa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3afc:	ea54 0305 	orrs.w	r3, r4, r5
    3b00:	d106      	bne.n	3b10 <z_impl_k_sem_take+0x40>
    3b02:	f381 8811 	msr	BASEPRI, r1
    3b06:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3b0a:	f06f 000f 	mvn.w	r0, #15
    3b0e:	e7f3      	b.n	3af8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3b10:	4602      	mov	r2, r0
    3b12:	e9cd 4500 	strd	r4, r5, [sp]
    3b16:	4802      	ldr	r0, [pc, #8]	; (3b20 <z_impl_k_sem_take+0x50>)
    3b18:	f000 f9a6 	bl	3e68 <z_pend_curr>
	return ret;
    3b1c:	e7ec      	b.n	3af8 <z_impl_k_sem_take+0x28>
    3b1e:	bf00      	nop
    3b20:	20000b1a 	.word	0x20000b1a

00003b24 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3b24:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3b26:	4d07      	ldr	r5, [pc, #28]	; (3b44 <z_reset_time_slice+0x20>)
    3b28:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3b2a:	b154      	cbz	r4, 3b42 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3b2c:	f7fe ff26 	bl	297c <sys_clock_elapsed>
    3b30:	4b05      	ldr	r3, [pc, #20]	; (3b48 <z_reset_time_slice+0x24>)
    3b32:	4404      	add	r4, r0
    3b34:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3b36:	6828      	ldr	r0, [r5, #0]
    3b38:	2100      	movs	r1, #0
	}
}
    3b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    3b3e:	f001 bbdb 	b.w	52f8 <z_set_timeout_expiry>
}
    3b42:	bd38      	pop	{r3, r4, r5, pc}
    3b44:	20000938 	.word	0x20000938
    3b48:	20000908 	.word	0x20000908

00003b4c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b4e:	4605      	mov	r5, r0
    3b50:	460e      	mov	r6, r1
	__asm__ volatile(
    3b52:	f04f 0320 	mov.w	r3, #32
    3b56:	f3ef 8711 	mrs	r7, BASEPRI
    3b5a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3b62:	2300      	movs	r3, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    3b64:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    3b68:	f240 30e7 	movw	r0, #999	; 0x3e7
    3b6c:	2100      	movs	r1, #0
    3b6e:	4c0d      	ldr	r4, [pc, #52]	; (3ba4 <k_sched_time_slice_set+0x58>)
    3b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3b74:	6123      	str	r3, [r4, #16]
    3b76:	fbec 0105 	umlal	r0, r1, ip, r5
    3b7a:	2300      	movs	r3, #0
    3b7c:	f7fc faea 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3b80:	2d00      	cmp	r5, #0
    3b82:	4b09      	ldr	r3, [pc, #36]	; (3ba8 <k_sched_time_slice_set+0x5c>)
    3b84:	dc0a      	bgt.n	3b9c <k_sched_time_slice_set+0x50>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    3b86:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    3b88:	4b08      	ldr	r3, [pc, #32]	; (3bac <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    3b8a:	68a0      	ldr	r0, [r4, #8]
		slice_max_prio = prio;
    3b8c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    3b8e:	f7ff ffc9 	bl	3b24 <z_reset_time_slice>
	__asm__ volatile(
    3b92:	f387 8811 	msr	BASEPRI, r7
    3b96:	f3bf 8f6f 	isb	sy
	}
}
    3b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    3b9c:	2802      	cmp	r0, #2
    3b9e:	bfb8      	it	lt
    3ba0:	2002      	movlt	r0, #2
    3ba2:	e7f0      	b.n	3b86 <k_sched_time_slice_set+0x3a>
    3ba4:	20000908 	.word	0x20000908
    3ba8:	20000938 	.word	0x20000938
    3bac:	20000934 	.word	0x20000934

00003bb0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3bb0:	b949      	cbnz	r1, 3bc6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3bb2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3bb6:	b930      	cbnz	r0, 3bc6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3bb8:	4b05      	ldr	r3, [pc, #20]	; (3bd0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3bba:	69da      	ldr	r2, [r3, #28]
    3bbc:	689b      	ldr	r3, [r3, #8]
    3bbe:	429a      	cmp	r2, r3
    3bc0:	d001      	beq.n	3bc6 <z_reschedule+0x16>
	ret = arch_swap(key);
    3bc2:	f7fd bc41 	b.w	1448 <arch_swap>
    3bc6:	f381 8811 	msr	BASEPRI, r1
    3bca:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3bce:	4770      	bx	lr
    3bd0:	20000908 	.word	0x20000908

00003bd4 <k_sched_lock>:
	__asm__ volatile(
    3bd4:	f04f 0320 	mov.w	r3, #32
    3bd8:	f3ef 8111 	mrs	r1, BASEPRI
    3bdc:	f383 8812 	msr	BASEPRI_MAX, r3
    3be0:	f3bf 8f6f 	isb	sy
    3be4:	4b04      	ldr	r3, [pc, #16]	; (3bf8 <k_sched_lock+0x24>)
    3be6:	689a      	ldr	r2, [r3, #8]
    3be8:	7bd3      	ldrb	r3, [r2, #15]
    3bea:	3b01      	subs	r3, #1
    3bec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3bee:	f381 8811 	msr	BASEPRI, r1
    3bf2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3bf6:	4770      	bx	lr
    3bf8:	20000908 	.word	0x20000908

00003bfc <update_cache>:
{
    3bfc:	b538      	push	{r3, r4, r5, lr}
    3bfe:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3c00:	480c      	ldr	r0, [pc, #48]	; (3c34 <update_cache+0x38>)
    3c02:	f001 fad2 	bl	51aa <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3c06:	4d0c      	ldr	r5, [pc, #48]	; (3c38 <update_cache+0x3c>)
    3c08:	4604      	mov	r4, r0
    3c0a:	b900      	cbnz	r0, 3c0e <update_cache+0x12>
    3c0c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    3c0e:	68ab      	ldr	r3, [r5, #8]
    3c10:	b94a      	cbnz	r2, 3c26 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    3c12:	7b5a      	ldrb	r2, [r3, #13]
    3c14:	06d2      	lsls	r2, r2, #27
    3c16:	d106      	bne.n	3c26 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3c18:	69a2      	ldr	r2, [r4, #24]
    3c1a:	b922      	cbnz	r2, 3c26 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    3c1c:	89da      	ldrh	r2, [r3, #14]
    3c1e:	2a7f      	cmp	r2, #127	; 0x7f
    3c20:	d901      	bls.n	3c26 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    3c22:	61eb      	str	r3, [r5, #28]
}
    3c24:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3c26:	429c      	cmp	r4, r3
    3c28:	d002      	beq.n	3c30 <update_cache+0x34>
			z_reset_time_slice(thread);
    3c2a:	4620      	mov	r0, r4
    3c2c:	f7ff ff7a 	bl	3b24 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3c30:	61ec      	str	r4, [r5, #28]
}
    3c32:	e7f7      	b.n	3c24 <update_cache+0x28>
    3c34:	20000928 	.word	0x20000928
    3c38:	20000908 	.word	0x20000908

00003c3c <move_thread_to_end_of_prio_q>:
{
    3c3c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3c3e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3c42:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3c44:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3c46:	7b43      	ldrb	r3, [r0, #13]
    3c48:	da04      	bge.n	3c54 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3c4e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3c50:	f001 fa83 	bl	515a <sys_dlist_remove>
	return list->head == list;
    3c54:	4a17      	ldr	r2, [pc, #92]	; (3cb4 <move_thread_to_end_of_prio_q+0x78>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3c56:	7b4b      	ldrb	r3, [r1, #13]
    3c58:	4610      	mov	r0, r2
    3c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c5e:	734b      	strb	r3, [r1, #13]
    3c60:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3c64:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c66:	4283      	cmp	r3, r0
    3c68:	bf08      	it	eq
    3c6a:	2300      	moveq	r3, #0
    3c6c:	2b00      	cmp	r3, #0
    3c6e:	bf38      	it	cc
    3c70:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3c72:	b1cb      	cbz	r3, 3ca8 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    3c74:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3c78:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    3c7c:	42a6      	cmp	r6, r4
    3c7e:	d00f      	beq.n	3ca0 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    3c80:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3c82:	2c00      	cmp	r4, #0
    3c84:	dd0c      	ble.n	3ca0 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3c86:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3c88:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3c8c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3c8e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3c90:	6890      	ldr	r0, [r2, #8]
}
    3c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3c96:	1a43      	subs	r3, r0, r1
    3c98:	4258      	negs	r0, r3
    3c9a:	4158      	adcs	r0, r3
    3c9c:	f7ff bfae 	b.w	3bfc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3ca0:	42ab      	cmp	r3, r5
    3ca2:	d001      	beq.n	3ca8 <move_thread_to_end_of_prio_q+0x6c>
    3ca4:	681b      	ldr	r3, [r3, #0]
    3ca6:	e7e4      	b.n	3c72 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    3ca8:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    3cac:	6029      	str	r1, [r5, #0]
	list->tail = node;
    3cae:	6251      	str	r1, [r2, #36]	; 0x24
}
    3cb0:	e7ee      	b.n	3c90 <move_thread_to_end_of_prio_q+0x54>
    3cb2:	bf00      	nop
    3cb4:	20000908 	.word	0x20000908

00003cb8 <z_time_slice>:
{
    3cb8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    3cba:	f04f 0320 	mov.w	r3, #32
    3cbe:	f3ef 8511 	mrs	r5, BASEPRI
    3cc2:	f383 8812 	msr	BASEPRI_MAX, r3
    3cc6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3cca:	4b18      	ldr	r3, [pc, #96]	; (3d2c <z_time_slice+0x74>)
    3ccc:	4a18      	ldr	r2, [pc, #96]	; (3d30 <z_time_slice+0x78>)
    3cce:	689c      	ldr	r4, [r3, #8]
    3cd0:	6811      	ldr	r1, [r2, #0]
    3cd2:	428c      	cmp	r4, r1
    3cd4:	4619      	mov	r1, r3
    3cd6:	d107      	bne.n	3ce8 <z_time_slice+0x30>
	z_reset_time_slice(curr);
    3cd8:	4620      	mov	r0, r4
    3cda:	f7ff ff23 	bl	3b24 <z_reset_time_slice>
	__asm__ volatile(
    3cde:	f385 8811 	msr	BASEPRI, r5
    3ce2:	f3bf 8f6f 	isb	sy
}
    3ce6:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    3ce8:	2600      	movs	r6, #0
    3cea:	6016      	str	r6, [r2, #0]
	int ret = slice_ticks;
    3cec:	4a11      	ldr	r2, [pc, #68]	; (3d34 <z_time_slice+0x7c>)
	if (slice_time(_current) && sliceable(_current)) {
    3cee:	6812      	ldr	r2, [r2, #0]
    3cf0:	b1c2      	cbz	r2, 3d24 <z_time_slice+0x6c>
		&& !z_is_idle_thread_object(thread);
    3cf2:	89e2      	ldrh	r2, [r4, #14]
    3cf4:	2a7f      	cmp	r2, #127	; 0x7f
    3cf6:	d815      	bhi.n	3d24 <z_time_slice+0x6c>
		&& !z_is_thread_prevented_from_running(thread)
    3cf8:	7b62      	ldrb	r2, [r4, #13]
    3cfa:	06d2      	lsls	r2, r2, #27
    3cfc:	d112      	bne.n	3d24 <z_time_slice+0x6c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3cfe:	4a0e      	ldr	r2, [pc, #56]	; (3d38 <z_time_slice+0x80>)
    3d00:	f994 600e 	ldrsb.w	r6, [r4, #14]
    3d04:	6812      	ldr	r2, [r2, #0]
    3d06:	4296      	cmp	r6, r2
    3d08:	db0c      	blt.n	3d24 <z_time_slice+0x6c>
	if (slice_time(_current) && sliceable(_current)) {
    3d0a:	4a0c      	ldr	r2, [pc, #48]	; (3d3c <z_time_slice+0x84>)
    3d0c:	4294      	cmp	r4, r2
    3d0e:	d009      	beq.n	3d24 <z_time_slice+0x6c>
		if (ticks >= _current_cpu->slice_ticks) {
    3d10:	691a      	ldr	r2, [r3, #16]
    3d12:	4282      	cmp	r2, r0
    3d14:	dc03      	bgt.n	3d1e <z_time_slice+0x66>
		move_thread_to_end_of_prio_q(curr);
    3d16:	4620      	mov	r0, r4
    3d18:	f7ff ff90 	bl	3c3c <move_thread_to_end_of_prio_q>
    3d1c:	e7dc      	b.n	3cd8 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    3d1e:	1a12      	subs	r2, r2, r0
    3d20:	611a      	str	r2, [r3, #16]
    3d22:	e7dc      	b.n	3cde <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    3d24:	2300      	movs	r3, #0
    3d26:	610b      	str	r3, [r1, #16]
    3d28:	e7d9      	b.n	3cde <z_time_slice+0x26>
    3d2a:	bf00      	nop
    3d2c:	20000908 	.word	0x20000908
    3d30:	20000930 	.word	0x20000930
    3d34:	20000938 	.word	0x20000938
    3d38:	20000934 	.word	0x20000934
    3d3c:	200001b0 	.word	0x200001b0

00003d40 <ready_thread>:
{
    3d40:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3d42:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3d46:	7b42      	ldrb	r2, [r0, #13]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	db2d      	blt.n	3da8 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3d4c:	06d3      	lsls	r3, r2, #27
    3d4e:	d12b      	bne.n	3da8 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    3d50:	6983      	ldr	r3, [r0, #24]
    3d52:	bb4b      	cbnz	r3, 3da8 <ready_thread+0x68>
	return list->head == list;
    3d54:	4915      	ldr	r1, [pc, #84]	; (3dac <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3d5a:	7342      	strb	r2, [r0, #13]
    3d5c:	460a      	mov	r2, r1
    3d5e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3d62:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d64:	4294      	cmp	r4, r2
    3d66:	bf18      	it	ne
    3d68:	4623      	movne	r3, r4
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	bf38      	it	cc
    3d6e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d70:	b1ab      	cbz	r3, 3d9e <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    3d72:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3d76:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    3d7a:	42a6      	cmp	r6, r4
    3d7c:	d00b      	beq.n	3d96 <ready_thread+0x56>
		return b2 - b1;
    3d7e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3d80:	2c00      	cmp	r4, #0
    3d82:	dd08      	ble.n	3d96 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    3d84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3d86:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3d8a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3d8c:	6058      	str	r0, [r3, #4]
		update_cache(0);
    3d8e:	2000      	movs	r0, #0
}
    3d90:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3d92:	f7ff bf33 	b.w	3bfc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3d96:	42ab      	cmp	r3, r5
    3d98:	d001      	beq.n	3d9e <ready_thread+0x5e>
    3d9a:	681b      	ldr	r3, [r3, #0]
    3d9c:	e7e8      	b.n	3d70 <ready_thread+0x30>
	node->prev = tail;
    3d9e:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    3da2:	6028      	str	r0, [r5, #0]
	list->tail = node;
    3da4:	6248      	str	r0, [r1, #36]	; 0x24
}
    3da6:	e7f2      	b.n	3d8e <ready_thread+0x4e>
}
    3da8:	bc70      	pop	{r4, r5, r6}
    3daa:	4770      	bx	lr
    3dac:	20000908 	.word	0x20000908

00003db0 <z_sched_start>:
{
    3db0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3db2:	f04f 0220 	mov.w	r2, #32
    3db6:	f3ef 8411 	mrs	r4, BASEPRI
    3dba:	f382 8812 	msr	BASEPRI_MAX, r2
    3dbe:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    3dc2:	7b42      	ldrb	r2, [r0, #13]
    3dc4:	0751      	lsls	r1, r2, #29
    3dc6:	d404      	bmi.n	3dd2 <z_sched_start+0x22>
	__asm__ volatile(
    3dc8:	f384 8811 	msr	BASEPRI, r4
    3dcc:	f3bf 8f6f 	isb	sy
}
    3dd0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3dd2:	f022 0204 	bic.w	r2, r2, #4
    3dd6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3dd8:	f7ff ffb2 	bl	3d40 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3ddc:	4621      	mov	r1, r4
}
    3dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3de2:	4801      	ldr	r0, [pc, #4]	; (3de8 <z_sched_start+0x38>)
    3de4:	f7ff bee4 	b.w	3bb0 <z_reschedule>
    3de8:	20000b1a 	.word	0x20000b1a

00003dec <unready_thread>:
{
    3dec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3dee:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3df2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3df4:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3df6:	7b43      	ldrb	r3, [r0, #13]
    3df8:	da04      	bge.n	3e04 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3dfe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3e00:	f001 f9ab 	bl	515a <sys_dlist_remove>
	update_cache(thread == _current);
    3e04:	4b04      	ldr	r3, [pc, #16]	; (3e18 <unready_thread+0x2c>)
    3e06:	6898      	ldr	r0, [r3, #8]
    3e08:	1a43      	subs	r3, r0, r1
    3e0a:	4258      	negs	r0, r3
    3e0c:	4158      	adcs	r0, r3
}
    3e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3e12:	f7ff bef3 	b.w	3bfc <update_cache>
    3e16:	bf00      	nop
    3e18:	20000908 	.word	0x20000908

00003e1c <pend>:
{
    3e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e20:	4606      	mov	r6, r0
    3e22:	4614      	mov	r4, r2
    3e24:	461d      	mov	r5, r3
	__asm__ volatile(
    3e26:	f04f 0320 	mov.w	r3, #32
    3e2a:	f3ef 8711 	mrs	r7, BASEPRI
    3e2e:	f383 8812 	msr	BASEPRI_MAX, r3
    3e32:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3e36:	f001 f9f4 	bl	5222 <add_to_waitq_locked>
	__asm__ volatile(
    3e3a:	f387 8811 	msr	BASEPRI, r7
    3e3e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3e42:	1c6b      	adds	r3, r5, #1
    3e44:	bf08      	it	eq
    3e46:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    3e4a:	d008      	beq.n	3e5e <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3e4c:	4622      	mov	r2, r4
    3e4e:	462b      	mov	r3, r5
    3e50:	f106 0018 	add.w	r0, r6, #24
    3e54:	4903      	ldr	r1, [pc, #12]	; (3e64 <pend+0x48>)
}
    3e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e5a:	f000 ba25 	b.w	42a8 <z_add_timeout>
    3e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e62:	bf00      	nop
    3e64:	000051df 	.word	0x000051df

00003e68 <z_pend_curr>:
{
    3e68:	b510      	push	{r4, lr}
    3e6a:	460c      	mov	r4, r1
	pending_current = _current;
    3e6c:	4b06      	ldr	r3, [pc, #24]	; (3e88 <z_pend_curr+0x20>)
{
    3e6e:	4611      	mov	r1, r2
	pending_current = _current;
    3e70:	6898      	ldr	r0, [r3, #8]
    3e72:	4b06      	ldr	r3, [pc, #24]	; (3e8c <z_pend_curr+0x24>)
    3e74:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    3e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3e7a:	f7ff ffcf 	bl	3e1c <pend>
    3e7e:	4620      	mov	r0, r4
}
    3e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e84:	f7fd bae0 	b.w	1448 <arch_swap>
    3e88:	20000908 	.word	0x20000908
    3e8c:	20000930 	.word	0x20000930

00003e90 <z_set_prio>:
{
    3e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e92:	4604      	mov	r4, r0
	__asm__ volatile(
    3e94:	f04f 0320 	mov.w	r3, #32
    3e98:	f3ef 8611 	mrs	r6, BASEPRI
    3e9c:	f383 8812 	msr	BASEPRI_MAX, r3
    3ea0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3ea4:	7b43      	ldrb	r3, [r0, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    3ea6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3ea8:	06da      	lsls	r2, r3, #27
    3eaa:	d138      	bne.n	3f1e <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    3eac:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    3eae:	2d00      	cmp	r5, #0
    3eb0:	d135      	bne.n	3f1e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3eb6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3eb8:	f001 f94f 	bl	515a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3ebc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    3ebe:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    3ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3ec4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    3ec6:	4817      	ldr	r0, [pc, #92]	; (3f24 <z_set_prio+0x94>)
    3ec8:	4603      	mov	r3, r0
    3eca:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ece:	429f      	cmp	r7, r3
    3ed0:	bf18      	it	ne
    3ed2:	463d      	movne	r5, r7
    3ed4:	2d00      	cmp	r5, #0
    3ed6:	461a      	mov	r2, r3
    3ed8:	462b      	mov	r3, r5
    3eda:	bf38      	it	cc
    3edc:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3ede:	6a47      	ldr	r7, [r0, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ee0:	b1c3      	cbz	r3, 3f14 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    3ee2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    3ee6:	42a9      	cmp	r1, r5
    3ee8:	d010      	beq.n	3f0c <z_set_prio+0x7c>
		return b2 - b1;
    3eea:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    3eec:	2d00      	cmp	r5, #0
    3eee:	dd0d      	ble.n	3f0c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    3ef0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3ef2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3ef6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3ef8:	605c      	str	r4, [r3, #4]
			update_cache(1);
    3efa:	2001      	movs	r0, #1
    3efc:	f7ff fe7e 	bl	3bfc <update_cache>
    3f00:	2001      	movs	r0, #1
	__asm__ volatile(
    3f02:	f386 8811 	msr	BASEPRI, r6
    3f06:	f3bf 8f6f 	isb	sy
}
    3f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3f0c:	42bb      	cmp	r3, r7
    3f0e:	d001      	beq.n	3f14 <z_set_prio+0x84>
    3f10:	681b      	ldr	r3, [r3, #0]
    3f12:	e7e5      	b.n	3ee0 <z_set_prio+0x50>
	node->prev = tail;
    3f14:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    3f18:	603c      	str	r4, [r7, #0]
	list->tail = node;
    3f1a:	6244      	str	r4, [r0, #36]	; 0x24
}
    3f1c:	e7ed      	b.n	3efa <z_set_prio+0x6a>
			thread->base.prio = prio;
    3f1e:	2000      	movs	r0, #0
    3f20:	73a1      	strb	r1, [r4, #14]
    3f22:	e7ee      	b.n	3f02 <z_set_prio+0x72>
    3f24:	20000908 	.word	0x20000908

00003f28 <z_impl_k_thread_suspend>:
{
    3f28:	b570      	push	{r4, r5, r6, lr}
    3f2a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f2c:	3018      	adds	r0, #24
    3f2e:	f001 f9bd 	bl	52ac <z_abort_timeout>
	__asm__ volatile(
    3f32:	f04f 0320 	mov.w	r3, #32
    3f36:	f3ef 8611 	mrs	r6, BASEPRI
    3f3a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f3e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3f42:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3f46:	7b63      	ldrb	r3, [r4, #13]
    3f48:	2a00      	cmp	r2, #0
    3f4a:	da05      	bge.n	3f58 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f50:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f52:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f54:	f001 f901 	bl	515a <sys_dlist_remove>
		update_cache(thread == _current);
    3f58:	4d0b      	ldr	r5, [pc, #44]	; (3f88 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3f5a:	7b63      	ldrb	r3, [r4, #13]
    3f5c:	68a8      	ldr	r0, [r5, #8]
    3f5e:	f043 0310 	orr.w	r3, r3, #16
    3f62:	7363      	strb	r3, [r4, #13]
    3f64:	1b03      	subs	r3, r0, r4
    3f66:	4258      	negs	r0, r3
    3f68:	4158      	adcs	r0, r3
    3f6a:	f7ff fe47 	bl	3bfc <update_cache>
	__asm__ volatile(
    3f6e:	f386 8811 	msr	BASEPRI, r6
    3f72:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3f76:	68ab      	ldr	r3, [r5, #8]
    3f78:	42a3      	cmp	r3, r4
    3f7a:	d103      	bne.n	3f84 <z_impl_k_thread_suspend+0x5c>
}
    3f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3f80:	f001 b909 	b.w	5196 <z_reschedule_unlocked>
}
    3f84:	bd70      	pop	{r4, r5, r6, pc}
    3f86:	bf00      	nop
    3f88:	20000908 	.word	0x20000908

00003f8c <k_sched_unlock>:
{
    3f8c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f8e:	f04f 0320 	mov.w	r3, #32
    3f92:	f3ef 8411 	mrs	r4, BASEPRI
    3f96:	f383 8812 	msr	BASEPRI_MAX, r3
    3f9a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3f9e:	4b08      	ldr	r3, [pc, #32]	; (3fc0 <k_sched_unlock+0x34>)
		update_cache(0);
    3fa0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3fa2:	689a      	ldr	r2, [r3, #8]
    3fa4:	7bd3      	ldrb	r3, [r2, #15]
    3fa6:	3301      	adds	r3, #1
    3fa8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3faa:	f7ff fe27 	bl	3bfc <update_cache>
	__asm__ volatile(
    3fae:	f384 8811 	msr	BASEPRI, r4
    3fb2:	f3bf 8f6f 	isb	sy
}
    3fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3fba:	f001 b8ec 	b.w	5196 <z_reschedule_unlocked>
    3fbe:	bf00      	nop
    3fc0:	20000908 	.word	0x20000908

00003fc4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3fc4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    3fc6:	4b04      	ldr	r3, [pc, #16]	; (3fd8 <z_sched_init+0x14>)
    3fc8:	4608      	mov	r0, r1
    3fca:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3fce:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3fd2:	f7ff bdbb 	b.w	3b4c <k_sched_time_slice_set>
    3fd6:	bf00      	nop
    3fd8:	20000908 	.word	0x20000908

00003fdc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    3fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3fde:	f04f 0320 	mov.w	r3, #32
    3fe2:	f3ef 8411 	mrs	r4, BASEPRI
    3fe6:	f383 8812 	msr	BASEPRI_MAX, r3
    3fea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3fee:	491b      	ldr	r1, [pc, #108]	; (405c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
    3ff0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ff2:	7b43      	ldrb	r3, [r0, #13]
    3ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ff8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3ffa:	f001 f8ae 	bl	515a <sys_dlist_remove>
	return list->head == list;
    3ffe:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    4000:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4002:	7b53      	ldrb	r3, [r2, #13]
    4004:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4008:	7353      	strb	r3, [r2, #13]
    400a:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    400e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4010:	4283      	cmp	r3, r0
    4012:	bf08      	it	eq
    4014:	2300      	moveq	r3, #0
    4016:	2b00      	cmp	r3, #0
    4018:	bf38      	it	cc
    401a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    401c:	b1cb      	cbz	r3, 4052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
	int32_t b1 = thread_1->base.prio;
    401e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    4022:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4026:	42af      	cmp	r7, r5
    4028:	d00f      	beq.n	404a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
		return b2 - b1;
    402a:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    402c:	2d00      	cmp	r5, #0
    402e:	dd0c      	ble.n	404a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
	sys_dnode_t *const prev = successor->prev;
    4030:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4032:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    4036:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    4038:	605a      	str	r2, [r3, #4]
	update_cache(1);
    403a:	2001      	movs	r0, #1
    403c:	f7ff fdde 	bl	3bfc <update_cache>
    4040:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    4042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4046:	f7fd b9ff 	b.w	1448 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    404a:	42b3      	cmp	r3, r6
    404c:	d001      	beq.n	4052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	e7e4      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	node->prev = tail;
    4052:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    4056:	6032      	str	r2, [r6, #0]
	list->tail = node;
    4058:	624a      	str	r2, [r1, #36]	; 0x24
}
    405a:	e7ee      	b.n	403a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    405c:	20000908 	.word	0x20000908

00004060 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    4060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4064:	4604      	mov	r4, r0
    4066:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4068:	ea54 0105 	orrs.w	r1, r4, r5
    406c:	d104      	bne.n	4078 <z_tick_sleep+0x18>
	z_impl_k_yield();
    406e:	f7ff ffb5 	bl	3fdc <z_impl_k_yield>
		k_yield();
		return 0;
    4072:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    4074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    4078:	f06f 0101 	mvn.w	r1, #1
    407c:	1a0a      	subs	r2, r1, r0
    407e:	f04f 31ff 	mov.w	r1, #4294967295
    4082:	eb61 0305 	sbc.w	r3, r1, r5
    4086:	2a01      	cmp	r2, #1
    4088:	f173 0300 	sbcs.w	r3, r3, #0
    408c:	da2a      	bge.n	40e4 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    408e:	f001 f94d 	bl	532c <sys_clock_tick_get_32>
    4092:	1906      	adds	r6, r0, r4
    4094:	f04f 0320 	mov.w	r3, #32
    4098:	f3ef 8811 	mrs	r8, BASEPRI
    409c:	f383 8812 	msr	BASEPRI_MAX, r3
    40a0:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    40a4:	4f11      	ldr	r7, [pc, #68]	; (40ec <z_tick_sleep+0x8c>)
    40a6:	4b12      	ldr	r3, [pc, #72]	; (40f0 <z_tick_sleep+0x90>)
    40a8:	68b8      	ldr	r0, [r7, #8]
    40aa:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    40ac:	f7ff fe9e 	bl	3dec <unready_thread>
	z_add_thread_timeout(_current, timeout);
    40b0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    40b2:	4910      	ldr	r1, [pc, #64]	; (40f4 <z_tick_sleep+0x94>)
    40b4:	4622      	mov	r2, r4
    40b6:	462b      	mov	r3, r5
    40b8:	3018      	adds	r0, #24
    40ba:	f000 f8f5 	bl	42a8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    40be:	68ba      	ldr	r2, [r7, #8]
    40c0:	4640      	mov	r0, r8
    40c2:	7b53      	ldrb	r3, [r2, #13]
    40c4:	f043 0310 	orr.w	r3, r3, #16
    40c8:	7353      	strb	r3, [r2, #13]
    40ca:	f7fd f9bd 	bl	1448 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    40ce:	f001 f92d 	bl	532c <sys_clock_tick_get_32>
    40d2:	1a30      	subs	r0, r6, r0
    40d4:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    40d8:	2801      	cmp	r0, #1
    40da:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    40de:	bfb8      	it	lt
    40e0:	2000      	movlt	r0, #0
    40e2:	e7c7      	b.n	4074 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    40e4:	f06f 0601 	mvn.w	r6, #1
    40e8:	1a36      	subs	r6, r6, r0
    40ea:	e7d3      	b.n	4094 <z_tick_sleep+0x34>
    40ec:	20000908 	.word	0x20000908
    40f0:	20000930 	.word	0x20000930
    40f4:	000051df 	.word	0x000051df

000040f8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    40f8:	b508      	push	{r3, lr}
    40fa:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    40fc:	3301      	adds	r3, #1
    40fe:	bf08      	it	eq
    4100:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4104:	d106      	bne.n	4114 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4106:	4b08      	ldr	r3, [pc, #32]	; (4128 <z_impl_k_sleep+0x30>)
    4108:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    410a:	f7ff ff0d 	bl	3f28 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    410e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4112:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4114:	f7ff ffa4 	bl	4060 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    411c:	fb80 2303 	smull	r2, r3, r0, r3
    4120:	0bd0      	lsrs	r0, r2, #15
    4122:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4126:	e7f4      	b.n	4112 <z_impl_k_sleep+0x1a>
    4128:	20000908 	.word	0x20000908

0000412c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    412c:	4b01      	ldr	r3, [pc, #4]	; (4134 <z_impl_z_current_get+0x8>)
    412e:	6898      	ldr	r0, [r3, #8]
    4130:	4770      	bx	lr
    4132:	bf00      	nop
    4134:	20000908 	.word	0x20000908

00004138 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    413c:	4604      	mov	r4, r0
    413e:	f04f 0320 	mov.w	r3, #32
    4142:	f3ef 8611 	mrs	r6, BASEPRI
    4146:	f383 8812 	msr	BASEPRI_MAX, r3
    414a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    414e:	7b43      	ldrb	r3, [r0, #13]
    4150:	071a      	lsls	r2, r3, #28
    4152:	d505      	bpl.n	4160 <z_thread_abort+0x28>
	__asm__ volatile(
    4154:	f386 8811 	msr	BASEPRI, r6
    4158:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4160:	f023 0220 	bic.w	r2, r3, #32
    4164:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4168:	09d2      	lsrs	r2, r2, #7
    416a:	d120      	bne.n	41ae <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    416c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    416e:	68a3      	ldr	r3, [r4, #8]
    4170:	b113      	cbz	r3, 4178 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4172:	4620      	mov	r0, r4
    4174:	f000 fff9 	bl	516a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4178:	f104 0018 	add.w	r0, r4, #24
    417c:	f001 f896 	bl	52ac <z_abort_timeout>
    4180:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4184:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    4188:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    418a:	42bd      	cmp	r5, r7
    418c:	d000      	beq.n	4190 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    418e:	b9b5      	cbnz	r5, 41be <z_thread_abort+0x86>
		update_cache(1);
    4190:	2001      	movs	r0, #1
    4192:	f7ff fd33 	bl	3bfc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4196:	4b10      	ldr	r3, [pc, #64]	; (41d8 <z_thread_abort+0xa0>)
    4198:	689b      	ldr	r3, [r3, #8]
    419a:	42a3      	cmp	r3, r4
    419c:	d1da      	bne.n	4154 <z_thread_abort+0x1c>
    419e:	f3ef 8305 	mrs	r3, IPSR
    41a2:	2b00      	cmp	r3, #0
    41a4:	d1d6      	bne.n	4154 <z_thread_abort+0x1c>
    41a6:	4630      	mov	r0, r6
    41a8:	f7fd f94e 	bl	1448 <arch_swap>
	return ret;
    41ac:	e7d2      	b.n	4154 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41ae:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    41b2:	f043 0308 	orr.w	r3, r3, #8
    41b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    41b8:	f000 ffcf 	bl	515a <sys_dlist_remove>
}
    41bc:	e7d7      	b.n	416e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    41be:	4628      	mov	r0, r5
    41c0:	f000 ffd3 	bl	516a <unpend_thread_no_timeout>
    41c4:	f105 0018 	add.w	r0, r5, #24
    41c8:	f001 f870 	bl	52ac <z_abort_timeout>
		ready_thread(thread);
    41cc:	4628      	mov	r0, r5
    41ce:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    41d2:	f7ff fdb5 	bl	3d40 <ready_thread>
    41d6:	e7d7      	b.n	4188 <z_thread_abort+0x50>
    41d8:	20000908 	.word	0x20000908

000041dc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    41dc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    41de:	4806      	ldr	r0, [pc, #24]	; (41f8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    41e0:	4a06      	ldr	r2, [pc, #24]	; (41fc <z_data_copy+0x20>)
    41e2:	4907      	ldr	r1, [pc, #28]	; (4200 <z_data_copy+0x24>)
    41e4:	1a12      	subs	r2, r2, r0
    41e6:	f000 ff5e 	bl	50a6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    41ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    41ee:	4a05      	ldr	r2, [pc, #20]	; (4204 <z_data_copy+0x28>)
    41f0:	4905      	ldr	r1, [pc, #20]	; (4208 <z_data_copy+0x2c>)
    41f2:	4806      	ldr	r0, [pc, #24]	; (420c <z_data_copy+0x30>)
    41f4:	f000 bf57 	b.w	50a6 <z_early_memcpy>
    41f8:	20000000 	.word	0x20000000
    41fc:	2000018c 	.word	0x2000018c
    4200:	00005910 	.word	0x00005910
    4204:	00000000 	.word	0x00000000
    4208:	00005910 	.word	0x00005910
    420c:	20000000 	.word	0x20000000

00004210 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4210:	4b03      	ldr	r3, [pc, #12]	; (4220 <elapsed+0x10>)
    4212:	681b      	ldr	r3, [r3, #0]
    4214:	b90b      	cbnz	r3, 421a <elapsed+0xa>
    4216:	f7fe bbb1 	b.w	297c <sys_clock_elapsed>
}
    421a:	2000      	movs	r0, #0
    421c:	4770      	bx	lr
    421e:	bf00      	nop
    4220:	2000093c 	.word	0x2000093c

00004224 <remove_timeout>:
{
    4224:	b530      	push	{r4, r5, lr}
    4226:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4228:	b168      	cbz	r0, 4246 <remove_timeout+0x22>
    422a:	4a0a      	ldr	r2, [pc, #40]	; (4254 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    422c:	6852      	ldr	r2, [r2, #4]
    422e:	4290      	cmp	r0, r2
    4230:	d009      	beq.n	4246 <remove_timeout+0x22>
	if (next(t) != NULL) {
    4232:	b143      	cbz	r3, 4246 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4234:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4238:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    423c:	1912      	adds	r2, r2, r4
    423e:	eb45 0101 	adc.w	r1, r5, r1
    4242:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4246:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    4248:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    424a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    424c:	2300      	movs	r3, #0
	node->prev = NULL;
    424e:	e9c0 3300 	strd	r3, r3, [r0]
}
    4252:	bd30      	pop	{r4, r5, pc}
    4254:	200000c4 	.word	0x200000c4

00004258 <next_timeout>:

static int32_t next_timeout(void)
{
    4258:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    425a:	4b11      	ldr	r3, [pc, #68]	; (42a0 <next_timeout+0x48>)
    425c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    425e:	429c      	cmp	r4, r3
    4260:	bf08      	it	eq
    4262:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4264:	f7ff ffd4 	bl	4210 <elapsed>
    4268:	4605      	mov	r5, r0
	int32_t ret;

	if ((to == NULL) ||
    426a:	b1ac      	cbz	r4, 4298 <next_timeout+0x40>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    426c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4270:	1b40      	subs	r0, r0, r5
    4272:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	if ((to == NULL) ||
    4276:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    427a:	f171 0300 	sbcs.w	r3, r1, #0
    427e:	da0b      	bge.n	4298 <next_timeout+0x40>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4280:	2800      	cmp	r0, #0
    4282:	f171 0300 	sbcs.w	r3, r1, #0
    4286:	da00      	bge.n	428a <next_timeout+0x32>
    4288:	2000      	movs	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    428a:	4b06      	ldr	r3, [pc, #24]	; (42a4 <next_timeout+0x4c>)
    428c:	691b      	ldr	r3, [r3, #16]
    428e:	b113      	cbz	r3, 4296 <next_timeout+0x3e>
    4290:	4298      	cmp	r0, r3
    4292:	bfa8      	it	ge
    4294:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4296:	bd38      	pop	{r3, r4, r5, pc}
		ret = MAX_WAIT;
    4298:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    429c:	e7f5      	b.n	428a <next_timeout+0x32>
    429e:	bf00      	nop
    42a0:	200000c4 	.word	0x200000c4
    42a4:	20000908 	.word	0x20000908

000042a8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    42a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    42ac:	bf08      	it	eq
    42ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    42b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42b6:	4604      	mov	r4, r0
    42b8:	4692      	mov	sl, r2
    42ba:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    42bc:	d073      	beq.n	43a6 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    42be:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    42c0:	f04f 0320 	mov.w	r3, #32
    42c4:	f3ef 8511 	mrs	r5, BASEPRI
    42c8:	f383 8812 	msr	BASEPRI_MAX, r3
    42cc:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    42d0:	f06f 0301 	mvn.w	r3, #1
    42d4:	f04f 32ff 	mov.w	r2, #4294967295
    42d8:	ebb3 080a 	subs.w	r8, r3, sl
    42dc:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    42e0:	f1b8 0f00 	cmp.w	r8, #0
    42e4:	f179 0100 	sbcs.w	r1, r9, #0
    42e8:	db1c      	blt.n	4324 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    42ea:	4830      	ldr	r0, [pc, #192]	; (43ac <z_add_timeout+0x104>)
    42ec:	e9d0 1000 	ldrd	r1, r0, [r0]
    42f0:	1a5b      	subs	r3, r3, r1
    42f2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    42f6:	ebb3 060a 	subs.w	r6, r3, sl
    42fa:	eb62 070b 	sbc.w	r7, r2, fp
    42fe:	2e01      	cmp	r6, #1
    4300:	f177 0300 	sbcs.w	r3, r7, #0
    4304:	bfbc      	itt	lt
    4306:	2601      	movlt	r6, #1
    4308:	2700      	movlt	r7, #0
    430a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    430e:	4a28      	ldr	r2, [pc, #160]	; (43b0 <z_add_timeout+0x108>)
    4310:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4314:	4293      	cmp	r3, r2
    4316:	d11e      	bne.n	4356 <z_add_timeout+0xae>
	node->prev = tail;
    4318:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    431c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    4320:	6054      	str	r4, [r2, #4]
}
    4322:	e02d      	b.n	4380 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4324:	f7ff ff74 	bl	4210 <elapsed>
    4328:	f11a 0301 	adds.w	r3, sl, #1
    432c:	9300      	str	r3, [sp, #0]
    432e:	f14b 0300 	adc.w	r3, fp, #0
    4332:	9301      	str	r3, [sp, #4]
    4334:	e9dd 2300 	ldrd	r2, r3, [sp]
    4338:	1812      	adds	r2, r2, r0
    433a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    433e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    4342:	e7e4      	b.n	430e <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    4344:	ebb6 0008 	subs.w	r0, r6, r8
    4348:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    434c:	4563      	cmp	r3, ip
    434e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4352:	d0e1      	beq.n	4318 <z_add_timeout+0x70>
    4354:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    4356:	2b00      	cmp	r3, #0
    4358:	d0de      	beq.n	4318 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    435a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    435e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    4362:	4546      	cmp	r6, r8
    4364:	eb77 0109 	sbcs.w	r1, r7, r9
    4368:	daec      	bge.n	4344 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    436a:	ebb8 0006 	subs.w	r0, r8, r6
    436e:	eb69 0107 	sbc.w	r1, r9, r7
    4372:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    4376:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4378:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    437c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    437e:	605c      	str	r4, [r3, #4]
	return list->head == list;
    4380:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4382:	4293      	cmp	r3, r2
    4384:	d00b      	beq.n	439e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4386:	429c      	cmp	r4, r3
    4388:	d109      	bne.n	439e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    438a:	f7ff ff65 	bl	4258 <next_timeout>

			if (next_time == 0 ||
    438e:	b118      	cbz	r0, 4398 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    4390:	4b08      	ldr	r3, [pc, #32]	; (43b4 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    4392:	691b      	ldr	r3, [r3, #16]
    4394:	4283      	cmp	r3, r0
    4396:	d002      	beq.n	439e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    4398:	2100      	movs	r1, #0
    439a:	f7fe fabf 	bl	291c <sys_clock_set_timeout>
	__asm__ volatile(
    439e:	f385 8811 	msr	BASEPRI, r5
    43a2:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    43a6:	b003      	add	sp, #12
    43a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43ac:	200002b0 	.word	0x200002b0
    43b0:	200000c4 	.word	0x200000c4
    43b4:	20000908 	.word	0x20000908

000043b8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    43b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43bc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    43be:	f7ff fc7b 	bl	3cb8 <z_time_slice>
	__asm__ volatile(
    43c2:	f04f 0320 	mov.w	r3, #32
    43c6:	f3ef 8411 	mrs	r4, BASEPRI
    43ca:	f383 8812 	msr	BASEPRI_MAX, r3
    43ce:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    43d2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4484 <sys_clock_announce+0xcc>
    43d6:	4d2a      	ldr	r5, [pc, #168]	; (4480 <sys_clock_announce+0xc8>)
    43d8:	4651      	mov	r1, sl
	return list->head == list;
    43da:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 4488 <sys_clock_announce+0xd0>
    43de:	602e      	str	r6, [r5, #0]
    43e0:	f8d5 c000 	ldr.w	ip, [r5]
    43e4:	f8db 0000 	ldr.w	r0, [fp]
    43e8:	4662      	mov	r2, ip
    43ea:	e9da 8900 	ldrd	r8, r9, [sl]
    43ee:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43f0:	4558      	cmp	r0, fp
    43f2:	e9cd 2300 	strd	r2, r3, [sp]
    43f6:	d00d      	beq.n	4414 <sys_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    43f8:	b160      	cbz	r0, 4414 <sys_clock_announce+0x5c>
    43fa:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    43fe:	45b4      	cmp	ip, r6
    4400:	41bb      	sbcs	r3, r7
    4402:	da1d      	bge.n	4440 <sys_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4404:	9b00      	ldr	r3, [sp, #0]
    4406:	ebb6 0c03 	subs.w	ip, r6, r3
    440a:	9b01      	ldr	r3, [sp, #4]
    440c:	eb67 0603 	sbc.w	r6, r7, r3
    4410:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4414:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    4416:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    4418:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    441a:	eb13 0208 	adds.w	r2, r3, r8
    441e:	9b01      	ldr	r3, [sp, #4]
    4420:	eb43 0309 	adc.w	r3, r3, r9
    4424:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
    4428:	f7ff ff16 	bl	4258 <next_timeout>
    442c:	4631      	mov	r1, r6
    442e:	f7fe fa75 	bl	291c <sys_clock_set_timeout>
	__asm__ volatile(
    4432:	f384 8811 	msr	BASEPRI, r4
    4436:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    443a:	b003      	add	sp, #12
    443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    4440:	2200      	movs	r2, #0
    4442:	2300      	movs	r3, #0
		curr_tick += dt;
    4444:	eb18 0806 	adds.w	r8, r8, r6
    4448:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    444c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    4450:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    4454:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    4458:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    445a:	f7ff fee3 	bl	4224 <remove_timeout>
    445e:	f384 8811 	msr	BASEPRI, r4
    4462:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4466:	6883      	ldr	r3, [r0, #8]
    4468:	4798      	blx	r3
	__asm__ volatile(
    446a:	f04f 0320 	mov.w	r3, #32
    446e:	f3ef 8411 	mrs	r4, BASEPRI
    4472:	f383 8812 	msr	BASEPRI_MAX, r3
    4476:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    447a:	4902      	ldr	r1, [pc, #8]	; (4484 <sys_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    447c:	e7b0      	b.n	43e0 <sys_clock_announce+0x28>
    447e:	bf00      	nop
    4480:	2000093c 	.word	0x2000093c
    4484:	200002b0 	.word	0x200002b0
    4488:	200000c4 	.word	0x200000c4

0000448c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    448c:	b510      	push	{r4, lr}
    448e:	f04f 0320 	mov.w	r3, #32
    4492:	f3ef 8411 	mrs	r4, BASEPRI
    4496:	f383 8812 	msr	BASEPRI_MAX, r3
    449a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    449e:	f7fe fa6d 	bl	297c <sys_clock_elapsed>
    44a2:	4b06      	ldr	r3, [pc, #24]	; (44bc <sys_clock_tick_get+0x30>)
    44a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    44a8:	1812      	adds	r2, r2, r0
    44aa:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    44ae:	f384 8811 	msr	BASEPRI, r4
    44b2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    44b6:	4610      	mov	r0, r2
    44b8:	4619      	mov	r1, r3
    44ba:	bd10      	pop	{r4, pc}
    44bc:	200002b0 	.word	0x200002b0

000044c0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    44c0:	4a02      	ldr	r2, [pc, #8]	; (44cc <boot_banner+0xc>)
    44c2:	4903      	ldr	r1, [pc, #12]	; (44d0 <boot_banner+0x10>)
    44c4:	4803      	ldr	r0, [pc, #12]	; (44d4 <boot_banner+0x14>)
    44c6:	f000 b9a1 	b.w	480c <printk>
    44ca:	bf00      	nop
    44cc:	0000590c 	.word	0x0000590c
    44d0:	000058d5 	.word	0x000058d5
    44d4:	000058e6 	.word	0x000058e6

000044d8 <nrf_cc3xx_platform_init_no_rng>:
    44d8:	b510      	push	{r4, lr}
    44da:	4c0a      	ldr	r4, [pc, #40]	; (4504 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    44dc:	6823      	ldr	r3, [r4, #0]
    44de:	b11b      	cbz	r3, 44e8 <nrf_cc3xx_platform_init_no_rng+0x10>
    44e0:	2301      	movs	r3, #1
    44e2:	2000      	movs	r0, #0
    44e4:	6023      	str	r3, [r4, #0]
    44e6:	bd10      	pop	{r4, pc}
    44e8:	f000 f8dc 	bl	46a4 <CC_LibInitNoRng>
    44ec:	2800      	cmp	r0, #0
    44ee:	d0f7      	beq.n	44e0 <nrf_cc3xx_platform_init_no_rng+0x8>
    44f0:	3801      	subs	r0, #1
    44f2:	2807      	cmp	r0, #7
    44f4:	d803      	bhi.n	44fe <nrf_cc3xx_platform_init_no_rng+0x26>
    44f6:	4b04      	ldr	r3, [pc, #16]	; (4508 <nrf_cc3xx_platform_init_no_rng+0x30>)
    44f8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    44fc:	bd10      	pop	{r4, pc}
    44fe:	4803      	ldr	r0, [pc, #12]	; (450c <nrf_cc3xx_platform_init_no_rng+0x34>)
    4500:	bd10      	pop	{r4, pc}
    4502:	bf00      	nop
    4504:	20000940 	.word	0x20000940
    4508:	00005790 	.word	0x00005790
    450c:	ffff8ffe 	.word	0xffff8ffe

00004510 <nrf_cc3xx_platform_abort>:
    4510:	f3bf 8f4f 	dsb	sy
    4514:	4905      	ldr	r1, [pc, #20]	; (452c <nrf_cc3xx_platform_abort+0x1c>)
    4516:	4b06      	ldr	r3, [pc, #24]	; (4530 <nrf_cc3xx_platform_abort+0x20>)
    4518:	68ca      	ldr	r2, [r1, #12]
    451a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    451e:	4313      	orrs	r3, r2
    4520:	60cb      	str	r3, [r1, #12]
    4522:	f3bf 8f4f 	dsb	sy
    4526:	bf00      	nop
    4528:	e7fd      	b.n	4526 <nrf_cc3xx_platform_abort+0x16>
    452a:	bf00      	nop
    452c:	e000ed00 	.word	0xe000ed00
    4530:	05fa0004 	.word	0x05fa0004

00004534 <CC_PalAbort>:
    4534:	b430      	push	{r4, r5}
    4536:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    453a:	2500      	movs	r5, #0
    453c:	4b0b      	ldr	r3, [pc, #44]	; (456c <CC_PalAbort+0x38>)
    453e:	4c0c      	ldr	r4, [pc, #48]	; (4570 <CC_PalAbort+0x3c>)
    4540:	490c      	ldr	r1, [pc, #48]	; (4574 <CC_PalAbort+0x40>)
    4542:	6849      	ldr	r1, [r1, #4]
    4544:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4548:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    454c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4550:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4554:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4558:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    455c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4560:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4564:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4568:	bc30      	pop	{r4, r5}
    456a:	4708      	bx	r1
    456c:	50845000 	.word	0x50845000
    4570:	50844000 	.word	0x50844000
    4574:	200000cc 	.word	0x200000cc

00004578 <nrf_cc3xx_platform_set_abort>:
    4578:	4b02      	ldr	r3, [pc, #8]	; (4584 <nrf_cc3xx_platform_set_abort+0xc>)
    457a:	e9d0 1200 	ldrd	r1, r2, [r0]
    457e:	e9c3 1200 	strd	r1, r2, [r3]
    4582:	4770      	bx	lr
    4584:	200000cc 	.word	0x200000cc

00004588 <mutex_free>:
    4588:	b510      	push	{r4, lr}
    458a:	4604      	mov	r4, r0
    458c:	b130      	cbz	r0, 459c <mutex_free+0x14>
    458e:	6863      	ldr	r3, [r4, #4]
    4590:	06db      	lsls	r3, r3, #27
    4592:	d502      	bpl.n	459a <mutex_free+0x12>
    4594:	2300      	movs	r3, #0
    4596:	6023      	str	r3, [r4, #0]
    4598:	6063      	str	r3, [r4, #4]
    459a:	bd10      	pop	{r4, pc}
    459c:	4b02      	ldr	r3, [pc, #8]	; (45a8 <mutex_free+0x20>)
    459e:	4803      	ldr	r0, [pc, #12]	; (45ac <mutex_free+0x24>)
    45a0:	685b      	ldr	r3, [r3, #4]
    45a2:	4798      	blx	r3
    45a4:	e7f3      	b.n	458e <mutex_free+0x6>
    45a6:	bf00      	nop
    45a8:	200000cc 	.word	0x200000cc
    45ac:	000057b0 	.word	0x000057b0

000045b0 <mutex_lock>:
    45b0:	b1b0      	cbz	r0, 45e0 <mutex_lock+0x30>
    45b2:	6843      	ldr	r3, [r0, #4]
    45b4:	b193      	cbz	r3, 45dc <mutex_lock+0x2c>
    45b6:	06db      	lsls	r3, r3, #27
    45b8:	d50e      	bpl.n	45d8 <mutex_lock+0x28>
    45ba:	2301      	movs	r3, #1
    45bc:	e850 2f00 	ldrex	r2, [r0]
    45c0:	4619      	mov	r1, r3
    45c2:	e840 1c00 	strex	ip, r1, [r0]
    45c6:	f09c 0f00 	teq	ip, #0
    45ca:	d1f7      	bne.n	45bc <mutex_lock+0xc>
    45cc:	2a01      	cmp	r2, #1
    45ce:	d0f5      	beq.n	45bc <mutex_lock+0xc>
    45d0:	f3bf 8f5f 	dmb	sy
    45d4:	2000      	movs	r0, #0
    45d6:	4770      	bx	lr
    45d8:	4803      	ldr	r0, [pc, #12]	; (45e8 <mutex_lock+0x38>)
    45da:	4770      	bx	lr
    45dc:	4803      	ldr	r0, [pc, #12]	; (45ec <mutex_lock+0x3c>)
    45de:	4770      	bx	lr
    45e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    45e4:	4770      	bx	lr
    45e6:	bf00      	nop
    45e8:	ffff8fe9 	.word	0xffff8fe9
    45ec:	ffff8fea 	.word	0xffff8fea

000045f0 <mutex_unlock>:
    45f0:	4603      	mov	r3, r0
    45f2:	b168      	cbz	r0, 4610 <mutex_unlock+0x20>
    45f4:	6842      	ldr	r2, [r0, #4]
    45f6:	b13a      	cbz	r2, 4608 <mutex_unlock+0x18>
    45f8:	06d2      	lsls	r2, r2, #27
    45fa:	d507      	bpl.n	460c <mutex_unlock+0x1c>
    45fc:	f3bf 8f5f 	dmb	sy
    4600:	2200      	movs	r2, #0
    4602:	4610      	mov	r0, r2
    4604:	601a      	str	r2, [r3, #0]
    4606:	4770      	bx	lr
    4608:	4803      	ldr	r0, [pc, #12]	; (4618 <mutex_unlock+0x28>)
    460a:	4770      	bx	lr
    460c:	4803      	ldr	r0, [pc, #12]	; (461c <mutex_unlock+0x2c>)
    460e:	4770      	bx	lr
    4610:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4614:	4770      	bx	lr
    4616:	bf00      	nop
    4618:	ffff8fea 	.word	0xffff8fea
    461c:	ffff8fe9 	.word	0xffff8fe9

00004620 <mutex_init>:
    4620:	b510      	push	{r4, lr}
    4622:	4604      	mov	r4, r0
    4624:	b120      	cbz	r0, 4630 <mutex_init+0x10>
    4626:	2200      	movs	r2, #0
    4628:	2311      	movs	r3, #17
    462a:	6022      	str	r2, [r4, #0]
    462c:	6063      	str	r3, [r4, #4]
    462e:	bd10      	pop	{r4, pc}
    4630:	4801      	ldr	r0, [pc, #4]	; (4638 <mutex_init+0x18>)
    4632:	f7ff ff7f 	bl	4534 <CC_PalAbort>
    4636:	e7f6      	b.n	4626 <mutex_init+0x6>
    4638:	000057d8 	.word	0x000057d8

0000463c <nrf_cc3xx_platform_set_mutexes>:
    463c:	b570      	push	{r4, r5, r6, lr}
    463e:	4c16      	ldr	r4, [pc, #88]	; (4698 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    4640:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4644:	6806      	ldr	r6, [r0, #0]
    4646:	f8c4 c004 	str.w	ip, [r4, #4]
    464a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    464e:	68c0      	ldr	r0, [r0, #12]
    4650:	f8c4 c008 	str.w	ip, [r4, #8]
    4654:	60e0      	str	r0, [r4, #12]
    4656:	6026      	str	r6, [r4, #0]
    4658:	6808      	ldr	r0, [r1, #0]
    465a:	4b10      	ldr	r3, [pc, #64]	; (469c <nrf_cc3xx_platform_set_mutexes+0x60>)
    465c:	4d10      	ldr	r5, [pc, #64]	; (46a0 <nrf_cc3xx_platform_set_mutexes+0x64>)
    465e:	6018      	str	r0, [r3, #0]
    4660:	6848      	ldr	r0, [r1, #4]
    4662:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    4666:	6058      	str	r0, [r3, #4]
    4668:	6888      	ldr	r0, [r1, #8]
    466a:	6098      	str	r0, [r3, #8]
    466c:	68c8      	ldr	r0, [r1, #12]
    466e:	6909      	ldr	r1, [r1, #16]
    4670:	60d8      	str	r0, [r3, #12]
    4672:	6119      	str	r1, [r3, #16]
    4674:	06d3      	lsls	r3, r2, #27
    4676:	d50d      	bpl.n	4694 <nrf_cc3xx_platform_set_mutexes+0x58>
    4678:	2300      	movs	r3, #0
    467a:	f505 708a 	add.w	r0, r5, #276	; 0x114
    467e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    4682:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    4686:	47b0      	blx	r6
    4688:	6823      	ldr	r3, [r4, #0]
    468a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    468e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4692:	4718      	bx	r3
    4694:	bd70      	pop	{r4, r5, r6, pc}
    4696:	bf00      	nop
    4698:	200000dc 	.word	0x200000dc
    469c:	200000ec 	.word	0x200000ec
    46a0:	20000958 	.word	0x20000958

000046a4 <CC_LibInitNoRng>:
    46a4:	b508      	push	{r3, lr}
    46a6:	f000 f811 	bl	46cc <CC_HalInit>
    46aa:	b930      	cbnz	r0, 46ba <CC_LibInitNoRng+0x16>
    46ac:	f000 f810 	bl	46d0 <CC_PalInit>
    46b0:	b938      	cbnz	r0, 46c2 <CC_LibInitNoRng+0x1e>
    46b2:	4a05      	ldr	r2, [pc, #20]	; (46c8 <CC_LibInitNoRng+0x24>)
    46b4:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    46b8:	bd08      	pop	{r3, pc}
    46ba:	f000 f837 	bl	472c <CC_PalTerminate>
    46be:	2003      	movs	r0, #3
    46c0:	bd08      	pop	{r3, pc}
    46c2:	2004      	movs	r0, #4
    46c4:	bd08      	pop	{r3, pc}
    46c6:	bf00      	nop
    46c8:	50845000 	.word	0x50845000

000046cc <CC_HalInit>:
    46cc:	2000      	movs	r0, #0
    46ce:	4770      	bx	lr

000046d0 <CC_PalInit>:
    46d0:	b510      	push	{r4, lr}
    46d2:	4811      	ldr	r0, [pc, #68]	; (4718 <CC_PalInit+0x48>)
    46d4:	f000 f848 	bl	4768 <CC_PalMutexCreate>
    46d8:	b100      	cbz	r0, 46dc <CC_PalInit+0xc>
    46da:	bd10      	pop	{r4, pc}
    46dc:	480f      	ldr	r0, [pc, #60]	; (471c <CC_PalInit+0x4c>)
    46de:	f000 f843 	bl	4768 <CC_PalMutexCreate>
    46e2:	2800      	cmp	r0, #0
    46e4:	d1f9      	bne.n	46da <CC_PalInit+0xa>
    46e6:	4c0e      	ldr	r4, [pc, #56]	; (4720 <CC_PalInit+0x50>)
    46e8:	4620      	mov	r0, r4
    46ea:	f000 f83d 	bl	4768 <CC_PalMutexCreate>
    46ee:	2800      	cmp	r0, #0
    46f0:	d1f3      	bne.n	46da <CC_PalInit+0xa>
    46f2:	4b0c      	ldr	r3, [pc, #48]	; (4724 <CC_PalInit+0x54>)
    46f4:	480c      	ldr	r0, [pc, #48]	; (4728 <CC_PalInit+0x58>)
    46f6:	601c      	str	r4, [r3, #0]
    46f8:	f000 f836 	bl	4768 <CC_PalMutexCreate>
    46fc:	4601      	mov	r1, r0
    46fe:	2800      	cmp	r0, #0
    4700:	d1eb      	bne.n	46da <CC_PalInit+0xa>
    4702:	f000 f82d 	bl	4760 <CC_PalDmaInit>
    4706:	4604      	mov	r4, r0
    4708:	b108      	cbz	r0, 470e <CC_PalInit+0x3e>
    470a:	4620      	mov	r0, r4
    470c:	bd10      	pop	{r4, pc}
    470e:	f000 f83f 	bl	4790 <CC_PalPowerSaveModeInit>
    4712:	4620      	mov	r0, r4
    4714:	e7fa      	b.n	470c <CC_PalInit+0x3c>
    4716:	bf00      	nop
    4718:	20000124 	.word	0x20000124
    471c:	20000118 	.word	0x20000118
    4720:	20000120 	.word	0x20000120
    4724:	20000128 	.word	0x20000128
    4728:	2000011c 	.word	0x2000011c

0000472c <CC_PalTerminate>:
    472c:	b508      	push	{r3, lr}
    472e:	4808      	ldr	r0, [pc, #32]	; (4750 <CC_PalTerminate+0x24>)
    4730:	f000 f824 	bl	477c <CC_PalMutexDestroy>
    4734:	4807      	ldr	r0, [pc, #28]	; (4754 <CC_PalTerminate+0x28>)
    4736:	f000 f821 	bl	477c <CC_PalMutexDestroy>
    473a:	4807      	ldr	r0, [pc, #28]	; (4758 <CC_PalTerminate+0x2c>)
    473c:	f000 f81e 	bl	477c <CC_PalMutexDestroy>
    4740:	4806      	ldr	r0, [pc, #24]	; (475c <CC_PalTerminate+0x30>)
    4742:	f000 f81b 	bl	477c <CC_PalMutexDestroy>
    4746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    474a:	f000 b80b 	b.w	4764 <CC_PalDmaTerminate>
    474e:	bf00      	nop
    4750:	20000124 	.word	0x20000124
    4754:	20000118 	.word	0x20000118
    4758:	20000120 	.word	0x20000120
    475c:	2000011c 	.word	0x2000011c

00004760 <CC_PalDmaInit>:
    4760:	2000      	movs	r0, #0
    4762:	4770      	bx	lr

00004764 <CC_PalDmaTerminate>:
    4764:	4770      	bx	lr
    4766:	bf00      	nop

00004768 <CC_PalMutexCreate>:
    4768:	b508      	push	{r3, lr}
    476a:	4b03      	ldr	r3, [pc, #12]	; (4778 <CC_PalMutexCreate+0x10>)
    476c:	6802      	ldr	r2, [r0, #0]
    476e:	681b      	ldr	r3, [r3, #0]
    4770:	6810      	ldr	r0, [r2, #0]
    4772:	4798      	blx	r3
    4774:	2000      	movs	r0, #0
    4776:	bd08      	pop	{r3, pc}
    4778:	200000dc 	.word	0x200000dc

0000477c <CC_PalMutexDestroy>:
    477c:	b508      	push	{r3, lr}
    477e:	4b03      	ldr	r3, [pc, #12]	; (478c <CC_PalMutexDestroy+0x10>)
    4780:	6802      	ldr	r2, [r0, #0]
    4782:	685b      	ldr	r3, [r3, #4]
    4784:	6810      	ldr	r0, [r2, #0]
    4786:	4798      	blx	r3
    4788:	2000      	movs	r0, #0
    478a:	bd08      	pop	{r3, pc}
    478c:	200000dc 	.word	0x200000dc

00004790 <CC_PalPowerSaveModeInit>:
    4790:	b570      	push	{r4, r5, r6, lr}
    4792:	4c09      	ldr	r4, [pc, #36]	; (47b8 <CC_PalPowerSaveModeInit+0x28>)
    4794:	4d09      	ldr	r5, [pc, #36]	; (47bc <CC_PalPowerSaveModeInit+0x2c>)
    4796:	6920      	ldr	r0, [r4, #16]
    4798:	68ab      	ldr	r3, [r5, #8]
    479a:	4798      	blx	r3
    479c:	b118      	cbz	r0, 47a6 <CC_PalPowerSaveModeInit+0x16>
    479e:	4b08      	ldr	r3, [pc, #32]	; (47c0 <CC_PalPowerSaveModeInit+0x30>)
    47a0:	4808      	ldr	r0, [pc, #32]	; (47c4 <CC_PalPowerSaveModeInit+0x34>)
    47a2:	685b      	ldr	r3, [r3, #4]
    47a4:	4798      	blx	r3
    47a6:	2100      	movs	r1, #0
    47a8:	4a07      	ldr	r2, [pc, #28]	; (47c8 <CC_PalPowerSaveModeInit+0x38>)
    47aa:	68eb      	ldr	r3, [r5, #12]
    47ac:	6011      	str	r1, [r2, #0]
    47ae:	6920      	ldr	r0, [r4, #16]
    47b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47b4:	4718      	bx	r3
    47b6:	bf00      	nop
    47b8:	200000ec 	.word	0x200000ec
    47bc:	200000dc 	.word	0x200000dc
    47c0:	200000cc 	.word	0x200000cc
    47c4:	000057fc 	.word	0x000057fc
    47c8:	20000954 	.word	0x20000954

000047cc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    47cc:	4603      	mov	r3, r0
    47ce:	b158      	cbz	r0, 47e8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    47d0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    47d2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    47d6:	2a01      	cmp	r2, #1
    47d8:	d003      	beq.n	47e2 <sys_notify_validate+0x16>
    47da:	2a03      	cmp	r2, #3
    47dc:	d104      	bne.n	47e8 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    47de:	6802      	ldr	r2, [r0, #0]
    47e0:	b112      	cbz	r2, 47e8 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    47e2:	2000      	movs	r0, #0
    47e4:	6098      	str	r0, [r3, #8]
    47e6:	4770      	bx	lr
		return -EINVAL;
    47e8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    47ec:	4770      	bx	lr

000047ee <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    47ee:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    47f0:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    47f2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    47f6:	2a03      	cmp	r2, #3
    47f8:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    47fc:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    47fe:	bf14      	ite	ne
    4800:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4802:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4804:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4806:	4770      	bx	lr

00004808 <arch_printk_char_out>:
}
    4808:	2000      	movs	r0, #0
    480a:	4770      	bx	lr

0000480c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    480c:	b40f      	push	{r0, r1, r2, r3}
    480e:	b507      	push	{r0, r1, r2, lr}
    4810:	a904      	add	r1, sp, #16
    4812:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4816:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4818:	f7fb fe4e 	bl	4b8 <vprintk>

	va_end(ap);
}
    481c:	b003      	add	sp, #12
    481e:	f85d eb04 	ldr.w	lr, [sp], #4
    4822:	b004      	add	sp, #16
    4824:	4770      	bx	lr

00004826 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4826:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4828:	f013 0307 	ands.w	r3, r3, #7
    482c:	d105      	bne.n	483a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    482e:	6803      	ldr	r3, [r0, #0]
    4830:	2b00      	cmp	r3, #0
		evt = EVT_START;
    4832:	bf0c      	ite	eq
    4834:	2000      	moveq	r0, #0
    4836:	2003      	movne	r0, #3
    4838:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    483a:	2b02      	cmp	r3, #2
    483c:	d105      	bne.n	484a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    483e:	8b43      	ldrh	r3, [r0, #26]
    4840:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    4842:	bf14      	ite	ne
    4844:	2000      	movne	r0, #0
    4846:	2004      	moveq	r0, #4
    4848:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    484a:	2b01      	cmp	r3, #1
    484c:	d105      	bne.n	485a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    484e:	6803      	ldr	r3, [r0, #0]
    4850:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    4852:	bf0c      	ite	eq
    4854:	2000      	moveq	r0, #0
    4856:	2005      	movne	r0, #5
    4858:	4770      	bx	lr
	int evt = EVT_NOP;
    485a:	2000      	movs	r0, #0
}
    485c:	4770      	bx	lr

0000485e <notify_one>:
{
    485e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4862:	460d      	mov	r5, r1
    4864:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4866:	4619      	mov	r1, r3
    4868:	1d28      	adds	r0, r5, #4
{
    486a:	4690      	mov	r8, r2
    486c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    486e:	f7ff ffbe 	bl	47ee <sys_notify_finalize>
	if (cb) {
    4872:	4604      	mov	r4, r0
    4874:	b138      	cbz	r0, 4886 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4876:	4633      	mov	r3, r6
    4878:	4642      	mov	r2, r8
    487a:	4629      	mov	r1, r5
    487c:	4638      	mov	r0, r7
    487e:	46a4      	mov	ip, r4
}
    4880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4884:	4760      	bx	ip
}
    4886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000488a <transition_complete>:
{
    488a:	b410      	push	{r4}
	__asm__ volatile(
    488c:	f04f 0420 	mov.w	r4, #32
    4890:	f3ef 8211 	mrs	r2, BASEPRI
    4894:	f384 8812 	msr	BASEPRI_MAX, r4
    4898:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    489c:	6141      	str	r1, [r0, #20]
}
    489e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    48a0:	2101      	movs	r1, #1
    48a2:	f7fb be17 	b.w	4d4 <process_event>

000048a6 <validate_args>:
{
    48a6:	b510      	push	{r4, lr}
    48a8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    48aa:	b140      	cbz	r0, 48be <validate_args+0x18>
    48ac:	b139      	cbz	r1, 48be <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    48ae:	1d08      	adds	r0, r1, #4
    48b0:	f7ff ff8c 	bl	47cc <sys_notify_validate>
	if ((rv == 0)
    48b4:	b928      	cbnz	r0, 48c2 <validate_args+0x1c>
	    && ((cli->notify.flags
    48b6:	68a3      	ldr	r3, [r4, #8]
    48b8:	f033 0303 	bics.w	r3, r3, #3
    48bc:	d001      	beq.n	48c2 <validate_args+0x1c>
		rv = -EINVAL;
    48be:	f06f 0015 	mvn.w	r0, #21
}
    48c2:	bd10      	pop	{r4, pc}

000048c4 <onoff_manager_init>:
{
    48c4:	b538      	push	{r3, r4, r5, lr}
    48c6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    48c8:	4605      	mov	r5, r0
    48ca:	b158      	cbz	r0, 48e4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    48cc:	b151      	cbz	r1, 48e4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    48ce:	680b      	ldr	r3, [r1, #0]
    48d0:	b143      	cbz	r3, 48e4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    48d2:	684b      	ldr	r3, [r1, #4]
    48d4:	b133      	cbz	r3, 48e4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    48d6:	221c      	movs	r2, #28
    48d8:	2100      	movs	r1, #0
    48da:	f000 f91b 	bl	4b14 <memset>
	return 0;
    48de:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    48e0:	612c      	str	r4, [r5, #16]
}
    48e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    48e4:	f06f 0015 	mvn.w	r0, #21
    48e8:	e7fb      	b.n	48e2 <onoff_manager_init+0x1e>

000048ea <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    48ea:	b570      	push	{r4, r5, r6, lr}
    48ec:	4604      	mov	r4, r0
    48ee:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    48f0:	f7ff ffd9 	bl	48a6 <validate_args>

	if (rv < 0) {
    48f4:	1e05      	subs	r5, r0, #0
    48f6:	db31      	blt.n	495c <onoff_request+0x72>
    48f8:	f04f 0320 	mov.w	r3, #32
    48fc:	f3ef 8111 	mrs	r1, BASEPRI
    4900:	f383 8812 	msr	BASEPRI_MAX, r3
    4904:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4908:	f64f 75ff 	movw	r5, #65535	; 0xffff
    490c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    490e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    4910:	42ab      	cmp	r3, r5
    4912:	f000 0207 	and.w	r2, r0, #7
    4916:	d02e      	beq.n	4976 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4918:	2a02      	cmp	r2, #2
    491a:	d10e      	bne.n	493a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    491c:	3301      	adds	r3, #1
    491e:	8363      	strh	r3, [r4, #26]
	rv = state;
    4920:	4615      	mov	r5, r2
		notify = true;
    4922:	2301      	movs	r3, #1
	__asm__ volatile(
    4924:	f381 8811 	msr	BASEPRI, r1
    4928:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    492c:	b1b3      	cbz	r3, 495c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    492e:	2300      	movs	r3, #0
    4930:	4631      	mov	r1, r6
    4932:	4620      	mov	r0, r4
    4934:	f7ff ff93 	bl	485e <notify_one>
    4938:	e010      	b.n	495c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    493a:	0783      	lsls	r3, r0, #30
    493c:	d001      	beq.n	4942 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    493e:	2a06      	cmp	r2, #6
    4940:	d10e      	bne.n	4960 <onoff_request+0x76>
	parent->next = child;
    4942:	2300      	movs	r3, #0
    4944:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    4946:	6863      	ldr	r3, [r4, #4]
    4948:	b993      	cbnz	r3, 4970 <onoff_request+0x86>
	list->head = node;
    494a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    494e:	4615      	mov	r5, r2
    4950:	b962      	cbnz	r2, 496c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    4952:	460a      	mov	r2, r1
    4954:	4620      	mov	r0, r4
    4956:	2102      	movs	r1, #2
    4958:	f7fb fdbc 	bl	4d4 <process_event>
		}
	}

	return rv;
}
    495c:	4628      	mov	r0, r5
    495e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4960:	2a05      	cmp	r2, #5
    4962:	bf0c      	ite	eq
    4964:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    4968:	f06f 0504 	mvnne.w	r5, #4
    496c:	2300      	movs	r3, #0
    496e:	e7d9      	b.n	4924 <onoff_request+0x3a>
	parent->next = child;
    4970:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4972:	6066      	str	r6, [r4, #4]
}
    4974:	e7eb      	b.n	494e <onoff_request+0x64>
		rv = -EAGAIN;
    4976:	f06f 050a 	mvn.w	r5, #10
    497a:	e7f7      	b.n	496c <onoff_request+0x82>

0000497c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    497c:	4604      	mov	r4, r0
    497e:	b508      	push	{r3, lr}
    4980:	4608      	mov	r0, r1
    4982:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4984:	461a      	mov	r2, r3
    4986:	47a0      	blx	r4
	return z_impl_z_current_get();
    4988:	f7ff fbd0 	bl	412c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    498c:	f7fc ff8a 	bl	18a4 <z_impl_k_thread_abort>

00004990 <encode_uint>:
{
    4990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4994:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    4996:	78d3      	ldrb	r3, [r2, #3]
{
    4998:	4614      	mov	r4, r2
	switch (specifier) {
    499a:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    499c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    49a0:	4606      	mov	r6, r0
    49a2:	460f      	mov	r7, r1
    49a4:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    49a6:	d02d      	beq.n	4a04 <encode_uint+0x74>
    49a8:	d828      	bhi.n	49fc <encode_uint+0x6c>
		return 16;
    49aa:	2b58      	cmp	r3, #88	; 0x58
    49ac:	bf14      	ite	ne
    49ae:	250a      	movne	r5, #10
    49b0:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    49b2:	46aa      	mov	sl, r5
    49b4:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    49b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    49bc:	4652      	mov	r2, sl
    49be:	465b      	mov	r3, fp
    49c0:	4630      	mov	r0, r6
    49c2:	4639      	mov	r1, r7
    49c4:	f7fb fbc6 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    49c8:	2a09      	cmp	r2, #9
    49ca:	b2d3      	uxtb	r3, r2
    49cc:	d81f      	bhi.n	4a0e <encode_uint+0x7e>
    49ce:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    49d0:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    49d2:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    49d4:	bf08      	it	eq
    49d6:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    49d8:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    49dc:	d301      	bcc.n	49e2 <encode_uint+0x52>
    49de:	45c8      	cmp	r8, r9
    49e0:	d812      	bhi.n	4a08 <encode_uint+0x78>
	if (conv->flag_hash) {
    49e2:	7823      	ldrb	r3, [r4, #0]
    49e4:	069b      	lsls	r3, r3, #26
    49e6:	d505      	bpl.n	49f4 <encode_uint+0x64>
		if (radix == 8) {
    49e8:	2d08      	cmp	r5, #8
    49ea:	d116      	bne.n	4a1a <encode_uint+0x8a>
			conv->altform_0 = true;
    49ec:	78a3      	ldrb	r3, [r4, #2]
    49ee:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    49f2:	70a3      	strb	r3, [r4, #2]
}
    49f4:	4640      	mov	r0, r8
    49f6:	b003      	add	sp, #12
    49f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    49fc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4a00:	2b70      	cmp	r3, #112	; 0x70
    4a02:	e7d3      	b.n	49ac <encode_uint+0x1c>
	switch (specifier) {
    4a04:	2508      	movs	r5, #8
    4a06:	e7d4      	b.n	49b2 <encode_uint+0x22>
		value /= radix;
    4a08:	4606      	mov	r6, r0
    4a0a:	460f      	mov	r7, r1
    4a0c:	e7d6      	b.n	49bc <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4a0e:	9a01      	ldr	r2, [sp, #4]
    4a10:	2a19      	cmp	r2, #25
    4a12:	bf94      	ite	ls
    4a14:	3337      	addls	r3, #55	; 0x37
    4a16:	3357      	addhi	r3, #87	; 0x57
    4a18:	e7da      	b.n	49d0 <encode_uint+0x40>
		} else if (radix == 16) {
    4a1a:	2d10      	cmp	r5, #16
    4a1c:	d1ea      	bne.n	49f4 <encode_uint+0x64>
			conv->altform_0c = true;
    4a1e:	78a3      	ldrb	r3, [r4, #2]
    4a20:	f043 0310 	orr.w	r3, r3, #16
    4a24:	e7e5      	b.n	49f2 <encode_uint+0x62>

00004a26 <outs>:
{
    4a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a2a:	4607      	mov	r7, r0
    4a2c:	4688      	mov	r8, r1
    4a2e:	4615      	mov	r5, r2
    4a30:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4a32:	4614      	mov	r4, r2
    4a34:	42b4      	cmp	r4, r6
    4a36:	eba4 0005 	sub.w	r0, r4, r5
    4a3a:	d302      	bcc.n	4a42 <outs+0x1c>
    4a3c:	b93e      	cbnz	r6, 4a4e <outs+0x28>
    4a3e:	7823      	ldrb	r3, [r4, #0]
    4a40:	b12b      	cbz	r3, 4a4e <outs+0x28>
		int rc = out((int)*sp++, ctx);
    4a42:	4641      	mov	r1, r8
    4a44:	f814 0b01 	ldrb.w	r0, [r4], #1
    4a48:	47b8      	blx	r7
		if (rc < 0) {
    4a4a:	2800      	cmp	r0, #0
    4a4c:	daf2      	bge.n	4a34 <outs+0xe>
}
    4a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004a52 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    4a52:	4770      	bx	lr

00004a54 <pm_state_exit_post_ops>:
    4a54:	2300      	movs	r3, #0
    4a56:	f383 8811 	msr	BASEPRI, r3
    4a5a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4a5e:	4770      	bx	lr

00004a60 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    4a60:	2000      	movs	r0, #0
{
    4a62:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4a64:	f7fc f9dc 	bl	e20 <sys_reboot>

00004a68 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4a68:	f000 bb00 	b.w	506c <z_fatal_error>

00004a6c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4a6c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4a6e:	6800      	ldr	r0, [r0, #0]
    4a70:	f000 bafc 	b.w	506c <z_fatal_error>

00004a74 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4a74:	2100      	movs	r1, #0
    4a76:	2001      	movs	r0, #1
    4a78:	f7ff bff6 	b.w	4a68 <z_arm_fatal_error>

00004a7c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4a7c:	b508      	push	{r3, lr}
	handler();
    4a7e:	f7fc fcc3 	bl	1408 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4a86:	f7fc bd85 	b.w	1594 <z_arm_exc_exit>

00004a8a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4a8a:	6e43      	ldr	r3, [r0, #100]	; 0x64
    4a8c:	f383 880b 	msr	PSPLIM, r3
}
    4a90:	4770      	bx	lr

00004a92 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    4a92:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    4a96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4a9a:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    4a9c:	bf08      	it	eq
    4a9e:	f06f 0015 	mvneq.w	r0, #21
    4aa2:	4770      	bx	lr

00004aa4 <mpu_configure_region>:
{
    4aa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    4aa6:	890a      	ldrh	r2, [r1, #8]
    4aa8:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
    4aaa:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    4aac:	684d      	ldr	r5, [r1, #4]
    4aae:	f002 021f 	and.w	r2, r2, #31
    4ab2:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    4ab6:	9300      	str	r3, [sp, #0]
    4ab8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4abc:	f023 031f 	bic.w	r3, r3, #31
    4ac0:	1e6a      	subs	r2, r5, #1
    4ac2:	4413      	add	r3, r2
    4ac4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    4ac8:	2807      	cmp	r0, #7
    4aca:	9303      	str	r3, [sp, #12]
    4acc:	d804      	bhi.n	4ad8 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    4ace:	4669      	mov	r1, sp
    4ad0:	f7fc ff1a 	bl	1908 <region_init>
}
    4ad4:	b004      	add	sp, #16
    4ad6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    4ad8:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    4adc:	e7fa      	b.n	4ad4 <mpu_configure_region+0x30>

00004ade <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4ade:	4603      	mov	r3, r0
	size_t n = 0;
    4ae0:	2000      	movs	r0, #0

	while (*s != '\0') {
    4ae2:	5c1a      	ldrb	r2, [r3, r0]
    4ae4:	b902      	cbnz	r2, 4ae8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4ae6:	4770      	bx	lr
		n++;
    4ae8:	3001      	adds	r0, #1
    4aea:	e7fa      	b.n	4ae2 <strlen+0x4>

00004aec <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4aec:	4603      	mov	r3, r0
	size_t n = 0;
    4aee:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4af0:	5c1a      	ldrb	r2, [r3, r0]
    4af2:	b10a      	cbz	r2, 4af8 <strnlen+0xc>
    4af4:	4288      	cmp	r0, r1
    4af6:	d100      	bne.n	4afa <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4af8:	4770      	bx	lr
		n++;
    4afa:	3001      	adds	r0, #1
    4afc:	e7f8      	b.n	4af0 <strnlen+0x4>

00004afe <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4afe:	b510      	push	{r4, lr}
    4b00:	1e43      	subs	r3, r0, #1
    4b02:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4b04:	4291      	cmp	r1, r2
    4b06:	d100      	bne.n	4b0a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4b08:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
    4b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4b12:	e7f7      	b.n	4b04 <memcpy+0x6>

00004b14 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    4b14:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    4b16:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4b18:	4402      	add	r2, r0
    4b1a:	4293      	cmp	r3, r2
    4b1c:	d100      	bne.n	4b20 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4b1e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4b20:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4b24:	e7f9      	b.n	4b1a <memset+0x6>

00004b26 <_stdout_hook_default>:
}
    4b26:	f04f 30ff 	mov.w	r0, #4294967295
    4b2a:	4770      	bx	lr

00004b2c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4b2c:	b2cb      	uxtb	r3, r1
    4b2e:	210c      	movs	r1, #12
    4b30:	6902      	ldr	r2, [r0, #16]
    4b32:	fb03 2101 	mla	r1, r3, r1, r2
    4b36:	6f88      	ldr	r0, [r1, #120]	; 0x78
}
    4b38:	f000 0007 	and.w	r0, r0, #7
    4b3c:	4770      	bx	lr

00004b3e <set_off_state>:
	__asm__ volatile(
    4b3e:	f04f 0320 	mov.w	r3, #32
    4b42:	f3ef 8211 	mrs	r2, BASEPRI
    4b46:	f383 8812 	msr	BASEPRI_MAX, r3
    4b4a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4b4e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4b50:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4b54:	d001      	beq.n	4b5a <set_off_state+0x1c>
    4b56:	428b      	cmp	r3, r1
    4b58:	d107      	bne.n	4b6a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4b5a:	2301      	movs	r3, #1
    4b5c:	6003      	str	r3, [r0, #0]
	int err = 0;
    4b5e:	2000      	movs	r0, #0
	__asm__ volatile(
    4b60:	f382 8811 	msr	BASEPRI, r2
    4b64:	f3bf 8f6f 	isb	sy
}
    4b68:	4770      	bx	lr
		err = -EPERM;
    4b6a:	f04f 30ff 	mov.w	r0, #4294967295
    4b6e:	e7f7      	b.n	4b60 <set_off_state+0x22>

00004b70 <set_starting_state>:
{
    4b70:	b510      	push	{r4, lr}
	__asm__ volatile(
    4b72:	f04f 0320 	mov.w	r3, #32
    4b76:	f3ef 8211 	mrs	r2, BASEPRI
    4b7a:	f383 8812 	msr	BASEPRI_MAX, r3
    4b7e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4b82:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4b84:	f003 0407 	and.w	r4, r3, #7
    4b88:	2c01      	cmp	r4, #1
    4b8a:	d106      	bne.n	4b9a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4b8c:	6001      	str	r1, [r0, #0]
	int err = 0;
    4b8e:	2000      	movs	r0, #0
	__asm__ volatile(
    4b90:	f382 8811 	msr	BASEPRI, r2
    4b94:	f3bf 8f6f 	isb	sy
}
    4b98:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4b9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4b9e:	428b      	cmp	r3, r1
		err = -EALREADY;
    4ba0:	bf14      	ite	ne
    4ba2:	f04f 30ff 	movne.w	r0, #4294967295
    4ba6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    4baa:	e7f1      	b.n	4b90 <set_starting_state+0x20>

00004bac <set_on_state>:
	__asm__ volatile(
    4bac:	f04f 0320 	mov.w	r3, #32
    4bb0:	f3ef 8211 	mrs	r2, BASEPRI
    4bb4:	f383 8812 	msr	BASEPRI_MAX, r3
    4bb8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4bbc:	6803      	ldr	r3, [r0, #0]
    4bbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4bc2:	f043 0302 	orr.w	r3, r3, #2
    4bc6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4bc8:	f382 8811 	msr	BASEPRI, r2
    4bcc:	f3bf 8f6f 	isb	sy
}
    4bd0:	4770      	bx	lr

00004bd2 <onoff_started_callback>:
{
    4bd2:	b410      	push	{r4}
	notify(mgr, 0);
    4bd4:	241c      	movs	r4, #28
	return &data->mgr[type];
    4bd6:	6900      	ldr	r0, [r0, #16]
    4bd8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4bda:	fb03 0004 	mla	r0, r3, r4, r0
    4bde:	2100      	movs	r1, #0
}
    4be0:	bc10      	pop	{r4}
	notify(mgr, 0);
    4be2:	4710      	bx	r2

00004be4 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4be4:	2003      	movs	r0, #3
    4be6:	f7fe b8a5 	b.w	2d34 <nrfx_clock_start>

00004bea <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    4bea:	2002      	movs	r0, #2
    4bec:	f7fe b8a2 	b.w	2d34 <nrfx_clock_start>

00004bf0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4bf0:	2000      	movs	r0, #0
    4bf2:	f7fe b89f 	b.w	2d34 <nrfx_clock_start>

00004bf6 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4bf6:	2003      	movs	r0, #3
    4bf8:	f000 b9d5 	b.w	4fa6 <nrfx_clock_stop>

00004bfc <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    4bfc:	2002      	movs	r0, #2
    4bfe:	f000 b9d2 	b.w	4fa6 <nrfx_clock_stop>

00004c02 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4c02:	2000      	movs	r0, #0
    4c04:	f000 b9cf 	b.w	4fa6 <nrfx_clock_stop>

00004c08 <blocking_start_callback>:
{
    4c08:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4c0a:	f7fe bf41 	b.w	3a90 <z_impl_k_sem_give>

00004c0e <api_stop>:
{
    4c0e:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    4c10:	230c      	movs	r3, #12
    4c12:	b2cc      	uxtb	r4, r1
    4c14:	4363      	muls	r3, r4
{
    4c16:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    4c18:	6900      	ldr	r0, [r0, #16]
    4c1a:	3378      	adds	r3, #120	; 0x78
    4c1c:	2180      	movs	r1, #128	; 0x80
    4c1e:	4418      	add	r0, r3
    4c20:	f7ff ff8d 	bl	4b3e <set_off_state>
	if (err < 0) {
    4c24:	2800      	cmp	r0, #0
    4c26:	db05      	blt.n	4c34 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    4c28:	6869      	ldr	r1, [r5, #4]
    4c2a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    4c2e:	6863      	ldr	r3, [r4, #4]
    4c30:	4798      	blx	r3
	return 0;
    4c32:	2000      	movs	r0, #0
}
    4c34:	bd38      	pop	{r3, r4, r5, pc}

00004c36 <api_start>:
{
    4c36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	err = set_starting_state(&subdata->flags, ctx);
    4c3a:	270c      	movs	r7, #12
    4c3c:	b2cd      	uxtb	r5, r1
    4c3e:	436f      	muls	r7, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4c40:	6904      	ldr	r4, [r0, #16]
{
    4c42:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    4c44:	f107 0078 	add.w	r0, r7, #120	; 0x78
    4c48:	2180      	movs	r1, #128	; 0x80
    4c4a:	4420      	add	r0, r4
{
    4c4c:	4690      	mov	r8, r2
    4c4e:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    4c50:	f7ff ff8e 	bl	4b70 <set_starting_state>
	if (err < 0) {
    4c54:	2800      	cmp	r0, #0
    4c56:	db07      	blt.n	4c68 <api_start+0x32>
	subdata->cb = cb;
    4c58:	443c      	add	r4, r7
	subdata->user_data = user_data;
    4c5a:	e9c4 891c 	strd	r8, r9, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    4c5e:	6873      	ldr	r3, [r6, #4]
    4c60:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    4c64:	4798      	blx	r3
	return 0;
    4c66:	2000      	movs	r0, #0
}
    4c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004c6c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c6c:	6843      	ldr	r3, [r0, #4]
}
    4c6e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c70:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4c72:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    4c74:	600b      	str	r3, [r1, #0]
}
    4c76:	4770      	bx	lr

00004c78 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c78:	6843      	ldr	r3, [r0, #4]
    4c7a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    4c7c:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    4c7e:	4042      	eors	r2, r0
    4c80:	400a      	ands	r2, r1
    4c82:	4042      	eors	r2, r0
    p_reg->OUT = value;
    4c84:	605a      	str	r2, [r3, #4]
}
    4c86:	2000      	movs	r0, #0
    4c88:	4770      	bx	lr

00004c8a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c8a:	6843      	ldr	r3, [r0, #4]
}
    4c8c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c8e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    4c90:	6099      	str	r1, [r3, #8]
}
    4c92:	4770      	bx	lr

00004c94 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c94:	6843      	ldr	r3, [r0, #4]
}
    4c96:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c98:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    4c9a:	60d9      	str	r1, [r3, #12]
}
    4c9c:	4770      	bx	lr

00004c9e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c9e:	6843      	ldr	r3, [r0, #4]
}
    4ca0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ca2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4ca4:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    4ca6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    4ca8:	6053      	str	r3, [r2, #4]
}
    4caa:	4770      	bx	lr

00004cac <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4cac:	6903      	ldr	r3, [r0, #16]
{
    4cae:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    4cb0:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    4cb2:	b158      	cbz	r0, 4ccc <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4cb4:	2400      	movs	r4, #0
    4cb6:	4281      	cmp	r1, r0
    4cb8:	d113      	bne.n	4ce2 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    4cba:	6808      	ldr	r0, [r1, #0]
    4cbc:	b95c      	cbnz	r4, 4cd6 <gpio_nrfx_manage_callback+0x2a>
    4cbe:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    4cc0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4cc2:	42a1      	cmp	r1, r4
    4cc4:	d100      	bne.n	4cc8 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4cc6:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4cc8:	2000      	movs	r0, #0
    4cca:	6008      	str	r0, [r1, #0]
	if (set) {
    4ccc:	b972      	cbnz	r2, 4cec <gpio_nrfx_manage_callback+0x40>
	return 0;
    4cce:	2000      	movs	r0, #0
}
    4cd0:	bd30      	pop	{r4, r5, pc}
    4cd2:	4628      	mov	r0, r5
    4cd4:	e7ef      	b.n	4cb6 <gpio_nrfx_manage_callback+0xa>
    4cd6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4cd8:	6898      	ldr	r0, [r3, #8]
    4cda:	4281      	cmp	r1, r0
	list->tail = node;
    4cdc:	bf08      	it	eq
    4cde:	609c      	streq	r4, [r3, #8]
}
    4ce0:	e7f2      	b.n	4cc8 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4ce2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4ce4:	4604      	mov	r4, r0
    4ce6:	2d00      	cmp	r5, #0
    4ce8:	d1f3      	bne.n	4cd2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4cea:	b13a      	cbz	r2, 4cfc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    4cec:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4cee:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4cf0:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    4cf2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4cf4:	2800      	cmp	r0, #0
    4cf6:	d1ea      	bne.n	4cce <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4cf8:	6099      	str	r1, [r3, #8]
}
    4cfa:	e7e9      	b.n	4cd0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4cfc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4d00:	e7e6      	b.n	4cd0 <gpio_nrfx_manage_callback+0x24>

00004d02 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4d02:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4d04:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4d06:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4d0a:	05c9      	lsls	r1, r1, #23
    4d0c:	d518      	bpl.n	4d40 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d0e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4d12:	b1a9      	cbz	r1, 4d40 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4d14:	f04f 0020 	mov.w	r0, #32
    4d18:	f3ef 8111 	mrs	r1, BASEPRI
    4d1c:	f380 8812 	msr	BASEPRI_MAX, r0
    4d20:	f3bf 8f6f 	isb	sy
    4d24:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4d28:	b130      	cbz	r0, 4d38 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d2a:	2000      	movs	r0, #0
    4d2c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4d30:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d34:	2001      	movs	r0, #1
    4d36:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4d38:	f381 8811 	msr	BASEPRI, r1
    4d3c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4d40:	6852      	ldr	r2, [r2, #4]
    4d42:	06d2      	lsls	r2, r2, #27
    4d44:	d515      	bpl.n	4d72 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4d46:	f04f 0120 	mov.w	r1, #32
    4d4a:	f3ef 8211 	mrs	r2, BASEPRI
    4d4e:	f381 8812 	msr	BASEPRI_MAX, r1
    4d52:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d56:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4d5a:	b111      	cbz	r1, 4d62 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4d5c:	2100      	movs	r1, #0
    4d5e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4d62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4d66:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4d6a:	f382 8811 	msr	BASEPRI, r2
    4d6e:	f3bf 8f6f 	isb	sy
}
    4d72:	4770      	bx	lr

00004d74 <uarte_nrfx_config_get>:
{
    4d74:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    4d76:	6902      	ldr	r2, [r0, #16]
    4d78:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4d7c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4d80:	2000      	movs	r0, #0
    4d82:	4770      	bx	lr

00004d84 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4d84:	6843      	ldr	r3, [r0, #4]
    4d86:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4d88:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4d8c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4d90:	4770      	bx	lr

00004d92 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4d92:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4d94:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4d96:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d98:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4d9c:	b148      	cbz	r0, 4db2 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d9e:	2000      	movs	r0, #0
	*c = data->rx_data;
    4da0:	7c52      	ldrb	r2, [r2, #17]
    4da2:	700a      	strb	r2, [r1, #0]
    4da4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4da8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4dac:	2201      	movs	r2, #1
    4dae:	601a      	str	r2, [r3, #0]
	return 0;
    4db0:	4770      	bx	lr
		return -1;
    4db2:	f04f 30ff 	mov.w	r0, #4294967295
}
    4db6:	4770      	bx	lr

00004db8 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4db8:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4dba:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dbc:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4dc0:	b940      	cbnz	r0, 4dd4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4dc2:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4dc4:	079b      	lsls	r3, r3, #30
    4dc6:	d406      	bmi.n	4dd6 <is_tx_ready.isra.0+0x1e>
    4dc8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4dcc:	3800      	subs	r0, #0
    4dce:	bf18      	it	ne
    4dd0:	2001      	movne	r0, #1
    4dd2:	4770      	bx	lr
    4dd4:	2001      	movs	r0, #1
}
    4dd6:	4770      	bx	lr

00004dd8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4dd8:	4770      	bx	lr

00004dda <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4dda:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4ddc:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    4de0:	6843      	ldr	r3, [r0, #4]
    4de2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4de4:	7a04      	ldrb	r4, [r0, #8]
    4de6:	6813      	ldr	r3, [r2, #0]
    4de8:	19a5      	adds	r5, r4, r6
    4dea:	6844      	ldr	r4, [r0, #4]
    4dec:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4df0:	42a3      	cmp	r3, r4
    4df2:	d902      	bls.n	4dfa <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    4df4:	f06f 0001 	mvn.w	r0, #1
}
    4df8:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    4dfa:	795c      	ldrb	r4, [r3, #5]
    4dfc:	428c      	cmp	r4, r1
    4dfe:	d002      	beq.n	4e06 <pinctrl_lookup_state+0x2c>
		(*state)++;
    4e00:	3308      	adds	r3, #8
    4e02:	6013      	str	r3, [r2, #0]
    4e04:	e7ee      	b.n	4de4 <pinctrl_lookup_state+0xa>
			return 0;
    4e06:	2000      	movs	r0, #0
    4e08:	e7f6      	b.n	4df8 <pinctrl_lookup_state+0x1e>

00004e0a <nrf_gpio_pin_write>:
    if (value == 0)
    4e0a:	b909      	cbnz	r1, 4e10 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    4e0c:	f7fd bde8 	b.w	29e0 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    4e10:	f7fd bdf8 	b.w	2a04 <nrf_gpio_pin_set>

00004e14 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e16:	4605      	mov	r5, r0
    4e18:	460f      	mov	r7, r1
    4e1a:	4616      	mov	r6, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4e1c:	2400      	movs	r4, #0
    4e1e:	42a7      	cmp	r7, r4
    4e20:	d101      	bne.n	4e26 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    4e22:	2000      	movs	r0, #0
}
    4e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (NRF_GET_FUN(pins[i])) {
    4e26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4e2a:	0c1a      	lsrs	r2, r3, #16
    4e2c:	2a22      	cmp	r2, #34	; 0x22
    4e2e:	f200 8093 	bhi.w	4f58 <pinctrl_configure_pins+0x144>
    4e32:	e8df f002 	tbb	[pc, r2]
    4e36:	1e12      	.short	0x1e12
    4e38:	3c2a4725 	.word	0x3c2a4725
    4e3c:	91919147 	.word	0x91919147
    4e40:	91514c91 	.word	0x91514c91
    4e44:	91919191 	.word	0x91919191
    4e48:	91919191 	.word	0x91919191
    4e4c:	6d686356 	.word	0x6d686356
    4e50:	72919191 	.word	0x72919191
    4e54:	87827d78 	.word	0x87827d78
    4e58:	8c          	.byte	0x8c
    4e59:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    4e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e5e:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4e62:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e66:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4e6a:	f7fd fdcb 	bl	2a04 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4e6e:	2201      	movs	r2, #1
    4e70:	e016      	b.n	4ea0 <pinctrl_configure_pins+0x8c>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    4e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e76:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e7a:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e7c:	2100      	movs	r1, #0
    4e7e:	e010      	b.n	4ea2 <pinctrl_configure_pins+0x8e>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    4e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e84:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
    4e88:	e7eb      	b.n	4e62 <pinctrl_configure_pins+0x4e>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e8e:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4e92:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
        nrf_gpio_pin_clear(pin_number);
    4e96:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4e9a:	f7fd fda1 	bl	29e0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4e9e:	2200      	movs	r2, #0
    4ea0:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4ea2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4ea6:	f7fd fd73 	bl	2990 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4eaa:	3401      	adds	r4, #1
    4eac:	e7b7      	b.n	4e1e <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    4eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4eb2:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4eb6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4eba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4ebe:	f7fd fd8f 	bl	29e0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4ec2:	e7d4      	b.n	4e6e <pinctrl_configure_pins+0x5a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    4ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4ec8:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4ecc:	e7d5      	b.n	4e7a <pinctrl_configure_pins+0x66>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    4ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4ed2:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4ed6:	e7d0      	b.n	4e7a <pinctrl_configure_pins+0x66>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    4ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4edc:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
    4ee0:	e7cb      	b.n	4e7a <pinctrl_configure_pins+0x66>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    4ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4ee6:	f8c6 3560 	str.w	r3, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4eea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4eee:	f3c0 3140 	ubfx	r1, r0, #13, #1
    4ef2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4ef6:	f7ff ff88 	bl	4e0a <nrf_gpio_pin_write>
    4efa:	e7b8      	b.n	4e6e <pinctrl_configure_pins+0x5a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    4efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f00:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4f04:	e7f1      	b.n	4eea <pinctrl_configure_pins+0xd6>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    4f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f0a:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4f0e:	e7ec      	b.n	4eea <pinctrl_configure_pins+0xd6>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    4f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f14:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c
    4f18:	e7e7      	b.n	4eea <pinctrl_configure_pins+0xd6>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    4f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f1e:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f22:	2201      	movs	r2, #1
    4f24:	e7aa      	b.n	4e7c <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    4f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f2a:	f8c6 3528 	str.w	r3, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f2e:	e7f8      	b.n	4f22 <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    4f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f34:	f8c6 3530 	str.w	r3, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f38:	e7f3      	b.n	4f22 <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    4f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f3e:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f42:	e7ee      	b.n	4f22 <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    4f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f48:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f4c:	e7e9      	b.n	4f22 <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    4f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f52:	f8c6 353c 	str.w	r3, [r6, #1340]	; 0x53c
    4f56:	e7e4      	b.n	4f22 <pinctrl_configure_pins+0x10e>
		switch (NRF_GET_FUN(pins[i])) {
    4f58:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4f5c:	e762      	b.n	4e24 <pinctrl_configure_pins+0x10>

00004f5e <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4f5e:	2000      	movs	r0, #0
{
    4f60:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    4f62:	f7fc fc57 	bl	1814 <sys_arch_reboot>

00004f66 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4f66:	f7ff bab7 	b.w	44d8 <nrf_cc3xx_platform_init_no_rng>

00004f6a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    4f6a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4f6c:	f7fc f91e 	bl	11ac <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    4f70:	f7fc f9e2 	bl	1338 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    4f74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4f78:	f7ff baae 	b.w	44d8 <nrf_cc3xx_platform_init_no_rng>

00004f7c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4f7c:	4700      	bx	r0

00004f7e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4f7e:	f000 b9d9 	b.w	5334 <z_impl_k_busy_wait>

00004f82 <nrfx_clock_enable>:
{
    4f82:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4f84:	2005      	movs	r0, #5
    4f86:	f7fc fa1b 	bl	13c0 <arch_irq_is_enabled>
    4f8a:	b910      	cbnz	r0, 4f92 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4f8c:	2005      	movs	r0, #5
    4f8e:	f7fc fa07 	bl	13a0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4f92:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f96:	2201      	movs	r2, #1
    4f98:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    4f9c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    4fa0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    4fa4:	bd08      	pop	{r3, pc}

00004fa6 <nrfx_clock_stop>:
    clock_stop(domain);
    4fa6:	f7fd be31 	b.w	2c0c <clock_stop>

00004faa <nrf_gpio_reconfigure>:
{
    4faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fac:	4617      	mov	r7, r2
    4fae:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    4fb2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fb4:	a801      	add	r0, sp, #4
{
    4fb6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fb8:	f7fd ff80 	bl	2ebc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4fbc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4fbe:	2f00      	cmp	r7, #0
    4fc0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4fc4:	bf14      	ite	ne
    4fc6:	2302      	movne	r3, #2
    4fc8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4fca:	2900      	cmp	r1, #0
    4fcc:	bf18      	it	ne
    4fce:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4fd2:	2d00      	cmp	r5, #0
    4fd4:	bf14      	ite	ne
    4fd6:	f04f 0c0c 	movne.w	ip, #12
    4fda:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4fde:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4fe0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4fe4:	bf14      	ite	ne
    4fe6:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    4fea:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4fee:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4ff0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4ff4:	bf14      	ite	ne
    4ff6:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    4ffa:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ffe:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5002:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    5006:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    500a:	b101      	cbz	r1, 500e <nrf_gpio_reconfigure+0x64>
    500c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    500e:	b10f      	cbz	r7, 5014 <nrf_gpio_reconfigure+0x6a>
    5010:	783f      	ldrb	r7, [r7, #0]
    5012:	007f      	lsls	r7, r7, #1
    5014:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5016:	b10d      	cbz	r5, 501c <nrf_gpio_reconfigure+0x72>
    5018:	782d      	ldrb	r5, [r5, #0]
    501a:	00ad      	lsls	r5, r5, #2
    501c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    501e:	b10c      	cbz	r4, 5024 <nrf_gpio_reconfigure+0x7a>
    5020:	7822      	ldrb	r2, [r4, #0]
    5022:	0214      	lsls	r4, r2, #8
    5024:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    5026:	b10e      	cbz	r6, 502c <nrf_gpio_reconfigure+0x82>
    5028:	7836      	ldrb	r6, [r6, #0]
    502a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    502c:	432c      	orrs	r4, r5
    502e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    5030:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    5034:	b003      	add	sp, #12
    5036:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005038 <nrf_gpio_cfg_sense_set>:
{
    5038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    503a:	f10d 030f 	add.w	r3, sp, #15
    503e:	9301      	str	r3, [sp, #4]
    5040:	2300      	movs	r3, #0
{
    5042:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5046:	461a      	mov	r2, r3
    5048:	4619      	mov	r1, r3
    504a:	9300      	str	r3, [sp, #0]
    504c:	f7ff ffad 	bl	4faa <nrf_gpio_reconfigure>
}
    5050:	b005      	add	sp, #20
    5052:	f85d fb04 	ldr.w	pc, [sp], #4

00005056 <z_device_state_init>:
}
    5056:	4770      	bx	lr

00005058 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5058:	b138      	cbz	r0, 506a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    505a:	68c3      	ldr	r3, [r0, #12]
    505c:	8818      	ldrh	r0, [r3, #0]
    505e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    5062:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    5066:	4258      	negs	r0, r3
    5068:	4158      	adcs	r0, r3
}
    506a:	4770      	bx	lr

0000506c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    506e:	4605      	mov	r5, r0
    5070:	460e      	mov	r6, r1
	__asm__ volatile(
    5072:	f04f 0320 	mov.w	r3, #32
    5076:	f3ef 8711 	mrs	r7, BASEPRI
    507a:	f383 8812 	msr	BASEPRI_MAX, r3
    507e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5082:	f7ff f853 	bl	412c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5086:	4631      	mov	r1, r6
    5088:	4604      	mov	r4, r0
    508a:	4628      	mov	r0, r5
    508c:	f7ff ff67 	bl	4f5e <k_sys_fatal_error_handler>
	__asm__ volatile(
    5090:	f387 8811 	msr	BASEPRI, r7
    5094:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5098:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    509a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    509e:	f7fc bc01 	b.w	18a4 <z_impl_k_thread_abort>

000050a2 <z_early_memset>:
	(void) memset(dst, c, n);
    50a2:	f7ff bd37 	b.w	4b14 <memset>

000050a6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    50a6:	f7ff bd2a 	b.w	4afe <memcpy>

000050aa <k_mem_slab_init>:
{
    50aa:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    50ac:	2400      	movs	r4, #0
    50ae:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    50b0:	ea41 0402 	orr.w	r4, r1, r2
    50b4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    50b8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    50bc:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    50be:	d10c      	bne.n	50da <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    50c0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    50c2:	42a3      	cmp	r3, r4
    50c4:	d103      	bne.n	50ce <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    50c6:	e9c0 0000 	strd	r0, r0, [r0]
}
    50ca:	2000      	movs	r0, #0
}
    50cc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    50ce:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    50d0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    50d2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    50d4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    50d6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    50d8:	e7f3      	b.n	50c2 <k_mem_slab_init+0x18>
		return -EINVAL;
    50da:	f06f 0015 	mvn.w	r0, #21
	return rc;
    50de:	e7f5      	b.n	50cc <k_mem_slab_init+0x22>

000050e0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    50e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50e2:	4604      	mov	r4, r0
    50e4:	460d      	mov	r5, r1
	__asm__ volatile(
    50e6:	f04f 0320 	mov.w	r3, #32
    50ea:	f3ef 8611 	mrs	r6, BASEPRI
    50ee:	f383 8812 	msr	BASEPRI_MAX, r3
    50f2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    50f6:	6947      	ldr	r7, [r0, #20]
    50f8:	b977      	cbnz	r7, 5118 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    50fa:	f000 f8bf 	bl	527c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    50fe:	b158      	cbz	r0, 5118 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5100:	682a      	ldr	r2, [r5, #0]
    5102:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5104:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    5106:	f000 f85a 	bl	51be <z_ready_thread>
			z_reschedule(&slab->lock, key);
    510a:	4631      	mov	r1, r6
    510c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5110:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    5114:	f7fe bd4c 	b.w	3bb0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    5118:	682b      	ldr	r3, [r5, #0]
    511a:	6962      	ldr	r2, [r4, #20]
    511c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    511e:	682b      	ldr	r3, [r5, #0]
    5120:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    5122:	69a3      	ldr	r3, [r4, #24]
    5124:	3b01      	subs	r3, #1
    5126:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    5128:	f386 8811 	msr	BASEPRI, r6
    512c:	f3bf 8f6f 	isb	sy
}
    5130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005132 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5132:	f3ef 8005 	mrs	r0, IPSR
}
    5136:	3800      	subs	r0, #0
    5138:	bf18      	it	ne
    513a:	2001      	movne	r0, #1
    513c:	4770      	bx	lr

0000513e <z_pm_save_idle_exit>:
{
    513e:	b508      	push	{r3, lr}
	pm_system_resume();
    5140:	f7fb ff28 	bl	f94 <pm_system_resume>
}
    5144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    5148:	f7ff be46 	b.w	4dd8 <sys_clock_idle_exit>

0000514c <z_impl_k_mutex_init>:
{
    514c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    514e:	2000      	movs	r0, #0
    5150:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    5154:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    5158:	4770      	bx	lr

0000515a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    515a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    515e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5160:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5162:	2300      	movs	r3, #0
	node->prev = NULL;
    5164:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    5168:	4770      	bx	lr

0000516a <unpend_thread_no_timeout>:
{
    516a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    516c:	f7ff fff5 	bl	515a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5170:	7b43      	ldrb	r3, [r0, #13]
    5172:	f023 0302 	bic.w	r3, r3, #2
    5176:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    5178:	2300      	movs	r3, #0
    517a:	6083      	str	r3, [r0, #8]
}
    517c:	bd08      	pop	{r3, pc}

0000517e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    517e:	4603      	mov	r3, r0
    5180:	b920      	cbnz	r0, 518c <z_reschedule_irqlock+0xe>
    5182:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    5186:	b90a      	cbnz	r2, 518c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5188:	f7fc b95e 	b.w	1448 <arch_swap>
    518c:	f383 8811 	msr	BASEPRI, r3
    5190:	f3bf 8f6f 	isb	sy
}
    5194:	4770      	bx	lr

00005196 <z_reschedule_unlocked>:
	__asm__ volatile(
    5196:	f04f 0320 	mov.w	r3, #32
    519a:	f3ef 8011 	mrs	r0, BASEPRI
    519e:	f383 8812 	msr	BASEPRI_MAX, r3
    51a2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    51a6:	f7ff bfea 	b.w	517e <z_reschedule_irqlock>

000051aa <z_priq_dumb_best>:
{
    51aa:	4603      	mov	r3, r0
	return list->head == list;
    51ac:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51ae:	4283      	cmp	r3, r0
    51b0:	d003      	beq.n	51ba <z_priq_dumb_best+0x10>
	if (n != NULL) {
    51b2:	2800      	cmp	r0, #0
    51b4:	bf38      	it	cc
    51b6:	2000      	movcc	r0, #0
    51b8:	4770      	bx	lr
	struct k_thread *thread = NULL;
    51ba:	2000      	movs	r0, #0
}
    51bc:	4770      	bx	lr

000051be <z_ready_thread>:
{
    51be:	b510      	push	{r4, lr}
    51c0:	f04f 0320 	mov.w	r3, #32
    51c4:	f3ef 8411 	mrs	r4, BASEPRI
    51c8:	f383 8812 	msr	BASEPRI_MAX, r3
    51cc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    51d0:	f7fe fdb6 	bl	3d40 <ready_thread>
	__asm__ volatile(
    51d4:	f384 8811 	msr	BASEPRI, r4
    51d8:	f3bf 8f6f 	isb	sy
}
    51dc:	bd10      	pop	{r4, pc}

000051de <z_thread_timeout>:
{
    51de:	4601      	mov	r1, r0
    51e0:	b510      	push	{r4, lr}
	__asm__ volatile(
    51e2:	f04f 0320 	mov.w	r3, #32
    51e6:	f3ef 8411 	mrs	r4, BASEPRI
    51ea:	f383 8812 	msr	BASEPRI_MAX, r3
    51ee:	f3bf 8f6f 	isb	sy
		if (!killed) {
    51f2:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    51f6:	f013 0f28 	tst.w	r3, #40	; 0x28
    51fa:	d10d      	bne.n	5218 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    51fc:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5200:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    5202:	b10b      	cbz	r3, 5208 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    5204:	f7ff ffb1 	bl	516a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5208:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    520c:	f023 0314 	bic.w	r3, r3, #20
    5210:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    5214:	f7fe fd94 	bl	3d40 <ready_thread>
	__asm__ volatile(
    5218:	f384 8811 	msr	BASEPRI, r4
    521c:	f3bf 8f6f 	isb	sy
}
    5220:	bd10      	pop	{r4, pc}

00005222 <add_to_waitq_locked>:
{
    5222:	b538      	push	{r3, r4, r5, lr}
    5224:	4604      	mov	r4, r0
    5226:	460d      	mov	r5, r1
	unready_thread(thread);
    5228:	f7fe fde0 	bl	3dec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    522c:	7b63      	ldrb	r3, [r4, #13]
    522e:	f043 0302 	orr.w	r3, r3, #2
    5232:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5234:	b1b5      	cbz	r5, 5264 <add_to_waitq_locked+0x42>
	return list->head == list;
    5236:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    5238:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    523a:	429d      	cmp	r5, r3
    523c:	bf08      	it	eq
    523e:	2300      	moveq	r3, #0
    5240:	2b00      	cmp	r3, #0
    5242:	bf38      	it	cc
    5244:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5246:	b19b      	cbz	r3, 5270 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    5248:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    524c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5250:	4291      	cmp	r1, r2
    5252:	d008      	beq.n	5266 <add_to_waitq_locked+0x44>
		return b2 - b1;
    5254:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5256:	2a00      	cmp	r2, #0
    5258:	dd05      	ble.n	5266 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    525a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    525c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5260:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5262:	605c      	str	r4, [r3, #4]
}
    5264:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5266:	686a      	ldr	r2, [r5, #4]
    5268:	4293      	cmp	r3, r2
    526a:	d001      	beq.n	5270 <add_to_waitq_locked+0x4e>
    526c:	681b      	ldr	r3, [r3, #0]
    526e:	e7ea      	b.n	5246 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    5270:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5272:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5276:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5278:	606c      	str	r4, [r5, #4]
    527a:	e7f3      	b.n	5264 <add_to_waitq_locked+0x42>

0000527c <z_unpend_first_thread>:
{
    527c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    527e:	f04f 0320 	mov.w	r3, #32
    5282:	f3ef 8511 	mrs	r5, BASEPRI
    5286:	f383 8812 	msr	BASEPRI_MAX, r3
    528a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    528e:	f7ff ff8c 	bl	51aa <z_priq_dumb_best>
		if (thread != NULL) {
    5292:	4604      	mov	r4, r0
    5294:	b120      	cbz	r0, 52a0 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    5296:	f7ff ff68 	bl	516a <unpend_thread_no_timeout>
    529a:	3018      	adds	r0, #24
    529c:	f000 f806 	bl	52ac <z_abort_timeout>
	__asm__ volatile(
    52a0:	f385 8811 	msr	BASEPRI, r5
    52a4:	f3bf 8f6f 	isb	sy
}
    52a8:	4620      	mov	r0, r4
    52aa:	bd38      	pop	{r3, r4, r5, pc}

000052ac <z_abort_timeout>:
{
    52ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    52ae:	f04f 0220 	mov.w	r2, #32
    52b2:	f3ef 8411 	mrs	r4, BASEPRI
    52b6:	f382 8812 	msr	BASEPRI_MAX, r2
    52ba:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    52be:	6803      	ldr	r3, [r0, #0]
    52c0:	b13b      	cbz	r3, 52d2 <z_abort_timeout+0x26>
			remove_timeout(to);
    52c2:	f7fe ffaf 	bl	4224 <remove_timeout>
			ret = 0;
    52c6:	2000      	movs	r0, #0
	__asm__ volatile(
    52c8:	f384 8811 	msr	BASEPRI, r4
    52cc:	f3bf 8f6f 	isb	sy
}
    52d0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    52d2:	f06f 0015 	mvn.w	r0, #21
    52d6:	e7f7      	b.n	52c8 <z_abort_timeout+0x1c>

000052d8 <z_get_next_timeout_expiry>:
{
    52d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    52da:	f04f 0320 	mov.w	r3, #32
    52de:	f3ef 8411 	mrs	r4, BASEPRI
    52e2:	f383 8812 	msr	BASEPRI_MAX, r3
    52e6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    52ea:	f7fe ffb5 	bl	4258 <next_timeout>
	__asm__ volatile(
    52ee:	f384 8811 	msr	BASEPRI, r4
    52f2:	f3bf 8f6f 	isb	sy
}
    52f6:	bd10      	pop	{r4, pc}

000052f8 <z_set_timeout_expiry>:
{
    52f8:	b570      	push	{r4, r5, r6, lr}
    52fa:	4604      	mov	r4, r0
    52fc:	460d      	mov	r5, r1
	__asm__ volatile(
    52fe:	f04f 0320 	mov.w	r3, #32
    5302:	f3ef 8611 	mrs	r6, BASEPRI
    5306:	f383 8812 	msr	BASEPRI_MAX, r3
    530a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    530e:	f7fe ffa3 	bl	4258 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5312:	2801      	cmp	r0, #1
    5314:	dd05      	ble.n	5322 <z_set_timeout_expiry+0x2a>
    5316:	42a0      	cmp	r0, r4
    5318:	db03      	blt.n	5322 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    531a:	4629      	mov	r1, r5
    531c:	4620      	mov	r0, r4
    531e:	f7fd fafd 	bl	291c <sys_clock_set_timeout>
	__asm__ volatile(
    5322:	f386 8811 	msr	BASEPRI, r6
    5326:	f3bf 8f6f 	isb	sy
}
    532a:	bd70      	pop	{r4, r5, r6, pc}

0000532c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    532c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    532e:	f7ff f8ad 	bl	448c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5332:	bd08      	pop	{r3, pc}

00005334 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    5334:	b108      	cbz	r0, 533a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    5336:	f7fb bdc7 	b.w	ec8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    533a:	4770      	bx	lr

0000533c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    533c:	4770      	bx	lr
	...

00005340 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    5340:	f7fd bb94 	b.w	2a6c <SystemInit>
